var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":" * PCG Random Number Generation for C++"},
{"lineNum":"    3","line":" *"},
{"lineNum":"    4","line":" * Copyright 2014 Melissa O\'Neill <oneill@pcg-random.org>"},
{"lineNum":"    5","line":" *"},
{"lineNum":"    6","line":" * Licensed under the Apache License, Version 2.0 (the \"License\");"},
{"lineNum":"    7","line":" * you may not use this file except in compliance with the License."},
{"lineNum":"    8","line":" * You may obtain a copy of the License at"},
{"lineNum":"    9","line":" *"},
{"lineNum":"   10","line":" *     http://www.apache.org/licenses/LICENSE-2.0"},
{"lineNum":"   11","line":" *"},
{"lineNum":"   12","line":" * Unless required by applicable law or agreed to in writing, software"},
{"lineNum":"   13","line":" * distributed under the License is distributed on an \"AS IS\" BASIS,"},
{"lineNum":"   14","line":" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},
{"lineNum":"   15","line":" * See the License for the specific language governing permissions and"},
{"lineNum":"   16","line":" * limitations under the License."},
{"lineNum":"   17","line":" *"},
{"lineNum":"   18","line":" * For additional information about the PCG random number generation scheme,"},
{"lineNum":"   19","line":" * including its license and other licensing options, visit"},
{"lineNum":"   20","line":" *"},
{"lineNum":"   21","line":" *     http://www.pcg-random.org"},
{"lineNum":"   22","line":" */"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"/*"},
{"lineNum":"   25","line":" * This code provides the reference implementation of the PCG family of"},
{"lineNum":"   26","line":" * random number generators.  The code is complex because it implements"},
{"lineNum":"   27","line":" *"},
{"lineNum":"   28","line":" *      - several members of the PCG family, specifically members corresponding"},
{"lineNum":"   29","line":" *        to the output functions:"},
{"lineNum":"   30","line":" *             - XSH RR         (good for 64-bit state, 32-bit output)"},
{"lineNum":"   31","line":" *             - XSH RS         (good for 64-bit state, 32-bit output)"},
{"lineNum":"   32","line":" *             - XSL RR         (good for 128-bit state, 64-bit output)"},
{"lineNum":"   33","line":" *             - RXS M XS       (statistically most powerful generator)"},
{"lineNum":"   34","line":" *             - XSL RR RR      (good for 128-bit state, 128-bit output)"},
{"lineNum":"   35","line":" *             - and RXS, RXS M, XSH, XSL       (mostly for testing)"},
{"lineNum":"   36","line":" *      - at potentially *arbitrary* bit sizes"},
{"lineNum":"   37","line":" *      - with four different techniques for random streams (MCG, one-stream"},
{"lineNum":"   38","line":" *        LCG, settable-stream LCG, unique-stream LCG)"},
{"lineNum":"   39","line":" *      - and the extended generation schemes allowing arbitrary periods"},
{"lineNum":"   40","line":" *      - with all features of C++11 random number generation (and more),"},
{"lineNum":"   41","line":" *        some of which are somewhat painful, including"},
{"lineNum":"   42","line":" *            - initializing with a SeedSequence which writes 32-bit values"},
{"lineNum":"   43","line":" *              to memory, even though the state of the generator may not"},
{"lineNum":"   44","line":" *              use 32-bit values (it might use smaller or larger integers)"},
{"lineNum":"   45","line":" *            - I/O for RNGs and a prescribed format, which needs to handle"},
{"lineNum":"   46","line":" *              the issue that 8-bit and 128-bit integers don\'t have working"},
{"lineNum":"   47","line":" *              I/O routines (e.g., normally 8-bit = char, not integer)"},
{"lineNum":"   48","line":" *            - equality and inequality for RNGs"},
{"lineNum":"   49","line":" *      - and a number of convenience typedefs to mask all the complexity"},
{"lineNum":"   50","line":" *"},
{"lineNum":"   51","line":" * The code employes a fairly heavy level of abstraction, and has to deal"},
{"lineNum":"   52","line":" * with various C++ minutia.  If you\'re looking to learn about how the PCG"},
{"lineNum":"   53","line":" * scheme works, you\'re probably best of starting with one of the other"},
{"lineNum":"   54","line":" * codebases (see www.pcg-random.org).  But if you\'re curious about the"},
{"lineNum":"   55","line":" * constants for the various output functions used in those other, simpler,"},
{"lineNum":"   56","line":" * codebases, this code shows how they are calculated."},
{"lineNum":"   57","line":" *"},
{"lineNum":"   58","line":" * On the positive side, at least there are convenience typedefs so that you"},
{"lineNum":"   59","line":" * can say"},
{"lineNum":"   60","line":" *"},
{"lineNum":"   61","line":" *      pcg32 myRNG;"},
{"lineNum":"   62","line":" *"},
{"lineNum":"   63","line":" * rather than:"},
{"lineNum":"   64","line":" *"},
{"lineNum":"   65","line":" *      pcg_detail::engine<"},
{"lineNum":"   66","line":" *          uint32_t,                                           // Output Type"},
{"lineNum":"   67","line":" *          uint64_t,                                           // State Type"},
{"lineNum":"   68","line":" *          pcg_detail::xsh_rr_mixin<uint32_t, uint64_t>, true, // Output Func"},
{"lineNum":"   69","line":" *          pcg_detail::specific_stream<uint64_t>,              // Stream Kind"},
{"lineNum":"   70","line":" *          pcg_detail::default_multiplier<uint64_t>            // LCG Mult"},
{"lineNum":"   71","line":" *      > myRNG;"},
{"lineNum":"   72","line":" *"},
{"lineNum":"   73","line":" */"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"#ifndef PCG_RAND_HPP_INCLUDED"},
{"lineNum":"   76","line":"#define PCG_RAND_HPP_INCLUDED 1"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"#include <cinttypes>"},
{"lineNum":"   79","line":"#include <cstddef>"},
{"lineNum":"   80","line":"#include <cstdlib>"},
{"lineNum":"   81","line":"#include <cstring>"},
{"lineNum":"   82","line":"#include <cassert>"},
{"lineNum":"   83","line":"#include <limits>"},
{"lineNum":"   84","line":"#include <iostream>"},
{"lineNum":"   85","line":"#include <type_traits>"},
{"lineNum":"   86","line":"#include <utility>"},
{"lineNum":"   87","line":"#include <locale>"},
{"lineNum":"   88","line":"#include <new>"},
{"lineNum":"   89","line":"#include <stdexcept>"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"/*"},
{"lineNum":"   92","line":" * The pcg_extras namespace contains some support code that is likley to"},
{"lineNum":"   93","line":" * be useful for a variety of RNGs, including:"},
{"lineNum":"   94","line":" *      - 128-bit int support for platforms where it isn\'t available natively"},
{"lineNum":"   95","line":" *      - bit twiddling operations"},
{"lineNum":"   96","line":" *      - I/O of 128-bit and 8-bit integers"},
{"lineNum":"   97","line":" *      - Handling the evilness of SeedSeq"},
{"lineNum":"   98","line":" *      - Support for efficiently producing random numbers less than a given"},
{"lineNum":"   99","line":" *        bound"},
{"lineNum":"  100","line":" */"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"#include \"pcg_extras.hpp\""},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"namespace pcg_detail {"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"using namespace pcg_extras;"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"/*"},
{"lineNum":"  109","line":" * The LCG generators need some constants to function.  This code lets you"},
{"lineNum":"  110","line":" * look up the constant by *type*.  For example"},
{"lineNum":"  111","line":" *"},
{"lineNum":"  112","line":" *      default_multiplier<uint32_t>::multiplier()"},
{"lineNum":"  113","line":" *"},
{"lineNum":"  114","line":" * gives you the default multipler for 32-bit integers.  We use the name"},
{"lineNum":"  115","line":" * of the constant and not a generic word like value to allow these classes"},
{"lineNum":"  116","line":" * to be used as mixins."},
{"lineNum":"  117","line":" */"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"template <typename T>"},
{"lineNum":"  120","line":"struct default_multiplier {"},
{"lineNum":"  121","line":"    // Not defined for an arbitrary type"},
{"lineNum":"  122","line":"};"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"template <typename T>"},
{"lineNum":"  125","line":"struct default_increment {"},
{"lineNum":"  126","line":"    // Not defined for an arbitrary type"},
{"lineNum":"  127","line":"};"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"#define PCG_DEFINE_CONSTANT(type, what, kind, constant) \\"},
{"lineNum":"  130","line":"        template <>                                     \\"},
{"lineNum":"  131","line":"        struct what ## _ ## kind<type> {                \\"},
{"lineNum":"  132","line":"            static constexpr type kind() {              \\"},
{"lineNum":"  133","line":"                return constant;                        \\"},
{"lineNum":"  134","line":"            }                                           \\"},
{"lineNum":"  135","line":"        };"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"PCG_DEFINE_CONSTANT(uint8_t,  default, multiplier, 141U)"},
{"lineNum":"  138","line":"PCG_DEFINE_CONSTANT(uint8_t,  default, increment,  77U)"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"PCG_DEFINE_CONSTANT(uint16_t, default, multiplier, 12829U)"},
{"lineNum":"  141","line":"PCG_DEFINE_CONSTANT(uint16_t, default, increment,  47989U)"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"PCG_DEFINE_CONSTANT(uint32_t, default, multiplier, 747796405U)"},
{"lineNum":"  144","line":"PCG_DEFINE_CONSTANT(uint32_t, default, increment,  2891336453U)"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"PCG_DEFINE_CONSTANT(uint64_t, default, multiplier, 6364136223846793005ULL)"},
{"lineNum":"  147","line":"PCG_DEFINE_CONSTANT(uint64_t, default, increment,  1442695040888963407ULL)"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"PCG_DEFINE_CONSTANT(pcg128_t, default, multiplier,"},
{"lineNum":"  150","line":"        PCG_128BIT_CONSTANT(2549297995355413924ULL,4865540595714422341ULL))"},
{"lineNum":"  151","line":"PCG_DEFINE_CONSTANT(pcg128_t, default, increment,"},
{"lineNum":"  152","line":"        PCG_128BIT_CONSTANT(6364136223846793005ULL,1442695040888963407ULL))"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"/*"},
{"lineNum":"  156","line":" * Each PCG generator is available in four variants, based on how it applies"},
{"lineNum":"  157","line":" * the additive constant for its underlying LCG; the variations are:"},
{"lineNum":"  158","line":" *"},
{"lineNum":"  159","line":" *     single stream   - all instances use the same fixed constant, thus"},
{"lineNum":"  160","line":" *                       the RNG always somewhere in same sequence"},
{"lineNum":"  161","line":" *     mcg             - adds zero, resulting in a single stream and reduced"},
{"lineNum":"  162","line":" *                       period"},
{"lineNum":"  163","line":" *     specific stream - the constant can be changed at any time, selecting"},
{"lineNum":"  164","line":" *                       a different random sequence"},
{"lineNum":"  165","line":" *     unique stream   - the constant is based on the memory addresss of the"},
{"lineNum":"  166","line":" *                       object, thus every RNG has its own unique sequence"},
{"lineNum":"  167","line":" *"},
{"lineNum":"  168","line":" * This variation is provided though mixin classes which define a function"},
{"lineNum":"  169","line":" * value called increment() that returns the nesessary additive constant."},
{"lineNum":"  170","line":" */"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"/*"},
{"lineNum":"  175","line":" * unique stream"},
{"lineNum":"  176","line":" */"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"template <typename itype>"},
{"lineNum":"  180","line":"class unique_stream {"},
{"lineNum":"  181","line":"protected:"},
{"lineNum":"  182","line":"    static constexpr bool is_mcg = false;"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"    // Is never called, but is provided for symmetry with specific_stream"},
{"lineNum":"  185","line":"    void set_stream(...)"},
{"lineNum":"  186","line":"    {"},
{"lineNum":"  187","line":"        abort();"},
{"lineNum":"  188","line":"    }"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"public:"},
{"lineNum":"  191","line":"    typedef itype state_type;"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    constexpr itype increment() const {"},
{"lineNum":"  194","line":"        return itype(reinterpret_cast<unsigned long>(this) | 1);"},
{"lineNum":"  195","line":"    }"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    constexpr itype stream() const"},
{"lineNum":"  198","line":"    {"},
{"lineNum":"  199","line":"         return increment() >> 1;"},
{"lineNum":"  200","line":"    }"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    static constexpr bool can_specify_stream = false;"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    static constexpr size_t streams_pow2()"},
{"lineNum":"  205","line":"    {"},
{"lineNum":"  206","line":"        return (sizeof(itype) < sizeof(size_t) ? sizeof(itype)"},
{"lineNum":"  207","line":"                                               : sizeof(size_t))*8 - 1u;"},
{"lineNum":"  208","line":"    }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"protected:"},
{"lineNum":"  211","line":"    constexpr unique_stream() = default;"},
{"lineNum":"  212","line":"};"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"/*"},
{"lineNum":"  216","line":" * no stream (mcg)"},
{"lineNum":"  217","line":" */"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"template <typename itype>"},
{"lineNum":"  220","line":"class no_stream {"},
{"lineNum":"  221","line":"protected:"},
{"lineNum":"  222","line":"    static constexpr bool is_mcg = true;"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"    // Is never called, but is provided for symmetry with specific_stream"},
{"lineNum":"  225","line":"    void set_stream(...)"},
{"lineNum":"  226","line":"    {"},
{"lineNum":"  227","line":"        abort();"},
{"lineNum":"  228","line":"    }"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"public:"},
{"lineNum":"  231","line":"    typedef itype state_type;"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    static constexpr itype increment() {"},
{"lineNum":"  234","line":"        return 0;"},
{"lineNum":"  235","line":"    }"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    static constexpr bool can_specify_stream = false;"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    static constexpr size_t streams_pow2()"},
{"lineNum":"  240","line":"    {"},
{"lineNum":"  241","line":"        return 0u;"},
{"lineNum":"  242","line":"    }"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"protected:"},
{"lineNum":"  245","line":"    constexpr no_stream() = default;"},
{"lineNum":"  246","line":"};"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"/*"},
{"lineNum":"  250","line":" * single stream/sequence (oneseq)"},
{"lineNum":"  251","line":" */"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"template <typename itype>"},
{"lineNum":"  254","line":"class oneseq_stream : public default_increment<itype> {"},
{"lineNum":"  255","line":"protected:"},
{"lineNum":"  256","line":"    static constexpr bool is_mcg = false;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    // Is never called, but is provided for symmetry with specific_stream"},
{"lineNum":"  259","line":"    void set_stream(...)"},
{"lineNum":"  260","line":"    {"},
{"lineNum":"  261","line":"        abort();"},
{"lineNum":"  262","line":"    }"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"public:"},
{"lineNum":"  265","line":"    typedef itype state_type;"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    static constexpr itype stream()"},
{"lineNum":"  268","line":"    {"},
{"lineNum":"  269","line":"         return default_increment<itype>::increment() >> 1;"},
{"lineNum":"  270","line":"    }"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"    static constexpr bool can_specify_stream = false;"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    static constexpr size_t streams_pow2()"},
{"lineNum":"  275","line":"    {"},
{"lineNum":"  276","line":"        return 0u;"},
{"lineNum":"  277","line":"    }"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"protected:"},
{"lineNum":"  280","line":"    constexpr oneseq_stream() = default;"},
{"lineNum":"  281","line":"};"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"/*"},
{"lineNum":"  285","line":" * specific stream"},
{"lineNum":"  286","line":" */"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"template <typename itype>"},
{"lineNum":"  289","line":"class specific_stream {"},
{"lineNum":"  290","line":"protected:"},
{"lineNum":"  291","line":"    static constexpr bool is_mcg = false;"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"    itype inc_ = default_increment<itype>::increment();"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"public:"},
{"lineNum":"  296","line":"    typedef itype state_type;"},
{"lineNum":"  297","line":"    typedef itype stream_state;"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"    constexpr itype increment() const {"},
{"lineNum":"  300","line":"        return inc_;"},
{"lineNum":"  301","line":"    }"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    itype stream()"},
{"lineNum":"  304","line":"    {"},
{"lineNum":"  305","line":"         return inc_ >> 1;"},
{"lineNum":"  306","line":"    }"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    void set_stream(itype specific_seq)"},
{"lineNum":"  309","line":"    {"},
{"lineNum":"  310","line":"         inc_ = (specific_seq << 1) | 1;"},
{"lineNum":"  311","line":"    }"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"    static constexpr bool can_specify_stream = true;"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    static constexpr size_t streams_pow2()"},
{"lineNum":"  316","line":"    {"},
{"lineNum":"  317","line":"        return (sizeof(itype)*8) - 1u;"},
{"lineNum":"  318","line":"    }"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"protected:"},
{"lineNum":"  321","line":"    specific_stream() = default;"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    specific_stream(itype specific_seq)"},
{"lineNum":"  324","line":"        : inc_((specific_seq << 1) | itype(1U))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  325","line":"    {"},
{"lineNum":"  326","line":"        // Nothing (else) to do."},
{"lineNum":"  327","line":"    }"},
{"lineNum":"  328","line":"};"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"/*"},
{"lineNum":"  332","line":" * This is where it all comes together.  This function joins together three"},
{"lineNum":"  333","line":" * mixin classes which define"},
{"lineNum":"  334","line":" *    - the LCG additive constant (the stream)"},
{"lineNum":"  335","line":" *    - the LCG multiplier"},
{"lineNum":"  336","line":" *    - the output function"},
{"lineNum":"  337","line":" * in addition, we specify the type of the LCG state, and the result type,"},
{"lineNum":"  338","line":" * and whether to use the pre-advance version of the state for the output"},
{"lineNum":"  339","line":" * (increasing instruction-level parallelism) or the post-advance version"},
{"lineNum":"  340","line":" * (reducing register pressure)."},
{"lineNum":"  341","line":" *"},
{"lineNum":"  342","line":" * Given the high level of parameterization, the code has to use some"},
{"lineNum":"  343","line":" * template-metaprogramming tricks to handle some of the suble variations"},
{"lineNum":"  344","line":" * involved."},
{"lineNum":"  345","line":" */"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"template <typename xtype, typename itype,"},
{"lineNum":"  348","line":"          typename output_mixin,"},
{"lineNum":"  349","line":"          bool output_previous = true,"},
{"lineNum":"  350","line":"          typename stream_mixin = oneseq_stream<itype>,"},
{"lineNum":"  351","line":"          typename multiplier_mixin = default_multiplier<itype> >"},
{"lineNum":"  352","line":"class engine : protected output_mixin,"},
{"lineNum":"  353","line":"               public stream_mixin,"},
{"lineNum":"  354","line":"               protected multiplier_mixin {"},
{"lineNum":"  355","line":"protected:"},
{"lineNum":"  356","line":"    itype state_;"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"    struct can_specify_stream_tag {};"},
{"lineNum":"  359","line":"    struct no_specifiable_stream_tag {};"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"    using stream_mixin::increment;"},
{"lineNum":"  362","line":"    using multiplier_mixin::multiplier;"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"public:"},
{"lineNum":"  365","line":"    typedef xtype result_type;"},
{"lineNum":"  366","line":"    typedef itype state_type;"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"    static constexpr size_t period_pow2()"},
{"lineNum":"  369","line":"    {"},
{"lineNum":"  370","line":"        return sizeof(state_type)*8 - 2*stream_mixin::is_mcg;"},
{"lineNum":"  371","line":"    }"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    // It would be nice to use std::numeric_limits for these, but"},
{"lineNum":"  374","line":"    // we can\'t be sure that it\'d be defined for the 128-bit types."},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    static constexpr result_type min()"},
{"lineNum":"  377","line":"    {"},
{"lineNum":"  378","line":"        return result_type(0UL);"},
{"lineNum":"  379","line":"    }"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"    static constexpr result_type max()"},
{"lineNum":"  382","line":"    {"},
{"lineNum":"  383","line":"        return ~result_type(0UL);"},
{"lineNum":"  384","line":"    }"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"protected:"},
{"lineNum":"  387","line":"    itype bump(itype state)"},
{"lineNum":"  388","line":"    {"},
{"lineNum":"  389","line":"        return state * multiplier() + increment();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  390","line":"    }"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"    itype base_generate()"},
{"lineNum":"  393","line":"    {"},
{"lineNum":"  394","line":"        return state_ = bump(state_);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  395","line":"    }"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"    itype base_generate0()"},
{"lineNum":"  398","line":"    {"},
{"lineNum":"  399","line":"        itype old_state = state_;"},
{"lineNum":"  400","line":"        state_ = bump(state_);"},
{"lineNum":"  401","line":"        return old_state;"},
{"lineNum":"  402","line":"    }"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"public:"},
{"lineNum":"  405","line":"    result_type operator()()"},
{"lineNum":"  406","line":"    {"},
{"lineNum":"  407","line":"        if (output_previous)"},
{"lineNum":"  408","line":"            return this->output(base_generate0());"},
{"lineNum":"  409","line":"        else"},
{"lineNum":"  410","line":"            return this->output(base_generate());"},
{"lineNum":"  411","line":"    }"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"    result_type operator()(result_type upper_bound)"},
{"lineNum":"  414","line":"    {"},
{"lineNum":"  415","line":"        return bounded_rand(*this, upper_bound);"},
{"lineNum":"  416","line":"    }"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"protected:"},
{"lineNum":"  419","line":"    static itype advance(itype state, itype delta,"},
{"lineNum":"  420","line":"                         itype cur_mult, itype cur_plus);"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    static itype distance(itype cur_state, itype newstate, itype cur_mult,"},
{"lineNum":"  423","line":"                          itype cur_plus, itype mask = ~itype(0U));"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"    itype distance(itype newstate, itype mask = ~itype(0U)) const"},
{"lineNum":"  426","line":"    {"},
{"lineNum":"  427","line":"        return distance(state_, newstate, multiplier(), increment(), mask);"},
{"lineNum":"  428","line":"    }"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"public:"},
{"lineNum":"  431","line":"    void advance(itype delta)"},
{"lineNum":"  432","line":"    {"},
{"lineNum":"  433","line":"        state_ = advance(state_, delta, this->multiplier(), this->increment());"},
{"lineNum":"  434","line":"    }"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"    void backstep(itype delta)"},
{"lineNum":"  437","line":"    {"},
{"lineNum":"  438","line":"        advance(-delta);"},
{"lineNum":"  439","line":"    }"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"    void discard(itype delta)"},
{"lineNum":"  442","line":"    {"},
{"lineNum":"  443","line":"        advance(delta);"},
{"lineNum":"  444","line":"    }"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"    bool wrapped()"},
{"lineNum":"  447","line":"    {"},
{"lineNum":"  448","line":"        if (stream_mixin::is_mcg) {"},
{"lineNum":"  449","line":"            // For MCGs, the low order two bits never change. In this"},
{"lineNum":"  450","line":"            // implementation, we keep them fixed at 3 to make this test"},
{"lineNum":"  451","line":"            // easier."},
{"lineNum":"  452","line":"            return state_ == 3;"},
{"lineNum":"  453","line":"        } else {"},
{"lineNum":"  454","line":"            return state_ == 0;"},
{"lineNum":"  455","line":"        }"},
{"lineNum":"  456","line":"    }"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"    engine(itype state = itype(0xcafef00dd15ea5e5ULL))"},
{"lineNum":"  459","line":"        : state_(this->is_mcg ? state|state_type(3U)"},
{"lineNum":"  460","line":"                              : bump(state + this->increment()))"},
{"lineNum":"  461","line":"    {"},
{"lineNum":"  462","line":"        // Nothing else to do."},
{"lineNum":"  463","line":"    }"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"    // This function may or may not exist.  It thus has to be a template"},
{"lineNum":"  466","line":"    // to use SFINAE; users don\'t have to worry about its template-ness."},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"    template <typename sm = stream_mixin>"},
{"lineNum":"  469","line":"    engine(itype state, typename sm::stream_state stream_seed)"},
{"lineNum":"  470","line":"        : stream_mixin(stream_seed),"},
{"lineNum":"  471","line":"          state_(this->is_mcg ? state|state_type(3U)"},
{"lineNum":"  472","line":"                              : bump(state + this->increment()))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  473","line":"    {"},
{"lineNum":"  474","line":"        // Nothing else to do."},
{"lineNum":"  475","line":"    }"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    template<typename SeedSeq>"},
{"lineNum":"  478","line":"    engine(SeedSeq&& seedSeq, typename std::enable_if<"},
{"lineNum":"  479","line":"                  !stream_mixin::can_specify_stream"},
{"lineNum":"  480","line":"               && !std::is_convertible<SeedSeq, itype>::value"},
{"lineNum":"  481","line":"               && !std::is_convertible<SeedSeq, engine>::value,"},
{"lineNum":"  482","line":"               no_specifiable_stream_tag>::type = {})"},
{"lineNum":"  483","line":"        : engine(generate_one<itype>(std::forward<SeedSeq>(seedSeq)))"},
{"lineNum":"  484","line":"    {"},
{"lineNum":"  485","line":"        // Nothing else to do."},
{"lineNum":"  486","line":"    }"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"    template<typename SeedSeq>"},
{"lineNum":"  489","line":"    engine(SeedSeq&& seedSeq, typename std::enable_if<"},
{"lineNum":"  490","line":"                   stream_mixin::can_specify_stream"},
{"lineNum":"  491","line":"               && !std::is_convertible<SeedSeq, itype>::value"},
{"lineNum":"  492","line":"               && !std::is_convertible<SeedSeq, engine>::value,"},
{"lineNum":"  493","line":"        can_specify_stream_tag>::type = {})"},
{"lineNum":"  494","line":"        : engine(generate_one<itype,1,2>(seedSeq),"},
{"lineNum":"  495","line":"                 generate_one<itype,0,2>(seedSeq))"},
{"lineNum":"  496","line":"    {"},
{"lineNum":"  497","line":"        // Nothing else to do."},
{"lineNum":"  498","line":"    }"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"    template<typename... Args>"},
{"lineNum":"  502","line":"    void seed(Args&&... args)"},
{"lineNum":"  503","line":"    {"},
{"lineNum":"  504","line":"        new (this) engine(std::forward<Args>(args)...);"},
{"lineNum":"  505","line":"    }"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"    template <typename xtype1, typename itype1,"},
{"lineNum":"  508","line":"              typename output_mixin1, bool output_previous1,"},
{"lineNum":"  509","line":"              typename stream_mixin_lhs, typename multiplier_mixin_lhs,"},
{"lineNum":"  510","line":"              typename stream_mixin_rhs, typename multiplier_mixin_rhs>"},
{"lineNum":"  511","line":"    friend bool operator==(const engine<xtype1,itype1,"},
{"lineNum":"  512","line":"                                     output_mixin1,output_previous1,"},
{"lineNum":"  513","line":"                                     stream_mixin_lhs, multiplier_mixin_lhs>&,"},
{"lineNum":"  514","line":"                           const engine<xtype1,itype1,"},
{"lineNum":"  515","line":"                                     output_mixin1,output_previous1,"},
{"lineNum":"  516","line":"                                     stream_mixin_rhs, multiplier_mixin_rhs>&);"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"    template <typename xtype1, typename itype1,"},
{"lineNum":"  519","line":"              typename output_mixin1, bool output_previous1,"},
{"lineNum":"  520","line":"              typename stream_mixin_lhs, typename multiplier_mixin_lhs,"},
{"lineNum":"  521","line":"              typename stream_mixin_rhs, typename multiplier_mixin_rhs>"},
{"lineNum":"  522","line":"    friend itype1 operator-(const engine<xtype1,itype1,"},
{"lineNum":"  523","line":"                                     output_mixin1,output_previous1,"},
{"lineNum":"  524","line":"                                     stream_mixin_lhs, multiplier_mixin_lhs>&,"},
{"lineNum":"  525","line":"                            const engine<xtype1,itype1,"},
{"lineNum":"  526","line":"                                     output_mixin1,output_previous1,"},
{"lineNum":"  527","line":"                                     stream_mixin_rhs, multiplier_mixin_rhs>&);"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"    template <typename CharT, typename Traits,"},
{"lineNum":"  530","line":"              typename xtype1, typename itype1,"},
{"lineNum":"  531","line":"              typename output_mixin1, bool output_previous1,"},
{"lineNum":"  532","line":"              typename stream_mixin1, typename multiplier_mixin1>"},
{"lineNum":"  533","line":"    friend std::basic_ostream<CharT,Traits>&"},
{"lineNum":"  534","line":"    operator<<(std::basic_ostream<CharT,Traits>& out,"},
{"lineNum":"  535","line":"               const engine<xtype1,itype1,"},
{"lineNum":"  536","line":"                              output_mixin1,output_previous1,"},
{"lineNum":"  537","line":"                              stream_mixin1, multiplier_mixin1>&);"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"    template <typename CharT, typename Traits,"},
{"lineNum":"  540","line":"              typename xtype1, typename itype1,"},
{"lineNum":"  541","line":"              typename output_mixin1, bool output_previous1,"},
{"lineNum":"  542","line":"              typename stream_mixin1, typename multiplier_mixin1>"},
{"lineNum":"  543","line":"    friend std::basic_istream<CharT,Traits>&"},
{"lineNum":"  544","line":"    operator>>(std::basic_istream<CharT,Traits>& in,"},
{"lineNum":"  545","line":"               engine<xtype1, itype1,"},
{"lineNum":"  546","line":"                        output_mixin1, output_previous1,"},
{"lineNum":"  547","line":"                        stream_mixin1, multiplier_mixin1>& rng);"},
{"lineNum":"  548","line":"};"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"template <typename CharT, typename Traits,"},
{"lineNum":"  551","line":"          typename xtype, typename itype,"},
{"lineNum":"  552","line":"          typename output_mixin, bool output_previous,"},
{"lineNum":"  553","line":"          typename stream_mixin, typename multiplier_mixin>"},
{"lineNum":"  554","line":"std::basic_ostream<CharT,Traits>&"},
{"lineNum":"  555","line":"operator<<(std::basic_ostream<CharT,Traits>& out,"},
{"lineNum":"  556","line":"           const engine<xtype,itype,"},
{"lineNum":"  557","line":"                          output_mixin,output_previous,"},
{"lineNum":"  558","line":"                          stream_mixin, multiplier_mixin>& rng)"},
{"lineNum":"  559","line":"{"},
{"lineNum":"  560","line":"    auto orig_flags = out.flags(std::ios_base::dec | std::ios_base::left);"},
{"lineNum":"  561","line":"    auto space = out.widen(\' \');"},
{"lineNum":"  562","line":"    auto orig_fill = out.fill();"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"    out << rng.multiplier() << space"},
{"lineNum":"  565","line":"        << rng.increment() << space"},
{"lineNum":"  566","line":"        << rng.state_;"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"    out.flags(orig_flags);"},
{"lineNum":"  569","line":"    out.fill(orig_fill);"},
{"lineNum":"  570","line":"    return out;"},
{"lineNum":"  571","line":"}"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"template <typename CharT, typename Traits,"},
{"lineNum":"  575","line":"          typename xtype, typename itype,"},
{"lineNum":"  576","line":"          typename output_mixin, bool output_previous,"},
{"lineNum":"  577","line":"          typename stream_mixin, typename multiplier_mixin>"},
{"lineNum":"  578","line":"std::basic_istream<CharT,Traits>&"},
{"lineNum":"  579","line":"operator>>(std::basic_istream<CharT,Traits>& in,"},
{"lineNum":"  580","line":"           engine<xtype,itype,"},
{"lineNum":"  581","line":"                    output_mixin,output_previous,"},
{"lineNum":"  582","line":"                    stream_mixin, multiplier_mixin>& rng)"},
{"lineNum":"  583","line":"{"},
{"lineNum":"  584","line":"    auto orig_flags = in.flags(std::ios_base::dec | std::ios_base::skipws);"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    itype multiplier, increment, state;"},
{"lineNum":"  587","line":"    in >> multiplier >> increment >> state;"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"    if (!in.fail()) {"},
{"lineNum":"  590","line":"        bool good = true;"},
{"lineNum":"  591","line":"        if (multiplier != rng.multiplier()) {"},
{"lineNum":"  592","line":"           good = false;"},
{"lineNum":"  593","line":"        } else if (rng.can_specify_stream) {"},
{"lineNum":"  594","line":"           rng.set_stream(increment >> 1);"},
{"lineNum":"  595","line":"        } else if (increment != rng.increment()) {"},
{"lineNum":"  596","line":"           good = false;"},
{"lineNum":"  597","line":"        }"},
{"lineNum":"  598","line":"        if (good) {"},
{"lineNum":"  599","line":"            rng.state_ = state;"},
{"lineNum":"  600","line":"        } else {"},
{"lineNum":"  601","line":"            in.clear(std::ios::failbit);"},
{"lineNum":"  602","line":"        }"},
{"lineNum":"  603","line":"    }"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"    in.flags(orig_flags);"},
{"lineNum":"  606","line":"    return in;"},
{"lineNum":"  607","line":"}"},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"template <typename xtype, typename itype,"},
{"lineNum":"  611","line":"          typename output_mixin, bool output_previous,"},
{"lineNum":"  612","line":"          typename stream_mixin, typename multiplier_mixin>"},
{"lineNum":"  613","line":"itype engine<xtype,itype,output_mixin,output_previous,stream_mixin,"},
{"lineNum":"  614","line":"             multiplier_mixin>::advance("},
{"lineNum":"  615","line":"    itype state, itype delta, itype cur_mult, itype cur_plus)"},
{"lineNum":"  616","line":"{"},
{"lineNum":"  617","line":"    // The method used here is based on Brown, \"Random Number Generation"},
{"lineNum":"  618","line":"    // with Arbitrary Stride,\", Transactions of the American Nuclear"},
{"lineNum":"  619","line":"    // Society (Nov. 1994).  The algorithm is very similar to fast"},
{"lineNum":"  620","line":"    // exponentiation."},
{"lineNum":"  621","line":"    //"},
{"lineNum":"  622","line":"    // Even though delta is an unsigned integer, we can pass a"},
{"lineNum":"  623","line":"    // signed integer to go backwards, it just goes \"the long way round\"."},
{"lineNum":"  624","line":""},
{"lineNum":"  625","line":"    constexpr itype ZERO = 0u;  // itype may be a non-trivial types, so"},
{"lineNum":"  626","line":"    constexpr itype ONE  = 1u;  // we define some ugly constants."},
{"lineNum":"  627","line":"    itype acc_mult = 1;"},
{"lineNum":"  628","line":"    itype acc_plus = 0;"},
{"lineNum":"  629","line":"    while (delta > ZERO) {"},
{"lineNum":"  630","line":"       if (delta & ONE) {"},
{"lineNum":"  631","line":"          acc_mult *= cur_mult;"},
{"lineNum":"  632","line":"          acc_plus = acc_plus*cur_mult + cur_plus;"},
{"lineNum":"  633","line":"       }"},
{"lineNum":"  634","line":"       cur_plus = (cur_mult+ONE)*cur_plus;"},
{"lineNum":"  635","line":"       cur_mult *= cur_mult;"},
{"lineNum":"  636","line":"       delta >>= 1;"},
{"lineNum":"  637","line":"    }"},
{"lineNum":"  638","line":"    return acc_mult * state + acc_plus;"},
{"lineNum":"  639","line":"}"},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"template <typename xtype, typename itype,"},
{"lineNum":"  642","line":"          typename output_mixin, bool output_previous,"},
{"lineNum":"  643","line":"          typename stream_mixin, typename multiplier_mixin>"},
{"lineNum":"  644","line":"itype engine<xtype,itype,output_mixin,output_previous,stream_mixin,"},
{"lineNum":"  645","line":"               multiplier_mixin>::distance("},
{"lineNum":"  646","line":"    itype cur_state, itype newstate, itype cur_mult, itype cur_plus, itype mask)"},
{"lineNum":"  647","line":"{"},
{"lineNum":"  648","line":"    constexpr itype ONE  = 1u;  // itype could be weird, so use constant"},
{"lineNum":"  649","line":"    itype the_bit = stream_mixin::is_mcg ? itype(4u) : itype(1u);"},
{"lineNum":"  650","line":"    itype distance = 0u;"},
{"lineNum":"  651","line":"    while ((cur_state & mask) != (newstate & mask)) {"},
{"lineNum":"  652","line":"       if ((cur_state & the_bit) != (newstate & the_bit)) {"},
{"lineNum":"  653","line":"           cur_state = cur_state * cur_mult + cur_plus;"},
{"lineNum":"  654","line":"           distance |= the_bit;"},
{"lineNum":"  655","line":"       }"},
{"lineNum":"  656","line":"       assert((cur_state & the_bit) == (newstate & the_bit));"},
{"lineNum":"  657","line":"       the_bit <<= 1;"},
{"lineNum":"  658","line":"       cur_plus = (cur_mult+ONE)*cur_plus;"},
{"lineNum":"  659","line":"       cur_mult *= cur_mult;"},
{"lineNum":"  660","line":"    }"},
{"lineNum":"  661","line":"    return stream_mixin::is_mcg ? distance >> 2 : distance;"},
{"lineNum":"  662","line":"}"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"template <typename xtype, typename itype,"},
{"lineNum":"  665","line":"          typename output_mixin, bool output_previous,"},
{"lineNum":"  666","line":"          typename stream_mixin_lhs, typename multiplier_mixin_lhs,"},
{"lineNum":"  667","line":"          typename stream_mixin_rhs, typename multiplier_mixin_rhs>"},
{"lineNum":"  668","line":"itype operator-(const engine<xtype,itype,"},
{"lineNum":"  669","line":"                               output_mixin,output_previous,"},
{"lineNum":"  670","line":"                               stream_mixin_lhs, multiplier_mixin_lhs>& lhs,"},
{"lineNum":"  671","line":"               const engine<xtype,itype,"},
{"lineNum":"  672","line":"                               output_mixin,output_previous,"},
{"lineNum":"  673","line":"                               stream_mixin_rhs, multiplier_mixin_rhs>& rhs)"},
{"lineNum":"  674","line":"{"},
{"lineNum":"  675","line":"    if (lhs.multiplier() != rhs.multiplier()"},
{"lineNum":"  676","line":"        || lhs.increment() != rhs.increment())"},
{"lineNum":"  677","line":"        throw std::logic_error(\"incomparable generators\");"},
{"lineNum":"  678","line":"    return rhs.distance(lhs.state_);"},
{"lineNum":"  679","line":"}"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":""},
{"lineNum":"  682","line":"template <typename xtype, typename itype,"},
{"lineNum":"  683","line":"          typename output_mixin, bool output_previous,"},
{"lineNum":"  684","line":"          typename stream_mixin_lhs, typename multiplier_mixin_lhs,"},
{"lineNum":"  685","line":"          typename stream_mixin_rhs, typename multiplier_mixin_rhs>"},
{"lineNum":"  686","line":"bool operator==(const engine<xtype,itype,"},
{"lineNum":"  687","line":"                               output_mixin,output_previous,"},
{"lineNum":"  688","line":"                               stream_mixin_lhs, multiplier_mixin_lhs>& lhs,"},
{"lineNum":"  689","line":"                const engine<xtype,itype,"},
{"lineNum":"  690","line":"                               output_mixin,output_previous,"},
{"lineNum":"  691","line":"                               stream_mixin_rhs, multiplier_mixin_rhs>& rhs)"},
{"lineNum":"  692","line":"{"},
{"lineNum":"  693","line":"    return    (lhs.multiplier() == rhs.multiplier())"},
{"lineNum":"  694","line":"           && (lhs.increment()  == rhs.increment())"},
{"lineNum":"  695","line":"           && (lhs.state_       == rhs.state_);"},
{"lineNum":"  696","line":"}"},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"template <typename xtype, typename itype,"},
{"lineNum":"  699","line":"          typename output_mixin, bool output_previous,"},
{"lineNum":"  700","line":"          typename stream_mixin_lhs, typename multiplier_mixin_lhs,"},
{"lineNum":"  701","line":"          typename stream_mixin_rhs, typename multiplier_mixin_rhs>"},
{"lineNum":"  702","line":"inline bool operator!=(const engine<xtype,itype,"},
{"lineNum":"  703","line":"                               output_mixin,output_previous,"},
{"lineNum":"  704","line":"                               stream_mixin_lhs, multiplier_mixin_lhs>& lhs,"},
{"lineNum":"  705","line":"                       const engine<xtype,itype,"},
{"lineNum":"  706","line":"                               output_mixin,output_previous,"},
{"lineNum":"  707","line":"                               stream_mixin_rhs, multiplier_mixin_rhs>& rhs)"},
{"lineNum":"  708","line":"{"},
{"lineNum":"  709","line":"    return !operator==(lhs,rhs);"},
{"lineNum":"  710","line":"}"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":""},
{"lineNum":"  713","line":"template <typename xtype, typename itype,"},
{"lineNum":"  714","line":"         template<typename XT,typename IT> class output_mixin,"},
{"lineNum":"  715","line":"         bool output_previous = (sizeof(itype) <= 8)>"},
{"lineNum":"  716","line":"using oneseq_base  = engine<xtype, itype,"},
{"lineNum":"  717","line":"                        output_mixin<xtype, itype>, output_previous,"},
{"lineNum":"  718","line":"                        oneseq_stream<itype> >;"},
{"lineNum":"  719","line":""},
{"lineNum":"  720","line":"template <typename xtype, typename itype,"},
{"lineNum":"  721","line":"         template<typename XT,typename IT> class output_mixin,"},
{"lineNum":"  722","line":"         bool output_previous = (sizeof(itype) <= 8)>"},
{"lineNum":"  723","line":"using unique_base = engine<xtype, itype,"},
{"lineNum":"  724","line":"                         output_mixin<xtype, itype>, output_previous,"},
{"lineNum":"  725","line":"                         unique_stream<itype> >;"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"template <typename xtype, typename itype,"},
{"lineNum":"  728","line":"         template<typename XT,typename IT> class output_mixin,"},
{"lineNum":"  729","line":"         bool output_previous = (sizeof(itype) <= 8)>"},
{"lineNum":"  730","line":"using setseq_base = engine<xtype, itype,"},
{"lineNum":"  731","line":"                         output_mixin<xtype, itype>, output_previous,"},
{"lineNum":"  732","line":"                         specific_stream<itype> >;"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"template <typename xtype, typename itype,"},
{"lineNum":"  735","line":"         template<typename XT,typename IT> class output_mixin,"},
{"lineNum":"  736","line":"         bool output_previous = (sizeof(itype) <= 8)>"},
{"lineNum":"  737","line":"using mcg_base = engine<xtype, itype,"},
{"lineNum":"  738","line":"                      output_mixin<xtype, itype>, output_previous,"},
{"lineNum":"  739","line":"                      no_stream<itype> >;"},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"/*"},
{"lineNum":"  742","line":" * OUTPUT FUNCTIONS."},
{"lineNum":"  743","line":" *"},
{"lineNum":"  744","line":" * These are the core of the PCG generation scheme.  They specify how to"},
{"lineNum":"  745","line":" * turn the base LCG\'s internal state into the output value of the final"},
{"lineNum":"  746","line":" * generator."},
{"lineNum":"  747","line":" *"},
{"lineNum":"  748","line":" * They\'re implemented as mixin classes."},
{"lineNum":"  749","line":" *"},
{"lineNum":"  750","line":" * All of the classes have code that is written to allow it to be applied"},
{"lineNum":"  751","line":" * at *arbitrary* bit sizes, although in practice they\'ll only be used at"},
{"lineNum":"  752","line":" * standard sizes supported by C++."},
{"lineNum":"  753","line":" */"},
{"lineNum":"  754","line":""},
{"lineNum":"  755","line":"/*"},
{"lineNum":"  756","line":" * XSH RS -- high xorshift, followed by a random shift"},
{"lineNum":"  757","line":" *"},
{"lineNum":"  758","line":" * Fast.  A good performer."},
{"lineNum":"  759","line":" */"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"template <typename xtype, typename itype>"},
{"lineNum":"  762","line":"struct xsh_rs_mixin {"},
{"lineNum":"  763","line":"    static xtype output(itype internal)"},
{"lineNum":"  764","line":"    {"},
{"lineNum":"  765","line":"        constexpr bitcount_t bits        = bitcount_t(sizeof(itype) * 8);"},
{"lineNum":"  766","line":"        constexpr bitcount_t xtypebits   = bitcount_t(sizeof(xtype) * 8);"},
{"lineNum":"  767","line":"        constexpr bitcount_t sparebits   = bits - xtypebits;"},
{"lineNum":"  768","line":"        constexpr bitcount_t opbits ="},
{"lineNum":"  769","line":"                              sparebits-5 >= 64 ? 5"},
{"lineNum":"  770","line":"                            : sparebits-4 >= 32 ? 4"},
{"lineNum":"  771","line":"                            : sparebits-3 >= 16 ? 3"},
{"lineNum":"  772","line":"                            : sparebits-2 >= 4  ? 2"},
{"lineNum":"  773","line":"                            : sparebits-1 >= 1  ? 1"},
{"lineNum":"  774","line":"                            :                     0;"},
{"lineNum":"  775","line":"        constexpr bitcount_t mask = (1 << opbits) - 1;"},
{"lineNum":"  776","line":"        constexpr bitcount_t maxrandshift  = mask;"},
{"lineNum":"  777","line":"        constexpr bitcount_t topspare     = opbits;"},
{"lineNum":"  778","line":"        constexpr bitcount_t bottomspare = sparebits - topspare;"},
{"lineNum":"  779","line":"        constexpr bitcount_t xshift     = topspare + (xtypebits+maxrandshift)/2;"},
{"lineNum":"  780","line":"        bitcount_t rshift ="},
{"lineNum":"  781","line":"            opbits ? bitcount_t(internal >> (bits - opbits)) & mask : 0;"},
{"lineNum":"  782","line":"        internal ^= internal >> xshift;"},
{"lineNum":"  783","line":"        xtype result = xtype(internal >> (bottomspare - maxrandshift + rshift));"},
{"lineNum":"  784","line":"        return result;"},
{"lineNum":"  785","line":"    }"},
{"lineNum":"  786","line":"};"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"/*"},
{"lineNum":"  789","line":" * XSH RR -- high xorshift, followed by a random rotate"},
{"lineNum":"  790","line":" *"},
{"lineNum":"  791","line":" * Fast.  A good performer.  Slightly better statistically than XSH RS."},
{"lineNum":"  792","line":" */"},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"template <typename xtype, typename itype>"},
{"lineNum":"  795","line":"struct xsh_rr_mixin {"},
{"lineNum":"  796","line":"    static xtype output(itype internal)"},
{"lineNum":"  797","line":"    {"},
{"lineNum":"  798","line":"        constexpr bitcount_t bits        = bitcount_t(sizeof(itype) * 8);"},
{"lineNum":"  799","line":"        constexpr bitcount_t xtypebits   = bitcount_t(sizeof(xtype)*8);"},
{"lineNum":"  800","line":"        constexpr bitcount_t sparebits   = bits - xtypebits;"},
{"lineNum":"  801","line":"        constexpr bitcount_t wantedopbits ="},
{"lineNum":"  802","line":"                              xtypebits >= 128 ? 7"},
{"lineNum":"  803","line":"                            : xtypebits >=  64 ? 6"},
{"lineNum":"  804","line":"                            : xtypebits >=  32 ? 5"},
{"lineNum":"  805","line":"                            : xtypebits >=  16 ? 4"},
{"lineNum":"  806","line":"                            :                    3;"},
{"lineNum":"  807","line":"        constexpr bitcount_t opbits ="},
{"lineNum":"  808","line":"                              sparebits >= wantedopbits ? wantedopbits"},
{"lineNum":"  809","line":"                                                        : sparebits;"},
{"lineNum":"  810","line":"        constexpr bitcount_t amplifier = wantedopbits - opbits;"},
{"lineNum":"  811","line":"        constexpr bitcount_t mask = (1 << opbits) - 1;"},
{"lineNum":"  812","line":"        constexpr bitcount_t topspare    = opbits;"},
{"lineNum":"  813","line":"        constexpr bitcount_t bottomspare = sparebits - topspare;"},
{"lineNum":"  814","line":"        constexpr bitcount_t xshift      = (topspare + xtypebits)/2;"},
{"lineNum":"  815","line":"        bitcount_t rot = opbits ? bitcount_t(internal >> (bits - opbits)) & mask"},
{"lineNum":"  816","line":"                                : 0;"},
{"lineNum":"  817","line":"        bitcount_t amprot = (rot << amplifier) & mask;"},
{"lineNum":"  818","line":"        internal ^= internal >> xshift;"},
{"lineNum":"  819","line":"        xtype result = xtype(internal >> bottomspare);"},
{"lineNum":"  820","line":"        result = rotr(result, amprot);"},
{"lineNum":"  821","line":"        return result;"},
{"lineNum":"  822","line":"    }"},
{"lineNum":"  823","line":"};"},
{"lineNum":"  824","line":""},
{"lineNum":"  825","line":"/*"},
{"lineNum":"  826","line":" * RXS -- random xorshift"},
{"lineNum":"  827","line":" */"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"template <typename xtype, typename itype>"},
{"lineNum":"  830","line":"struct rxs_mixin {"},
{"lineNum":"  831","line":"static xtype output_rxs(itype internal)"},
{"lineNum":"  832","line":"    {"},
{"lineNum":"  833","line":"        constexpr bitcount_t bits        = bitcount_t(sizeof(itype) * 8);"},
{"lineNum":"  834","line":"        constexpr bitcount_t xtypebits   = bitcount_t(sizeof(xtype)*8);"},
{"lineNum":"  835","line":"        constexpr bitcount_t shift       = bits - xtypebits;"},
{"lineNum":"  836","line":"        constexpr bitcount_t extrashift  = (xtypebits - shift)/2;"},
{"lineNum":"  837","line":"        bitcount_t rshift = shift > 64+8 ? (internal >> (bits - 6)) & 63"},
{"lineNum":"  838","line":"                       : shift > 32+4 ? (internal >> (bits - 5)) & 31"},
{"lineNum":"  839","line":"                       : shift > 16+2 ? (internal >> (bits - 4)) & 15"},
{"lineNum":"  840","line":"                       : shift >  8+1 ? (internal >> (bits - 3)) & 7"},
{"lineNum":"  841","line":"                       : shift >  4+1 ? (internal >> (bits - 2)) & 3"},
{"lineNum":"  842","line":"                       : shift >  2+1 ? (internal >> (bits - 1)) & 1"},
{"lineNum":"  843","line":"                       :              0;"},
{"lineNum":"  844","line":"        internal ^= internal >> (shift + extrashift - rshift);"},
{"lineNum":"  845","line":"        xtype result = internal >> rshift;"},
{"lineNum":"  846","line":"        return result;"},
{"lineNum":"  847","line":"    }"},
{"lineNum":"  848","line":"};"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"/*"},
{"lineNum":"  851","line":" * RXS M XS -- random xorshift, mcg multiply, fixed xorshift"},
{"lineNum":"  852","line":" *"},
{"lineNum":"  853","line":" * The most statistically powerful generator, but all those steps"},
{"lineNum":"  854","line":" * make it slower than some of the others.  We give it the rottenest jobs."},
{"lineNum":"  855","line":" *"},
{"lineNum":"  856","line":" * Because it\'s usually used in contexts where the state type and the"},
{"lineNum":"  857","line":" * result type are the same, it is a permutation and is thus invertable."},
{"lineNum":"  858","line":" * We thus provide a function to invert it.  This function is used to"},
{"lineNum":"  859","line":" * for the \"inside out\" generator used by the extended generator."},
{"lineNum":"  860","line":" */"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"/* Defined type-based concepts for the multiplication step.  They\'re actually"},
{"lineNum":"  863","line":" * all derived by truncating the 128-bit, which was computed to be a good"},
{"lineNum":"  864","line":" * \"universal\" constant."},
{"lineNum":"  865","line":" */"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"template <typename T>"},
{"lineNum":"  868","line":"struct mcg_multiplier {"},
{"lineNum":"  869","line":"    // Not defined for an arbitrary type"},
{"lineNum":"  870","line":"};"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"template <typename T>"},
{"lineNum":"  873","line":"struct mcg_unmultiplier {"},
{"lineNum":"  874","line":"    // Not defined for an arbitrary type"},
{"lineNum":"  875","line":"};"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"PCG_DEFINE_CONSTANT(uint8_t,  mcg, multiplier,   217U)"},
{"lineNum":"  878","line":"PCG_DEFINE_CONSTANT(uint8_t,  mcg, unmultiplier, 105U)"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"PCG_DEFINE_CONSTANT(uint16_t, mcg, multiplier,   62169U)"},
{"lineNum":"  881","line":"PCG_DEFINE_CONSTANT(uint16_t, mcg, unmultiplier, 28009U)"},
{"lineNum":"  882","line":""},
{"lineNum":"  883","line":"PCG_DEFINE_CONSTANT(uint32_t, mcg, multiplier,   277803737U)"},
{"lineNum":"  884","line":"PCG_DEFINE_CONSTANT(uint32_t, mcg, unmultiplier, 2897767785U)"},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":"PCG_DEFINE_CONSTANT(uint64_t, mcg, multiplier,   12605985483714917081ULL)"},
{"lineNum":"  887","line":"PCG_DEFINE_CONSTANT(uint64_t, mcg, unmultiplier, 15009553638781119849ULL)"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"PCG_DEFINE_CONSTANT(pcg128_t, mcg, multiplier,"},
{"lineNum":"  890","line":"        PCG_128BIT_CONSTANT(17766728186571221404ULL, 12605985483714917081ULL))"},
{"lineNum":"  891","line":"PCG_DEFINE_CONSTANT(pcg128_t, mcg, unmultiplier,"},
{"lineNum":"  892","line":"        PCG_128BIT_CONSTANT(14422606686972528997ULL, 15009553638781119849ULL))"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":""},
{"lineNum":"  895","line":"template <typename xtype, typename itype>"},
{"lineNum":"  896","line":"struct rxs_m_xs_mixin {"},
{"lineNum":"  897","line":"    static xtype output(itype internal)"},
{"lineNum":"  898","line":"    {"},
{"lineNum":"  899","line":"        constexpr bitcount_t xtypebits = bitcount_t(sizeof(xtype) * 8);"},
{"lineNum":"  900","line":"        constexpr bitcount_t bits = bitcount_t(sizeof(itype) * 8);"},
{"lineNum":"  901","line":"        constexpr bitcount_t opbits = xtypebits >= 128 ? 6"},
{"lineNum":"  902","line":"                                 : xtypebits >=  64 ? 5"},
{"lineNum":"  903","line":"                                 : xtypebits >=  32 ? 4"},
{"lineNum":"  904","line":"                                 : xtypebits >=  16 ? 3"},
{"lineNum":"  905","line":"                                 :                    2;"},
{"lineNum":"  906","line":"        constexpr bitcount_t shift = bits - xtypebits;"},
{"lineNum":"  907","line":"        constexpr bitcount_t mask = (1 << opbits) - 1;"},
{"lineNum":"  908","line":"        bitcount_t rshift ="},
{"lineNum":"  909","line":"            opbits ? bitcount_t(internal >> (bits - opbits)) & mask : 0;"},
{"lineNum":"  910","line":"        internal ^= internal >> (opbits + rshift);"},
{"lineNum":"  911","line":"        internal *= mcg_multiplier<itype>::multiplier();"},
{"lineNum":"  912","line":"        xtype result = internal >> shift;"},
{"lineNum":"  913","line":"        result ^= result >> ((2U*xtypebits+2U)/3U);"},
{"lineNum":"  914","line":"        return result;"},
{"lineNum":"  915","line":"    }"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"    static itype unoutput(itype internal)"},
{"lineNum":"  918","line":"    {"},
{"lineNum":"  919","line":"        constexpr bitcount_t bits = bitcount_t(sizeof(itype) * 8);"},
{"lineNum":"  920","line":"        constexpr bitcount_t opbits = bits >= 128 ? 6"},
{"lineNum":"  921","line":"                                 : bits >=  64 ? 5"},
{"lineNum":"  922","line":"                                 : bits >=  32 ? 4"},
{"lineNum":"  923","line":"                                 : bits >=  16 ? 3"},
{"lineNum":"  924","line":"                                 :               2;"},
{"lineNum":"  925","line":"        constexpr bitcount_t mask = (1 << opbits) - 1;"},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":"        internal = unxorshift(internal, bits, (2U*bits+2U)/3U);"},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"        internal *= mcg_unmultiplier<itype>::unmultiplier();"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"        bitcount_t rshift = opbits ? (internal >> (bits - opbits)) & mask : 0;"},
{"lineNum":"  932","line":"        internal = unxorshift(internal, bits, opbits + rshift);"},
{"lineNum":"  933","line":""},
{"lineNum":"  934","line":"        return internal;"},
{"lineNum":"  935","line":"    }"},
{"lineNum":"  936","line":"};"},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"/*"},
{"lineNum":"  940","line":" * RXS M -- random xorshift, mcg multiply"},
{"lineNum":"  941","line":" */"},
{"lineNum":"  942","line":""},
{"lineNum":"  943","line":"template <typename xtype, typename itype>"},
{"lineNum":"  944","line":"struct rxs_m_mixin {"},
{"lineNum":"  945","line":"    static xtype output(itype internal)"},
{"lineNum":"  946","line":"    {"},
{"lineNum":"  947","line":"        constexpr bitcount_t xtypebits = bitcount_t(sizeof(xtype) * 8);"},
{"lineNum":"  948","line":"        constexpr bitcount_t bits = bitcount_t(sizeof(itype) * 8);"},
{"lineNum":"  949","line":"        constexpr bitcount_t opbits = xtypebits >= 128 ? 6"},
{"lineNum":"  950","line":"                                 : xtypebits >=  64 ? 5"},
{"lineNum":"  951","line":"                                 : xtypebits >=  32 ? 4"},
{"lineNum":"  952","line":"                                 : xtypebits >=  16 ? 3"},
{"lineNum":"  953","line":"                                 :                    2;"},
{"lineNum":"  954","line":"        constexpr bitcount_t shift = bits - xtypebits;"},
{"lineNum":"  955","line":"        constexpr bitcount_t mask = (1 << opbits) - 1;"},
{"lineNum":"  956","line":"        bitcount_t rshift = opbits ? (internal >> (bits - opbits)) & mask : 0;"},
{"lineNum":"  957","line":"        internal ^= internal >> (opbits + rshift);"},
{"lineNum":"  958","line":"        internal *= mcg_multiplier<itype>::multiplier();"},
{"lineNum":"  959","line":"        xtype result = internal >> shift;"},
{"lineNum":"  960","line":"        return result;"},
{"lineNum":"  961","line":"    }"},
{"lineNum":"  962","line":"};"},
{"lineNum":"  963","line":""},
{"lineNum":"  964","line":"/*"},
{"lineNum":"  965","line":" * XSL RR -- fixed xorshift (to low bits), random rotate"},
{"lineNum":"  966","line":" *"},
{"lineNum":"  967","line":" * Useful for 128-bit types that are split across two CPU registers."},
{"lineNum":"  968","line":" */"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"template <typename xtype, typename itype>"},
{"lineNum":"  971","line":"struct xsl_rr_mixin {"},
{"lineNum":"  972","line":"    static xtype output(itype internal)"},
{"lineNum":"  973","line":"    {"},
{"lineNum":"  974","line":"        constexpr bitcount_t xtypebits = bitcount_t(sizeof(xtype) * 8);"},
{"lineNum":"  975","line":"        constexpr bitcount_t bits = bitcount_t(sizeof(itype) * 8);"},
{"lineNum":"  976","line":"        constexpr bitcount_t sparebits = bits - xtypebits;"},
{"lineNum":"  977","line":"        constexpr bitcount_t wantedopbits = xtypebits >= 128 ? 7"},
{"lineNum":"  978","line":"                                       : xtypebits >=  64 ? 6"},
{"lineNum":"  979","line":"                                       : xtypebits >=  32 ? 5"},
{"lineNum":"  980","line":"                                       : xtypebits >=  16 ? 4"},
{"lineNum":"  981","line":"                                       :                    3;"},
{"lineNum":"  982","line":"        constexpr bitcount_t opbits = sparebits >= wantedopbits ? wantedopbits"},
{"lineNum":"  983","line":"                                                             : sparebits;"},
{"lineNum":"  984","line":"        constexpr bitcount_t amplifier = wantedopbits - opbits;"},
{"lineNum":"  985","line":"        constexpr bitcount_t mask = (1 << opbits) - 1;"},
{"lineNum":"  986","line":"        constexpr bitcount_t topspare = sparebits;"},
{"lineNum":"  987","line":"        constexpr bitcount_t bottomspare = sparebits - topspare;"},
{"lineNum":"  988","line":"        constexpr bitcount_t xshift = (topspare + xtypebits) / 2;"},
{"lineNum":"  989","line":""},
{"lineNum":"  990","line":"        bitcount_t rot ="},
{"lineNum":"  991","line":"            opbits ? bitcount_t(internal >> (bits - opbits)) & mask : 0;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  992","line":"        bitcount_t amprot = (rot << amplifier) & mask;"},
{"lineNum":"  993","line":"        internal ^= internal >> xshift;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  994","line":"        xtype result = xtype(internal >> bottomspare);"},
{"lineNum":"  995","line":"        result = rotr(result, amprot);"},
{"lineNum":"  996","line":"        return result;"},
{"lineNum":"  997","line":"    }"},
{"lineNum":"  998","line":"};"},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":""},
{"lineNum":" 1001","line":"/*"},
{"lineNum":" 1002","line":" * XSL RR RR -- fixed xorshift (to low bits), random rotate (both parts)"},
{"lineNum":" 1003","line":" *"},
{"lineNum":" 1004","line":" * Useful for 128-bit types that are split across two CPU registers."},
{"lineNum":" 1005","line":" * If you really want an invertable 128-bit RNG, I guess this is the one."},
{"lineNum":" 1006","line":" */"},
{"lineNum":" 1007","line":""},
{"lineNum":" 1008","line":"template <typename T> struct halfsize_trait {};"},
{"lineNum":" 1009","line":"template <> struct halfsize_trait<pcg128_t>  { typedef uint64_t type; };"},
{"lineNum":" 1010","line":"template <> struct halfsize_trait<uint64_t>  { typedef uint32_t type; };"},
{"lineNum":" 1011","line":"template <> struct halfsize_trait<uint32_t>  { typedef uint16_t type; };"},
{"lineNum":" 1012","line":"template <> struct halfsize_trait<uint16_t>  { typedef uint8_t type;  };"},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"template <typename xtype, typename itype>"},
{"lineNum":" 1015","line":"struct xsl_rr_rr_mixin {"},
{"lineNum":" 1016","line":"    typedef typename halfsize_trait<itype>::type htype;"},
{"lineNum":" 1017","line":""},
{"lineNum":" 1018","line":"    static itype output(itype internal)"},
{"lineNum":" 1019","line":"    {"},
{"lineNum":" 1020","line":"        constexpr bitcount_t htypebits = bitcount_t(sizeof(htype) * 8);"},
{"lineNum":" 1021","line":"        constexpr bitcount_t bits      = bitcount_t(sizeof(itype) * 8);"},
{"lineNum":" 1022","line":"        constexpr bitcount_t sparebits = bits - htypebits;"},
{"lineNum":" 1023","line":"        constexpr bitcount_t wantedopbits = htypebits >= 128 ? 7"},
{"lineNum":" 1024","line":"                                       : htypebits >=  64 ? 6"},
{"lineNum":" 1025","line":"                                       : htypebits >=  32 ? 5"},
{"lineNum":" 1026","line":"                                       : htypebits >=  16 ? 4"},
{"lineNum":" 1027","line":"                                       :                    3;"},
{"lineNum":" 1028","line":"        constexpr bitcount_t opbits = sparebits >= wantedopbits ? wantedopbits"},
{"lineNum":" 1029","line":"                                                                : sparebits;"},
{"lineNum":" 1030","line":"        constexpr bitcount_t amplifier = wantedopbits - opbits;"},
{"lineNum":" 1031","line":"        constexpr bitcount_t mask = (1 << opbits) - 1;"},
{"lineNum":" 1032","line":"        constexpr bitcount_t topspare = sparebits;"},
{"lineNum":" 1033","line":"        constexpr bitcount_t xshift = (topspare + htypebits) / 2;"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"        bitcount_t rot ="},
{"lineNum":" 1036","line":"            opbits ? bitcount_t(internal >> (bits - opbits)) & mask : 0;"},
{"lineNum":" 1037","line":"        bitcount_t amprot = (rot << amplifier) & mask;"},
{"lineNum":" 1038","line":"        internal ^= internal >> xshift;"},
{"lineNum":" 1039","line":"        htype lowbits = htype(internal);"},
{"lineNum":" 1040","line":"        lowbits = rotr(lowbits, amprot);"},
{"lineNum":" 1041","line":"        htype highbits = htype(internal >> topspare);"},
{"lineNum":" 1042","line":"        bitcount_t rot2 = lowbits & mask;"},
{"lineNum":" 1043","line":"        bitcount_t amprot2 = (rot2 << amplifier) & mask;"},
{"lineNum":" 1044","line":"        highbits = rotr(highbits, amprot2);"},
{"lineNum":" 1045","line":"        return (itype(highbits) << topspare) ^ itype(lowbits);"},
{"lineNum":" 1046","line":"    }"},
{"lineNum":" 1047","line":"};"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":""},
{"lineNum":" 1050","line":"/*"},
{"lineNum":" 1051","line":" * XSH -- fixed xorshift (to high bits)"},
{"lineNum":" 1052","line":" *"},
{"lineNum":" 1053","line":" * You shouldn\'t use this at 64-bits or less."},
{"lineNum":" 1054","line":" */"},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"template <typename xtype, typename itype>"},
{"lineNum":" 1057","line":"struct xsh_mixin {"},
{"lineNum":" 1058","line":"    static xtype output(itype internal)"},
{"lineNum":" 1059","line":"    {"},
{"lineNum":" 1060","line":"        constexpr bitcount_t xtypebits = bitcount_t(sizeof(xtype) * 8);"},
{"lineNum":" 1061","line":"        constexpr bitcount_t bits = bitcount_t(sizeof(itype) * 8);"},
{"lineNum":" 1062","line":"        constexpr bitcount_t sparebits = bits - xtypebits;"},
{"lineNum":" 1063","line":"        constexpr bitcount_t topspare = 0;"},
{"lineNum":" 1064","line":"        constexpr bitcount_t bottomspare = sparebits - topspare;"},
{"lineNum":" 1065","line":"        constexpr bitcount_t xshift = (topspare + xtypebits) / 2;"},
{"lineNum":" 1066","line":""},
{"lineNum":" 1067","line":"        internal ^= internal >> xshift;"},
{"lineNum":" 1068","line":"        xtype result = internal >> bottomspare;"},
{"lineNum":" 1069","line":"        return result;"},
{"lineNum":" 1070","line":"    }"},
{"lineNum":" 1071","line":"};"},
{"lineNum":" 1072","line":""},
{"lineNum":" 1073","line":"/*"},
{"lineNum":" 1074","line":" * XSL -- fixed xorshift (to low bits)"},
{"lineNum":" 1075","line":" *"},
{"lineNum":" 1076","line":" * You shouldn\'t use this at 64-bits or less."},
{"lineNum":" 1077","line":" */"},
{"lineNum":" 1078","line":""},
{"lineNum":" 1079","line":"template <typename xtype, typename itype>"},
{"lineNum":" 1080","line":"struct xsl_mixin {"},
{"lineNum":" 1081","line":"    inline xtype output(itype internal)"},
{"lineNum":" 1082","line":"    {"},
{"lineNum":" 1083","line":"        constexpr bitcount_t xtypebits = bitcount_t(sizeof(xtype) * 8);"},
{"lineNum":" 1084","line":"        constexpr bitcount_t bits = bitcount_t(sizeof(itype) * 8);"},
{"lineNum":" 1085","line":"        constexpr bitcount_t sparebits = bits - xtypebits;"},
{"lineNum":" 1086","line":"        constexpr bitcount_t topspare = sparebits;"},
{"lineNum":" 1087","line":"        constexpr bitcount_t bottomspare = sparebits - topspare;"},
{"lineNum":" 1088","line":"        constexpr bitcount_t xshift = (topspare + xtypebits) / 2;"},
{"lineNum":" 1089","line":""},
{"lineNum":" 1090","line":"        internal ^= internal >> xshift;"},
{"lineNum":" 1091","line":"        xtype result = internal >> bottomspare;"},
{"lineNum":" 1092","line":"        return result;"},
{"lineNum":" 1093","line":"    }"},
{"lineNum":" 1094","line":"};"},
{"lineNum":" 1095","line":""},
{"lineNum":" 1096","line":"/* ---- End of Output Functions ---- */"},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"template <typename baseclass>"},
{"lineNum":" 1100","line":"struct inside_out : private baseclass {"},
{"lineNum":" 1101","line":"    inside_out() = delete;"},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":"    typedef typename baseclass::result_type result_type;"},
{"lineNum":" 1104","line":"    typedef typename baseclass::state_type  state_type;"},
{"lineNum":" 1105","line":"    static_assert(sizeof(result_type) == sizeof(state_type),"},
{"lineNum":" 1106","line":"                  \"Require a RNG whose output function is a permutation\");"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"    static bool external_step(result_type& randval, size_t i)"},
{"lineNum":" 1109","line":"    {"},
{"lineNum":" 1110","line":"        state_type state = baseclass::unoutput(randval);"},
{"lineNum":" 1111","line":"        state = state * baseclass::multiplier() + baseclass::increment()"},
{"lineNum":" 1112","line":"                + state_type(i*2);"},
{"lineNum":" 1113","line":"        result_type result = baseclass::output(state);"},
{"lineNum":" 1114","line":"        randval = result;"},
{"lineNum":" 1115","line":"        state_type zero ="},
{"lineNum":" 1116","line":"            baseclass::is_mcg ? state & state_type(3U) : state_type(0U);"},
{"lineNum":" 1117","line":"        return result == zero;"},
{"lineNum":" 1118","line":"    }"},
{"lineNum":" 1119","line":""},
{"lineNum":" 1120","line":"    static bool external_advance(result_type& randval, size_t i,"},
{"lineNum":" 1121","line":"                                 result_type delta, bool forwards = true)"},
{"lineNum":" 1122","line":"    {"},
{"lineNum":" 1123","line":"        state_type state = baseclass::unoutput(randval);"},
{"lineNum":" 1124","line":"        state_type mult  = baseclass::multiplier();"},
{"lineNum":" 1125","line":"        state_type inc   = baseclass::increment() + state_type(i*2);"},
{"lineNum":" 1126","line":"        state_type zero ="},
{"lineNum":" 1127","line":"            baseclass::is_mcg ? state & state_type(3U) : state_type(0U);"},
{"lineNum":" 1128","line":"        state_type dist_to_zero = baseclass::distance(state, zero, mult, inc);"},
{"lineNum":" 1129","line":"        bool crosses_zero ="},
{"lineNum":" 1130","line":"            forwards ? dist_to_zero <= delta"},
{"lineNum":" 1131","line":"                     : (-dist_to_zero) <= delta;"},
{"lineNum":" 1132","line":"        if (!forwards)"},
{"lineNum":" 1133","line":"            delta = -delta;"},
{"lineNum":" 1134","line":"        state = baseclass::advance(state, delta, mult, inc);"},
{"lineNum":" 1135","line":"        randval = baseclass::output(state);"},
{"lineNum":" 1136","line":"        return crosses_zero;"},
{"lineNum":" 1137","line":"    }"},
{"lineNum":" 1138","line":"};"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":""},
{"lineNum":" 1141","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2, typename baseclass, typename extvalclass, bool kdd = true>"},
{"lineNum":" 1142","line":"class extended : public baseclass {"},
{"lineNum":" 1143","line":"public:"},
{"lineNum":" 1144","line":"    typedef typename baseclass::state_type  state_type;"},
{"lineNum":" 1145","line":"    typedef typename baseclass::result_type result_type;"},
{"lineNum":" 1146","line":"    typedef inside_out<extvalclass> insideout;"},
{"lineNum":" 1147","line":""},
{"lineNum":" 1148","line":"private:"},
{"lineNum":" 1149","line":"    static constexpr bitcount_t rtypebits = sizeof(result_type)*8;"},
{"lineNum":" 1150","line":"    static constexpr bitcount_t stypebits = sizeof(state_type)*8;"},
{"lineNum":" 1151","line":""},
{"lineNum":" 1152","line":"    static constexpr bitcount_t tick_limit_pow2 = 64U;"},
{"lineNum":" 1153","line":""},
{"lineNum":" 1154","line":"    static constexpr size_t table_size  = 1UL << table_pow2;"},
{"lineNum":" 1155","line":"    static constexpr size_t table_shift = stypebits - table_pow2;"},
{"lineNum":" 1156","line":"    static constexpr state_type table_mask ="},
{"lineNum":" 1157","line":"        (state_type(1U) << table_pow2) - state_type(1U);"},
{"lineNum":" 1158","line":""},
{"lineNum":" 1159","line":"    static constexpr bool   may_tick  ="},
{"lineNum":" 1160","line":"        (advance_pow2 < stypebits) && (advance_pow2 < tick_limit_pow2);"},
{"lineNum":" 1161","line":"    static constexpr size_t tick_shift = stypebits - advance_pow2;"},
{"lineNum":" 1162","line":"    static constexpr state_type tick_mask  ="},
{"lineNum":" 1163","line":"        may_tick ? state_type("},
{"lineNum":" 1164","line":"                       (uint64_t(1) << (advance_pow2*may_tick)) - 1)"},
{"lineNum":" 1165","line":"                                        // ^-- stupidity to appease GCC warnings"},
{"lineNum":" 1166","line":"                 : ~state_type(0U);"},
{"lineNum":" 1167","line":""},
{"lineNum":" 1168","line":"    static constexpr bool may_tock = stypebits < tick_limit_pow2;"},
{"lineNum":" 1169","line":""},
{"lineNum":" 1170","line":"    result_type data_[table_size];"},
{"lineNum":" 1171","line":""},
{"lineNum":" 1172","line":"    PCG_NOINLINE void advance_table();"},
{"lineNum":" 1173","line":""},
{"lineNum":" 1174","line":"    PCG_NOINLINE void advance_table(state_type delta, bool isForwards = true);"},
{"lineNum":" 1175","line":""},
{"lineNum":" 1176","line":"    result_type& get_extended_value()"},
{"lineNum":" 1177","line":"    {"},
{"lineNum":" 1178","line":"        state_type state = this->state_;"},
{"lineNum":" 1179","line":"        if (kdd && baseclass::is_mcg) {"},
{"lineNum":" 1180","line":"            // The low order bits of an MCG are constant, so drop them."},
{"lineNum":" 1181","line":"            state >>= 2;"},
{"lineNum":" 1182","line":"        }"},
{"lineNum":" 1183","line":"        size_t index       = kdd ? state &  table_mask"},
{"lineNum":" 1184","line":"                                 : state >> table_shift;"},
{"lineNum":" 1185","line":""},
{"lineNum":" 1186","line":"        if (may_tick) {"},
{"lineNum":" 1187","line":"            bool tick = kdd ? (state & tick_mask) == state_type(0u)"},
{"lineNum":" 1188","line":"                            : (state >> tick_shift) == state_type(0u);"},
{"lineNum":" 1189","line":"            if (tick)"},
{"lineNum":" 1190","line":"                    advance_table();"},
{"lineNum":" 1191","line":"        }"},
{"lineNum":" 1192","line":"        if (may_tock) {"},
{"lineNum":" 1193","line":"            bool tock = state == state_type(0u);"},
{"lineNum":" 1194","line":"            if (tock)"},
{"lineNum":" 1195","line":"                advance_table();"},
{"lineNum":" 1196","line":"        }"},
{"lineNum":" 1197","line":"        return data_[index];"},
{"lineNum":" 1198","line":"    }"},
{"lineNum":" 1199","line":""},
{"lineNum":" 1200","line":"public:"},
{"lineNum":" 1201","line":"    static constexpr size_t period_pow2()"},
{"lineNum":" 1202","line":"    {"},
{"lineNum":" 1203","line":"        return baseclass::period_pow2() + table_size*extvalclass::period_pow2();"},
{"lineNum":" 1204","line":"    }"},
{"lineNum":" 1205","line":""},
{"lineNum":" 1206","line":"    __attribute__((always_inline)) result_type operator()()"},
{"lineNum":" 1207","line":"    {"},
{"lineNum":" 1208","line":"        result_type rhs = get_extended_value();"},
{"lineNum":" 1209","line":"        result_type lhs = this->baseclass::operator()();"},
{"lineNum":" 1210","line":"        return lhs ^ rhs;"},
{"lineNum":" 1211","line":"    }"},
{"lineNum":" 1212","line":""},
{"lineNum":" 1213","line":"    result_type operator()(result_type upper_bound)"},
{"lineNum":" 1214","line":"    {"},
{"lineNum":" 1215","line":"        return bounded_rand(*this, upper_bound);"},
{"lineNum":" 1216","line":"    }"},
{"lineNum":" 1217","line":""},
{"lineNum":" 1218","line":"    void set(result_type wanted)"},
{"lineNum":" 1219","line":"    {"},
{"lineNum":" 1220","line":"        result_type& rhs = get_extended_value();"},
{"lineNum":" 1221","line":"        result_type lhs = this->baseclass::operator()();"},
{"lineNum":" 1222","line":"        rhs = lhs ^ wanted;"},
{"lineNum":" 1223","line":"    }"},
{"lineNum":" 1224","line":""},
{"lineNum":" 1225","line":"    void advance(state_type distance, bool forwards = true);"},
{"lineNum":" 1226","line":""},
{"lineNum":" 1227","line":"    void backstep(state_type distance)"},
{"lineNum":" 1228","line":"    {"},
{"lineNum":" 1229","line":"        advance(distance, false);"},
{"lineNum":" 1230","line":"    }"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"    extended(const result_type* data)"},
{"lineNum":" 1233","line":"        : baseclass()"},
{"lineNum":" 1234","line":"    {"},
{"lineNum":" 1235","line":"        datainit(data);"},
{"lineNum":" 1236","line":"    }"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"    extended(const result_type* data, state_type seed)"},
{"lineNum":" 1239","line":"        : baseclass(seed)"},
{"lineNum":" 1240","line":"    {"},
{"lineNum":" 1241","line":"        datainit(data);"},
{"lineNum":" 1242","line":"    }"},
{"lineNum":" 1243","line":""},
{"lineNum":" 1244","line":"    // This function may or may not exist.  It thus has to be a template"},
{"lineNum":" 1245","line":"    // to use SFINAE; users don\'t have to worry about its template-ness."},
{"lineNum":" 1246","line":""},
{"lineNum":" 1247","line":"    template <typename bc = baseclass>"},
{"lineNum":" 1248","line":"    extended(const result_type* data, state_type seed,"},
{"lineNum":" 1249","line":"            typename bc::stream_state stream_seed)"},
{"lineNum":" 1250","line":"        : baseclass(seed, stream_seed)"},
{"lineNum":" 1251","line":"    {"},
{"lineNum":" 1252","line":"        datainit(data);"},
{"lineNum":" 1253","line":"    }"},
{"lineNum":" 1254","line":""},
{"lineNum":" 1255","line":"    extended()"},
{"lineNum":" 1256","line":"        : baseclass()"},
{"lineNum":" 1257","line":"    {"},
{"lineNum":" 1258","line":"        selfinit();"},
{"lineNum":" 1259","line":"    }"},
{"lineNum":" 1260","line":""},
{"lineNum":" 1261","line":"    extended(state_type seed)"},
{"lineNum":" 1262","line":"        : baseclass(seed)"},
{"lineNum":" 1263","line":"    {"},
{"lineNum":" 1264","line":"        selfinit();"},
{"lineNum":" 1265","line":"    }"},
{"lineNum":" 1266","line":""},
{"lineNum":" 1267","line":"    // This function may or may not exist.  It thus has to be a template"},
{"lineNum":" 1268","line":"    // to use SFINAE; users don\'t have to worry about its template-ness."},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"    template <typename bc = baseclass>"},
{"lineNum":" 1271","line":"    extended(state_type seed, typename bc::stream_state stream_seed)"},
{"lineNum":" 1272","line":"        : baseclass(seed, stream_seed)"},
{"lineNum":" 1273","line":"    {"},
{"lineNum":" 1274","line":"        selfinit();"},
{"lineNum":" 1275","line":"    }"},
{"lineNum":" 1276","line":""},
{"lineNum":" 1277","line":"private:"},
{"lineNum":" 1278","line":"    void selfinit();"},
{"lineNum":" 1279","line":"    void datainit(const result_type* data);"},
{"lineNum":" 1280","line":""},
{"lineNum":" 1281","line":"public:"},
{"lineNum":" 1282","line":""},
{"lineNum":" 1283","line":"    template<typename SeedSeq, typename = typename std::enable_if<"},
{"lineNum":" 1284","line":"           !std::is_convertible<SeedSeq, result_type>::value"},
{"lineNum":" 1285","line":"        && !std::is_convertible<SeedSeq, extended>::value>::type>"},
{"lineNum":" 1286","line":"    extended(SeedSeq&& seedSeq)"},
{"lineNum":" 1287","line":"        : baseclass(seedSeq)"},
{"lineNum":" 1288","line":"    {"},
{"lineNum":" 1289","line":"        generate_to<table_size>(seedSeq, data_);"},
{"lineNum":" 1290","line":"    }"},
{"lineNum":" 1291","line":""},
{"lineNum":" 1292","line":"    template<typename... Args>"},
{"lineNum":" 1293","line":"    void seed(Args&&... args)"},
{"lineNum":" 1294","line":"    {"},
{"lineNum":" 1295","line":"        new (this) extended(std::forward<Args>(args)...);"},
{"lineNum":" 1296","line":"    }"},
{"lineNum":" 1297","line":""},
{"lineNum":" 1298","line":"    template <bitcount_t table_pow2_, bitcount_t advance_pow2_,"},
{"lineNum":" 1299","line":"              typename baseclass_, typename extvalclass_, bool kdd_>"},
{"lineNum":" 1300","line":"    friend bool operator==(const extended<table_pow2_, advance_pow2_,"},
{"lineNum":" 1301","line":"                                              baseclass_, extvalclass_, kdd_>&,"},
{"lineNum":" 1302","line":"                           const extended<table_pow2_, advance_pow2_,"},
{"lineNum":" 1303","line":"                                              baseclass_, extvalclass_, kdd_>&);"},
{"lineNum":" 1304","line":""},
{"lineNum":" 1305","line":"    template <typename CharT, typename Traits,"},
{"lineNum":" 1306","line":"              bitcount_t table_pow2_, bitcount_t advance_pow2_,"},
{"lineNum":" 1307","line":"              typename baseclass_, typename extvalclass_, bool kdd_>"},
{"lineNum":" 1308","line":"    friend std::basic_ostream<CharT,Traits>&"},
{"lineNum":" 1309","line":"    operator<<(std::basic_ostream<CharT,Traits>& out,"},
{"lineNum":" 1310","line":"               const extended<table_pow2_, advance_pow2_,"},
{"lineNum":" 1311","line":"                              baseclass_, extvalclass_, kdd_>&);"},
{"lineNum":" 1312","line":""},
{"lineNum":" 1313","line":"    template <typename CharT, typename Traits,"},
{"lineNum":" 1314","line":"              bitcount_t table_pow2_, bitcount_t advance_pow2_,"},
{"lineNum":" 1315","line":"              typename baseclass_, typename extvalclass_, bool kdd_>"},
{"lineNum":" 1316","line":"    friend std::basic_istream<CharT,Traits>&"},
{"lineNum":" 1317","line":"    operator>>(std::basic_istream<CharT,Traits>& in,"},
{"lineNum":" 1318","line":"               extended<table_pow2_, advance_pow2_,"},
{"lineNum":" 1319","line":"                        baseclass_, extvalclass_, kdd_>&);"},
{"lineNum":" 1320","line":""},
{"lineNum":" 1321","line":"};"},
{"lineNum":" 1322","line":""},
{"lineNum":" 1323","line":""},
{"lineNum":" 1324","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2,"},
{"lineNum":" 1325","line":"          typename baseclass, typename extvalclass, bool kdd>"},
{"lineNum":" 1326","line":"void extended<table_pow2,advance_pow2,baseclass,extvalclass,kdd>::datainit("},
{"lineNum":" 1327","line":"         const result_type* data)"},
{"lineNum":" 1328","line":"{"},
{"lineNum":" 1329","line":"    for (size_t i = 0; i < table_size; ++i)"},
{"lineNum":" 1330","line":"        data_[i] = data[i];"},
{"lineNum":" 1331","line":"}"},
{"lineNum":" 1332","line":""},
{"lineNum":" 1333","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2,"},
{"lineNum":" 1334","line":"          typename baseclass, typename extvalclass, bool kdd>"},
{"lineNum":" 1335","line":"void extended<table_pow2,advance_pow2,baseclass,extvalclass,kdd>::selfinit()"},
{"lineNum":" 1336","line":"{"},
{"lineNum":" 1337","line":"    // We need to fill the extended table with something, and we have"},
{"lineNum":" 1338","line":"    // very little provided data, so we use the base generator to"},
{"lineNum":" 1339","line":"    // produce values.  Although not ideal (use a seed sequence, folks!),"},
{"lineNum":" 1340","line":"    // unexpected correlations are mitigated by"},
{"lineNum":" 1341","line":"    //      - using XOR differences rather than the number directly"},
{"lineNum":" 1342","line":"    //      - the way the table is accessed, its values *won\'t* be accessed"},
{"lineNum":" 1343","line":"    //        in the same order the were written."},
{"lineNum":" 1344","line":"    //      - any strange correlations would only be apparent if we"},
{"lineNum":" 1345","line":"    //        were to backstep the generator so that the base generator"},
{"lineNum":" 1346","line":"    //        was generating the same values again"},
{"lineNum":" 1347","line":"    result_type xdiff = baseclass::operator()() - baseclass::operator()();"},
{"lineNum":" 1348","line":"    for (size_t i = 0; i < table_size; ++i) {"},
{"lineNum":" 1349","line":"        data_[i] = baseclass::operator()() ^ xdiff;"},
{"lineNum":" 1350","line":"    }"},
{"lineNum":" 1351","line":"}"},
{"lineNum":" 1352","line":""},
{"lineNum":" 1353","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2,"},
{"lineNum":" 1354","line":"          typename baseclass, typename extvalclass, bool kdd>"},
{"lineNum":" 1355","line":"bool operator==(const extended<table_pow2, advance_pow2,"},
{"lineNum":" 1356","line":"                               baseclass, extvalclass, kdd>& lhs,"},
{"lineNum":" 1357","line":"                const extended<table_pow2, advance_pow2,"},
{"lineNum":" 1358","line":"                               baseclass, extvalclass, kdd>& rhs)"},
{"lineNum":" 1359","line":"{"},
{"lineNum":" 1360","line":"    auto& base_lhs = static_cast<const baseclass&>(lhs);"},
{"lineNum":" 1361","line":"    auto& base_rhs = static_cast<const baseclass&>(rhs);"},
{"lineNum":" 1362","line":"    return base_lhs == base_rhs"},
{"lineNum":" 1363","line":"        && !memcmp((void*) lhs.data_, (void*) rhs.data_, sizeof(lhs.data_));"},
{"lineNum":" 1364","line":"}"},
{"lineNum":" 1365","line":""},
{"lineNum":" 1366","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2,"},
{"lineNum":" 1367","line":"          typename baseclass, typename extvalclass, bool kdd>"},
{"lineNum":" 1368","line":"inline bool operator!=(const extended<table_pow2, advance_pow2,"},
{"lineNum":" 1369","line":"                                      baseclass, extvalclass, kdd>& lhs,"},
{"lineNum":" 1370","line":"                       const extended<table_pow2, advance_pow2,"},
{"lineNum":" 1371","line":"                                      baseclass, extvalclass, kdd>& rhs)"},
{"lineNum":" 1372","line":"{"},
{"lineNum":" 1373","line":"    return lhs != rhs;"},
{"lineNum":" 1374","line":"}"},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"template <typename CharT, typename Traits,"},
{"lineNum":" 1377","line":"          bitcount_t table_pow2, bitcount_t advance_pow2,"},
{"lineNum":" 1378","line":"          typename baseclass, typename extvalclass, bool kdd>"},
{"lineNum":" 1379","line":"std::basic_ostream<CharT,Traits>&"},
{"lineNum":" 1380","line":"operator<<(std::basic_ostream<CharT,Traits>& out,"},
{"lineNum":" 1381","line":"           const extended<table_pow2, advance_pow2,"},
{"lineNum":" 1382","line":"                          baseclass, extvalclass, kdd>& rng)"},
{"lineNum":" 1383","line":"{"},
{"lineNum":" 1384","line":"    auto orig_flags = out.flags(std::ios_base::dec | std::ios_base::left);"},
{"lineNum":" 1385","line":"    auto space = out.widen(\' \');"},
{"lineNum":" 1386","line":"    auto orig_fill = out.fill();"},
{"lineNum":" 1387","line":""},
{"lineNum":" 1388","line":"    out << rng.multiplier() << space"},
{"lineNum":" 1389","line":"        << rng.increment() << space"},
{"lineNum":" 1390","line":"        << rng.state_;"},
{"lineNum":" 1391","line":""},
{"lineNum":" 1392","line":"    for (const auto& datum : rng.data_)"},
{"lineNum":" 1393","line":"        out << space << datum;"},
{"lineNum":" 1394","line":""},
{"lineNum":" 1395","line":"    out.flags(orig_flags);"},
{"lineNum":" 1396","line":"    out.fill(orig_fill);"},
{"lineNum":" 1397","line":"    return out;"},
{"lineNum":" 1398","line":"}"},
{"lineNum":" 1399","line":""},
{"lineNum":" 1400","line":"template <typename CharT, typename Traits,"},
{"lineNum":" 1401","line":"          bitcount_t table_pow2, bitcount_t advance_pow2,"},
{"lineNum":" 1402","line":"          typename baseclass, typename extvalclass, bool kdd>"},
{"lineNum":" 1403","line":"std::basic_istream<CharT,Traits>&"},
{"lineNum":" 1404","line":"operator>>(std::basic_istream<CharT,Traits>& in,"},
{"lineNum":" 1405","line":"           extended<table_pow2, advance_pow2,"},
{"lineNum":" 1406","line":"                    baseclass, extvalclass, kdd>& rng)"},
{"lineNum":" 1407","line":"{"},
{"lineNum":" 1408","line":"    extended<table_pow2, advance_pow2, baseclass, extvalclass> new_rng;"},
{"lineNum":" 1409","line":"    auto& base_rng = static_cast<baseclass&>(new_rng);"},
{"lineNum":" 1410","line":"    in >> base_rng;"},
{"lineNum":" 1411","line":""},
{"lineNum":" 1412","line":"    if (in.fail())"},
{"lineNum":" 1413","line":"        return in;"},
{"lineNum":" 1414","line":""},
{"lineNum":" 1415","line":"    auto orig_flags = in.flags(std::ios_base::dec | std::ios_base::skipws);"},
{"lineNum":" 1416","line":""},
{"lineNum":" 1417","line":"    for (auto& datum : new_rng.data_) {"},
{"lineNum":" 1418","line":"        in >> datum;"},
{"lineNum":" 1419","line":"        if (in.fail())"},
{"lineNum":" 1420","line":"            goto bail;"},
{"lineNum":" 1421","line":"    }"},
{"lineNum":" 1422","line":""},
{"lineNum":" 1423","line":"    rng = new_rng;"},
{"lineNum":" 1424","line":""},
{"lineNum":" 1425","line":"bail:"},
{"lineNum":" 1426","line":"    in.flags(orig_flags);"},
{"lineNum":" 1427","line":"    return in;"},
{"lineNum":" 1428","line":"}"},
{"lineNum":" 1429","line":""},
{"lineNum":" 1430","line":""},
{"lineNum":" 1431","line":""},
{"lineNum":" 1432","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2,"},
{"lineNum":" 1433","line":"          typename baseclass, typename extvalclass, bool kdd>"},
{"lineNum":" 1434","line":"void"},
{"lineNum":" 1435","line":"extended<table_pow2,advance_pow2,baseclass,extvalclass,kdd>::advance_table()"},
{"lineNum":" 1436","line":"{"},
{"lineNum":" 1437","line":"    bool carry = false;"},
{"lineNum":" 1438","line":"    for (size_t i = 0; i < table_size; ++i) {"},
{"lineNum":" 1439","line":"        if (carry) {"},
{"lineNum":" 1440","line":"            carry = insideout::external_step(data_[i],i+1);"},
{"lineNum":" 1441","line":"        }"},
{"lineNum":" 1442","line":"        bool carry2 = insideout::external_step(data_[i],i+1);"},
{"lineNum":" 1443","line":"        carry = carry || carry2;"},
{"lineNum":" 1444","line":"    }"},
{"lineNum":" 1445","line":"}"},
{"lineNum":" 1446","line":""},
{"lineNum":" 1447","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2,"},
{"lineNum":" 1448","line":"          typename baseclass, typename extvalclass, bool kdd>"},
{"lineNum":" 1449","line":"void"},
{"lineNum":" 1450","line":"extended<table_pow2,advance_pow2,baseclass,extvalclass,kdd>::advance_table("},
{"lineNum":" 1451","line":"        state_type delta, bool isForwards)"},
{"lineNum":" 1452","line":"{"},
{"lineNum":" 1453","line":"    typedef typename baseclass::state_type   base_state_t;"},
{"lineNum":" 1454","line":"    typedef typename extvalclass::state_type ext_state_t;"},
{"lineNum":" 1455","line":"    constexpr bitcount_t basebits = sizeof(base_state_t)*8;"},
{"lineNum":" 1456","line":"    constexpr bitcount_t extbits  = sizeof(ext_state_t)*8;"},
{"lineNum":" 1457","line":"    static_assert(basebits <= extbits || advance_pow2 > 0,"},
{"lineNum":" 1458","line":"                  \"Current implementation might overflow its carry\");"},
{"lineNum":" 1459","line":""},
{"lineNum":" 1460","line":"    base_state_t carry = 0;"},
{"lineNum":" 1461","line":"    for (size_t i = 0; i < table_size; ++i) {"},
{"lineNum":" 1462","line":"        base_state_t total_delta = carry + delta;"},
{"lineNum":" 1463","line":"        ext_state_t  trunc_delta = ext_state_t(total_delta);"},
{"lineNum":" 1464","line":"        if (basebits > extbits) {"},
{"lineNum":" 1465","line":"            carry = total_delta >> extbits;"},
{"lineNum":" 1466","line":"        } else {"},
{"lineNum":" 1467","line":"            carry = 0;"},
{"lineNum":" 1468","line":"        }"},
{"lineNum":" 1469","line":"        carry +="},
{"lineNum":" 1470","line":"            insideout::external_advance(data_[i],i+1, trunc_delta, isForwards);"},
{"lineNum":" 1471","line":"    }"},
{"lineNum":" 1472","line":"}"},
{"lineNum":" 1473","line":""},
{"lineNum":" 1474","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2,"},
{"lineNum":" 1475","line":"          typename baseclass, typename extvalclass, bool kdd>"},
{"lineNum":" 1476","line":"void extended<table_pow2,advance_pow2,baseclass,extvalclass,kdd>::advance("},
{"lineNum":" 1477","line":"    state_type distance, bool forwards)"},
{"lineNum":" 1478","line":"{"},
{"lineNum":" 1479","line":"    static_assert(kdd,"},
{"lineNum":" 1480","line":"        \"Efficient advance is too hard for non-kdd extension. \""},
{"lineNum":" 1481","line":"        \"For a weak advance, cast to base class\");"},
{"lineNum":" 1482","line":"    state_type zero ="},
{"lineNum":" 1483","line":"        baseclass::is_mcg ? this->state_ & state_type(3U) : state_type(0U);"},
{"lineNum":" 1484","line":"    if (may_tick) {"},
{"lineNum":" 1485","line":"        state_type ticks = distance >> (advance_pow2*may_tick);"},
{"lineNum":" 1486","line":"                                        // ^-- stupidity to appease GCC"},
{"lineNum":" 1487","line":"                                        // warnings"},
{"lineNum":" 1488","line":"        state_type adv_mask ="},
{"lineNum":" 1489","line":"            baseclass::is_mcg ? tick_mask << 2 : tick_mask;"},
{"lineNum":" 1490","line":"        state_type next_advance_distance = this->distance(zero, adv_mask);"},
{"lineNum":" 1491","line":"        if (!forwards)"},
{"lineNum":" 1492","line":"            next_advance_distance = (-next_advance_distance) & tick_mask;"},
{"lineNum":" 1493","line":"        if (next_advance_distance < (distance & tick_mask)) {"},
{"lineNum":" 1494","line":"            ++ticks;"},
{"lineNum":" 1495","line":"        }"},
{"lineNum":" 1496","line":"        if (ticks)"},
{"lineNum":" 1497","line":"            advance_table(ticks, forwards);"},
{"lineNum":" 1498","line":"    }"},
{"lineNum":" 1499","line":"    if (forwards) {"},
{"lineNum":" 1500","line":"        if (may_tock && this->distance(zero) <= distance)"},
{"lineNum":" 1501","line":"            advance_table();"},
{"lineNum":" 1502","line":"        baseclass::advance(distance);"},
{"lineNum":" 1503","line":"    } else {"},
{"lineNum":" 1504","line":"        if (may_tock && -(this->distance(zero)) <= distance)"},
{"lineNum":" 1505","line":"            advance_table(state_type(1U), false);"},
{"lineNum":" 1506","line":"        baseclass::advance(-distance);"},
{"lineNum":" 1507","line":"    }"},
{"lineNum":" 1508","line":"}"},
{"lineNum":" 1509","line":""},
{"lineNum":" 1510","line":"} // namespace pcg_detail"},
{"lineNum":" 1511","line":""},
{"lineNum":" 1512","line":"namespace pcg_engines {"},
{"lineNum":" 1513","line":""},
{"lineNum":" 1514","line":"using namespace pcg_detail;"},
{"lineNum":" 1515","line":""},
{"lineNum":" 1516","line":"/* Predefined types for XSH RS */"},
{"lineNum":" 1517","line":""},
{"lineNum":" 1518","line":"typedef oneseq_base<uint8_t,  uint16_t, xsh_rs_mixin>  oneseq_xsh_rs_16_8;"},
{"lineNum":" 1519","line":"typedef oneseq_base<uint16_t, uint32_t, xsh_rs_mixin>  oneseq_xsh_rs_32_16;"},
{"lineNum":" 1520","line":"typedef oneseq_base<uint32_t, uint64_t, xsh_rs_mixin>  oneseq_xsh_rs_64_32;"},
{"lineNum":" 1521","line":"typedef oneseq_base<uint64_t, pcg128_t, xsh_rs_mixin>  oneseq_xsh_rs_128_64;"},
{"lineNum":" 1522","line":""},
{"lineNum":" 1523","line":"typedef unique_base<uint8_t,  uint16_t, xsh_rs_mixin>  unique_xsh_rs_16_8;"},
{"lineNum":" 1524","line":"typedef unique_base<uint16_t, uint32_t, xsh_rs_mixin>  unique_xsh_rs_32_16;"},
{"lineNum":" 1525","line":"typedef unique_base<uint32_t, uint64_t, xsh_rs_mixin>  unique_xsh_rs_64_32;"},
{"lineNum":" 1526","line":"typedef unique_base<uint64_t, pcg128_t, xsh_rs_mixin>  unique_xsh_rs_128_64;"},
{"lineNum":" 1527","line":""},
{"lineNum":" 1528","line":"typedef setseq_base<uint8_t,  uint16_t, xsh_rs_mixin>  setseq_xsh_rs_16_8;"},
{"lineNum":" 1529","line":"typedef setseq_base<uint16_t, uint32_t, xsh_rs_mixin>  setseq_xsh_rs_32_16;"},
{"lineNum":" 1530","line":"typedef setseq_base<uint32_t, uint64_t, xsh_rs_mixin>  setseq_xsh_rs_64_32;"},
{"lineNum":" 1531","line":"typedef setseq_base<uint64_t, pcg128_t, xsh_rs_mixin>  setseq_xsh_rs_128_64;"},
{"lineNum":" 1532","line":""},
{"lineNum":" 1533","line":"typedef mcg_base<uint8_t,  uint16_t, xsh_rs_mixin>  mcg_xsh_rs_16_8;"},
{"lineNum":" 1534","line":"typedef mcg_base<uint16_t, uint32_t, xsh_rs_mixin>  mcg_xsh_rs_32_16;"},
{"lineNum":" 1535","line":"typedef mcg_base<uint32_t, uint64_t, xsh_rs_mixin>  mcg_xsh_rs_64_32;"},
{"lineNum":" 1536","line":"typedef mcg_base<uint64_t, pcg128_t, xsh_rs_mixin>  mcg_xsh_rs_128_64;"},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"/* Predefined types for XSH RR */"},
{"lineNum":" 1539","line":""},
{"lineNum":" 1540","line":"typedef oneseq_base<uint8_t,  uint16_t, xsh_rr_mixin>  oneseq_xsh_rr_16_8;"},
{"lineNum":" 1541","line":"typedef oneseq_base<uint16_t, uint32_t, xsh_rr_mixin>  oneseq_xsh_rr_32_16;"},
{"lineNum":" 1542","line":"typedef oneseq_base<uint32_t, uint64_t, xsh_rr_mixin>  oneseq_xsh_rr_64_32;"},
{"lineNum":" 1543","line":"typedef oneseq_base<uint64_t, pcg128_t, xsh_rr_mixin>  oneseq_xsh_rr_128_64;"},
{"lineNum":" 1544","line":""},
{"lineNum":" 1545","line":"typedef unique_base<uint8_t,  uint16_t, xsh_rr_mixin>  unique_xsh_rr_16_8;"},
{"lineNum":" 1546","line":"typedef unique_base<uint16_t, uint32_t, xsh_rr_mixin>  unique_xsh_rr_32_16;"},
{"lineNum":" 1547","line":"typedef unique_base<uint32_t, uint64_t, xsh_rr_mixin>  unique_xsh_rr_64_32;"},
{"lineNum":" 1548","line":"typedef unique_base<uint64_t, pcg128_t, xsh_rr_mixin>  unique_xsh_rr_128_64;"},
{"lineNum":" 1549","line":""},
{"lineNum":" 1550","line":"typedef setseq_base<uint8_t,  uint16_t, xsh_rr_mixin>  setseq_xsh_rr_16_8;"},
{"lineNum":" 1551","line":"typedef setseq_base<uint16_t, uint32_t, xsh_rr_mixin>  setseq_xsh_rr_32_16;"},
{"lineNum":" 1552","line":"typedef setseq_base<uint32_t, uint64_t, xsh_rr_mixin>  setseq_xsh_rr_64_32;"},
{"lineNum":" 1553","line":"typedef setseq_base<uint64_t, pcg128_t, xsh_rr_mixin>  setseq_xsh_rr_128_64;"},
{"lineNum":" 1554","line":""},
{"lineNum":" 1555","line":"typedef mcg_base<uint8_t,  uint16_t, xsh_rr_mixin>  mcg_xsh_rr_16_8;"},
{"lineNum":" 1556","line":"typedef mcg_base<uint16_t, uint32_t, xsh_rr_mixin>  mcg_xsh_rr_32_16;"},
{"lineNum":" 1557","line":"typedef mcg_base<uint32_t, uint64_t, xsh_rr_mixin>  mcg_xsh_rr_64_32;"},
{"lineNum":" 1558","line":"typedef mcg_base<uint64_t, pcg128_t, xsh_rr_mixin>  mcg_xsh_rr_128_64;"},
{"lineNum":" 1559","line":""},
{"lineNum":" 1560","line":""},
{"lineNum":" 1561","line":"/* Predefined types for RXS M XS */"},
{"lineNum":" 1562","line":""},
{"lineNum":" 1563","line":"typedef oneseq_base<uint8_t,  uint8_t, rxs_m_xs_mixin>   oneseq_rxs_m_xs_8_8;"},
{"lineNum":" 1564","line":"typedef oneseq_base<uint16_t, uint16_t, rxs_m_xs_mixin>  oneseq_rxs_m_xs_16_16;"},
{"lineNum":" 1565","line":"typedef oneseq_base<uint32_t, uint32_t, rxs_m_xs_mixin>  oneseq_rxs_m_xs_32_32;"},
{"lineNum":" 1566","line":"typedef oneseq_base<uint64_t, uint64_t, rxs_m_xs_mixin>  oneseq_rxs_m_xs_64_64;"},
{"lineNum":" 1567","line":"typedef oneseq_base<pcg128_t, pcg128_t, rxs_m_xs_mixin>  oneseq_rxs_m_xs_128_128;"},
{"lineNum":" 1568","line":""},
{"lineNum":" 1569","line":"typedef unique_base<uint8_t,  uint8_t, rxs_m_xs_mixin>  unique_rxs_m_xs_8_8;"},
{"lineNum":" 1570","line":"typedef unique_base<uint16_t, uint16_t, rxs_m_xs_mixin> unique_rxs_m_xs_16_16;"},
{"lineNum":" 1571","line":"typedef unique_base<uint32_t, uint32_t, rxs_m_xs_mixin> unique_rxs_m_xs_32_32;"},
{"lineNum":" 1572","line":"typedef unique_base<uint64_t, uint64_t, rxs_m_xs_mixin> unique_rxs_m_xs_64_64;"},
{"lineNum":" 1573","line":"typedef unique_base<pcg128_t, pcg128_t, rxs_m_xs_mixin> unique_rxs_m_xs_128_128;"},
{"lineNum":" 1574","line":""},
{"lineNum":" 1575","line":"typedef setseq_base<uint8_t,  uint8_t, rxs_m_xs_mixin>  setseq_rxs_m_xs_8_8;"},
{"lineNum":" 1576","line":"typedef setseq_base<uint16_t, uint16_t, rxs_m_xs_mixin> setseq_rxs_m_xs_16_16;"},
{"lineNum":" 1577","line":"typedef setseq_base<uint32_t, uint32_t, rxs_m_xs_mixin> setseq_rxs_m_xs_32_32;"},
{"lineNum":" 1578","line":"typedef setseq_base<uint64_t, uint64_t, rxs_m_xs_mixin> setseq_rxs_m_xs_64_64;"},
{"lineNum":" 1579","line":"typedef setseq_base<pcg128_t, pcg128_t, rxs_m_xs_mixin> setseq_rxs_m_xs_128_128;"},
{"lineNum":" 1580","line":""},
{"lineNum":" 1581","line":"                // MCG versions don\'t make sense here, so aren\'t defined."},
{"lineNum":" 1582","line":""},
{"lineNum":" 1583","line":"/* Predefined types for XSL RR (only defined for \"large\" types) */"},
{"lineNum":" 1584","line":""},
{"lineNum":" 1585","line":"typedef oneseq_base<uint32_t, uint64_t, xsl_rr_mixin>  oneseq_xsl_rr_64_32;"},
{"lineNum":" 1586","line":"typedef oneseq_base<uint64_t, pcg128_t, xsl_rr_mixin>  oneseq_xsl_rr_128_64;"},
{"lineNum":" 1587","line":""},
{"lineNum":" 1588","line":"typedef unique_base<uint32_t, uint64_t, xsl_rr_mixin>  unique_xsl_rr_64_32;"},
{"lineNum":" 1589","line":"typedef unique_base<uint64_t, pcg128_t, xsl_rr_mixin>  unique_xsl_rr_128_64;"},
{"lineNum":" 1590","line":""},
{"lineNum":" 1591","line":"typedef setseq_base<uint32_t, uint64_t, xsl_rr_mixin>  setseq_xsl_rr_64_32;"},
{"lineNum":" 1592","line":"typedef setseq_base<uint64_t, pcg128_t, xsl_rr_mixin>  setseq_xsl_rr_128_64;"},
{"lineNum":" 1593","line":""},
{"lineNum":" 1594","line":"typedef mcg_base<uint32_t, uint64_t, xsl_rr_mixin>  mcg_xsl_rr_64_32;"},
{"lineNum":" 1595","line":"typedef mcg_base<uint64_t, pcg128_t, xsl_rr_mixin>  mcg_xsl_rr_128_64;"},
{"lineNum":" 1596","line":""},
{"lineNum":" 1597","line":""},
{"lineNum":" 1598","line":"/* Predefined types for XSL RR RR (only defined for \"large\" types) */"},
{"lineNum":" 1599","line":""},
{"lineNum":" 1600","line":"typedef oneseq_base<uint64_t, uint64_t, xsl_rr_rr_mixin>"},
{"lineNum":" 1601","line":"    oneseq_xsl_rr_rr_64_64;"},
{"lineNum":" 1602","line":"typedef oneseq_base<pcg128_t, pcg128_t, xsl_rr_rr_mixin>"},
{"lineNum":" 1603","line":"    oneseq_xsl_rr_rr_128_128;"},
{"lineNum":" 1604","line":""},
{"lineNum":" 1605","line":"typedef unique_base<uint64_t, uint64_t, xsl_rr_rr_mixin>"},
{"lineNum":" 1606","line":"    unique_xsl_rr_rr_64_64;"},
{"lineNum":" 1607","line":"typedef unique_base<pcg128_t, pcg128_t, xsl_rr_rr_mixin>"},
{"lineNum":" 1608","line":"    unique_xsl_rr_rr_128_128;"},
{"lineNum":" 1609","line":""},
{"lineNum":" 1610","line":"typedef setseq_base<uint64_t, uint64_t, xsl_rr_rr_mixin>"},
{"lineNum":" 1611","line":"    setseq_xsl_rr_rr_64_64;"},
{"lineNum":" 1612","line":"typedef setseq_base<pcg128_t, pcg128_t, xsl_rr_rr_mixin>"},
{"lineNum":" 1613","line":"    setseq_xsl_rr_rr_128_128;"},
{"lineNum":" 1614","line":""},
{"lineNum":" 1615","line":"                // MCG versions don\'t make sense here, so aren\'t defined."},
{"lineNum":" 1616","line":""},
{"lineNum":" 1617","line":"/* Extended generators */"},
{"lineNum":" 1618","line":""},
{"lineNum":" 1619","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2,"},
{"lineNum":" 1620","line":"          typename BaseRNG, bool kdd = true>"},
{"lineNum":" 1621","line":"using ext_std8 = extended<table_pow2, advance_pow2, BaseRNG,"},
{"lineNum":" 1622","line":"                          oneseq_rxs_m_xs_8_8, kdd>;"},
{"lineNum":" 1623","line":""},
{"lineNum":" 1624","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2,"},
{"lineNum":" 1625","line":"          typename BaseRNG, bool kdd = true>"},
{"lineNum":" 1626","line":"using ext_std16 = extended<table_pow2, advance_pow2, BaseRNG,"},
{"lineNum":" 1627","line":"                           oneseq_rxs_m_xs_16_16, kdd>;"},
{"lineNum":" 1628","line":""},
{"lineNum":" 1629","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2,"},
{"lineNum":" 1630","line":"          typename BaseRNG, bool kdd = true>"},
{"lineNum":" 1631","line":"using ext_std32 = extended<table_pow2, advance_pow2, BaseRNG,"},
{"lineNum":" 1632","line":"                           oneseq_rxs_m_xs_32_32, kdd>;"},
{"lineNum":" 1633","line":""},
{"lineNum":" 1634","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2,"},
{"lineNum":" 1635","line":"          typename BaseRNG, bool kdd = true>"},
{"lineNum":" 1636","line":"using ext_std64 = extended<table_pow2, advance_pow2, BaseRNG,"},
{"lineNum":" 1637","line":"                           oneseq_rxs_m_xs_64_64, kdd>;"},
{"lineNum":" 1638","line":""},
{"lineNum":" 1639","line":""},
{"lineNum":" 1640","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2, bool kdd = true>"},
{"lineNum":" 1641","line":"using ext_oneseq_rxs_m_xs_32_32 ="},
{"lineNum":" 1642","line":"          ext_std32<table_pow2, advance_pow2, oneseq_rxs_m_xs_32_32, kdd>;"},
{"lineNum":" 1643","line":""},
{"lineNum":" 1644","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2, bool kdd = true>"},
{"lineNum":" 1645","line":"using ext_mcg_xsh_rs_64_32 ="},
{"lineNum":" 1646","line":"          ext_std32<table_pow2, advance_pow2, mcg_xsh_rs_64_32, kdd>;"},
{"lineNum":" 1647","line":""},
{"lineNum":" 1648","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2, bool kdd = true>"},
{"lineNum":" 1649","line":"using ext_oneseq_xsh_rs_64_32 ="},
{"lineNum":" 1650","line":"          ext_std32<table_pow2, advance_pow2, oneseq_xsh_rs_64_32, kdd>;"},
{"lineNum":" 1651","line":""},
{"lineNum":" 1652","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2, bool kdd = true>"},
{"lineNum":" 1653","line":"using ext_setseq_xsh_rr_64_32 ="},
{"lineNum":" 1654","line":"          ext_std32<table_pow2, advance_pow2, setseq_xsh_rr_64_32, kdd>;"},
{"lineNum":" 1655","line":""},
{"lineNum":" 1656","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2, bool kdd = true>"},
{"lineNum":" 1657","line":"using ext_mcg_xsl_rr_128_64 ="},
{"lineNum":" 1658","line":"          ext_std64<table_pow2, advance_pow2, mcg_xsl_rr_128_64, kdd>;"},
{"lineNum":" 1659","line":""},
{"lineNum":" 1660","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2, bool kdd = true>"},
{"lineNum":" 1661","line":"using ext_oneseq_xsl_rr_128_64 ="},
{"lineNum":" 1662","line":"          ext_std64<table_pow2, advance_pow2, oneseq_xsl_rr_128_64, kdd>;"},
{"lineNum":" 1663","line":""},
{"lineNum":" 1664","line":"template <bitcount_t table_pow2, bitcount_t advance_pow2, bool kdd = true>"},
{"lineNum":" 1665","line":"using ext_setseq_xsl_rr_128_64 ="},
{"lineNum":" 1666","line":"          ext_std64<table_pow2, advance_pow2, setseq_xsl_rr_128_64, kdd>;"},
{"lineNum":" 1667","line":""},
{"lineNum":" 1668","line":"} // namespace pcg_engines"},
{"lineNum":" 1669","line":""},
{"lineNum":" 1670","line":"typedef pcg_engines::setseq_xsh_rr_64_32        pcg32;"},
{"lineNum":" 1671","line":"typedef pcg_engines::oneseq_xsh_rr_64_32        pcg32_oneseq;"},
{"lineNum":" 1672","line":"typedef pcg_engines::unique_xsh_rr_64_32        pcg32_unique;"},
{"lineNum":" 1673","line":"typedef pcg_engines::mcg_xsh_rs_64_32           pcg32_fast;"},
{"lineNum":" 1674","line":""},
{"lineNum":" 1675","line":"typedef pcg_engines::setseq_xsl_rr_128_64       pcg64;"},
{"lineNum":" 1676","line":"typedef pcg_engines::oneseq_xsl_rr_128_64       pcg64_oneseq;"},
{"lineNum":" 1677","line":"typedef pcg_engines::unique_xsl_rr_128_64       pcg64_unique;"},
{"lineNum":" 1678","line":"typedef pcg_engines::mcg_xsl_rr_128_64          pcg64_fast;"},
{"lineNum":" 1679","line":""},
{"lineNum":" 1680","line":"typedef pcg_engines::setseq_rxs_m_xs_8_8        pcg8_once_insecure;"},
{"lineNum":" 1681","line":"typedef pcg_engines::setseq_rxs_m_xs_16_16      pcg16_once_insecure;"},
{"lineNum":" 1682","line":"typedef pcg_engines::setseq_rxs_m_xs_32_32      pcg32_once_insecure;"},
{"lineNum":" 1683","line":"typedef pcg_engines::setseq_rxs_m_xs_64_64      pcg64_once_insecure;"},
{"lineNum":" 1684","line":"typedef pcg_engines::setseq_xsl_rr_rr_128_128   pcg128_once_insecure;"},
{"lineNum":" 1685","line":""},
{"lineNum":" 1686","line":"typedef pcg_engines::oneseq_rxs_m_xs_8_8        pcg8_oneseq_once_insecure;"},
{"lineNum":" 1687","line":"typedef pcg_engines::oneseq_rxs_m_xs_16_16      pcg16_oneseq_once_insecure;"},
{"lineNum":" 1688","line":"typedef pcg_engines::oneseq_rxs_m_xs_32_32      pcg32_oneseq_once_insecure;"},
{"lineNum":" 1689","line":"typedef pcg_engines::oneseq_rxs_m_xs_64_64      pcg64_oneseq_once_insecure;"},
{"lineNum":" 1690","line":"typedef pcg_engines::oneseq_xsl_rr_rr_128_128   pcg128_oneseq_once_insecure;"},
{"lineNum":" 1691","line":""},
{"lineNum":" 1692","line":""},
{"lineNum":" 1693","line":"// These two extended RNGs provide two-dimensionally equidistributed"},
{"lineNum":" 1694","line":"// 32-bit generators.  pcg32_k2_fast occupies the same space as pcg64,"},
{"lineNum":" 1695","line":"// and can be called twice to generate 64 bits, but does not required"},
{"lineNum":" 1696","line":"// 128-bit math; on 32-bit systems, it\'s faster than pcg64 as well."},
{"lineNum":" 1697","line":""},
{"lineNum":" 1698","line":"typedef pcg_engines::ext_setseq_xsh_rr_64_32<6,16,true>     pcg32_k2;"},
{"lineNum":" 1699","line":"typedef pcg_engines::ext_oneseq_xsh_rs_64_32<6,32,true>     pcg32_k2_fast;"},
{"lineNum":" 1700","line":""},
{"lineNum":" 1701","line":"// These eight extended RNGs have about as much state as arc4random"},
{"lineNum":" 1702","line":"//"},
{"lineNum":" 1703","line":"//  - the k variants are k-dimensionally equidistributed"},
{"lineNum":" 1704","line":"//  - the c variants offer better crypographic security"},
{"lineNum":" 1705","line":"//"},
{"lineNum":" 1706","line":"// (just how good the cryptographic security is is an open question)"},
{"lineNum":" 1707","line":""},
{"lineNum":" 1708","line":"typedef pcg_engines::ext_setseq_xsh_rr_64_32<6,16,true>     pcg32_k64;"},
{"lineNum":" 1709","line":"typedef pcg_engines::ext_mcg_xsh_rs_64_32<6,32,true>        pcg32_k64_oneseq;"},
{"lineNum":" 1710","line":"typedef pcg_engines::ext_oneseq_xsh_rs_64_32<6,32,true>     pcg32_k64_fast;"},
{"lineNum":" 1711","line":""},
{"lineNum":" 1712","line":"typedef pcg_engines::ext_setseq_xsh_rr_64_32<6,16,false>    pcg32_c64;"},
{"lineNum":" 1713","line":"typedef pcg_engines::ext_oneseq_xsh_rs_64_32<6,32,false>    pcg32_c64_oneseq;"},
{"lineNum":" 1714","line":"typedef pcg_engines::ext_mcg_xsh_rs_64_32<6,32,false>       pcg32_c64_fast;"},
{"lineNum":" 1715","line":""},
{"lineNum":" 1716","line":"typedef pcg_engines::ext_setseq_xsl_rr_128_64<5,16,true>    pcg64_k32;"},
{"lineNum":" 1717","line":"typedef pcg_engines::ext_oneseq_xsl_rr_128_64<5,128,true>   pcg64_k32_oneseq;"},
{"lineNum":" 1718","line":"typedef pcg_engines::ext_mcg_xsl_rr_128_64<5,128,true>      pcg64_k32_fast;"},
{"lineNum":" 1719","line":""},
{"lineNum":" 1720","line":"typedef pcg_engines::ext_setseq_xsl_rr_128_64<5,16,false>   pcg64_c32;"},
{"lineNum":" 1721","line":"typedef pcg_engines::ext_oneseq_xsl_rr_128_64<5,128,false>  pcg64_c32_oneseq;"},
{"lineNum":" 1722","line":"typedef pcg_engines::ext_mcg_xsl_rr_128_64<5,128,false>     pcg64_c32_fast;"},
{"lineNum":" 1723","line":""},
{"lineNum":" 1724","line":"// These eight extended RNGs have more state than the Mersenne twister"},
{"lineNum":" 1725","line":"//"},
{"lineNum":" 1726","line":"//  - the k variants are k-dimensionally equidistributed"},
{"lineNum":" 1727","line":"//  - the c variants offer better crypographic security"},
{"lineNum":" 1728","line":"//"},
{"lineNum":" 1729","line":"// (just how good the cryptographic security is is an open question)"},
{"lineNum":" 1730","line":""},
{"lineNum":" 1731","line":"typedef pcg_engines::ext_setseq_xsh_rr_64_32<10,16,true>    pcg32_k1024;"},
{"lineNum":" 1732","line":"typedef pcg_engines::ext_oneseq_xsh_rs_64_32<10,32,true>    pcg32_k1024_fast;"},
{"lineNum":" 1733","line":""},
{"lineNum":" 1734","line":"typedef pcg_engines::ext_setseq_xsh_rr_64_32<10,16,false>   pcg32_c1024;"},
{"lineNum":" 1735","line":"typedef pcg_engines::ext_oneseq_xsh_rs_64_32<10,32,false>   pcg32_c1024_fast;"},
{"lineNum":" 1736","line":""},
{"lineNum":" 1737","line":"typedef pcg_engines::ext_setseq_xsl_rr_128_64<10,16,true>   pcg64_k1024;"},
{"lineNum":" 1738","line":"typedef pcg_engines::ext_oneseq_xsl_rr_128_64<10,128,true>  pcg64_k1024_fast;"},
{"lineNum":" 1739","line":""},
{"lineNum":" 1740","line":"typedef pcg_engines::ext_setseq_xsl_rr_128_64<10,16,false>  pcg64_c1024;"},
{"lineNum":" 1741","line":"typedef pcg_engines::ext_oneseq_xsl_rr_128_64<10,128,false> pcg64_c1024_fast;"},
{"lineNum":" 1742","line":""},
{"lineNum":" 1743","line":"// These generators have an insanely huge period (2^524352), and is suitable"},
{"lineNum":" 1744","line":"// for silly party tricks, such as dumping out 64 KB ZIP files at an arbitrary"},
{"lineNum":" 1745","line":"// point in the future.   [Actually, over the full period of the generator, it"},
{"lineNum":" 1746","line":"// will produce every 64 KB ZIP file 2^64 times!]"},
{"lineNum":" 1747","line":""},
{"lineNum":" 1748","line":"typedef pcg_engines::ext_setseq_xsh_rr_64_32<14,16,true>    pcg32_k16384;"},
{"lineNum":" 1749","line":"typedef pcg_engines::ext_oneseq_xsh_rs_64_32<14,32,true>    pcg32_k16384_fast;"},
{"lineNum":" 1750","line":""},
{"lineNum":" 1751","line":"#endif // PCG_RAND_HPP_INCLUDED"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
