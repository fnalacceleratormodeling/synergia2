var data = {lines:[
{"lineNum":"    1","line":""},
{"lineNum":"    2","line":"#ifdef __CUDA_ARCH__"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"// no implementations for CUDA arch"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#else"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"#include \"synergia/simulation/lattice_simulator.h\""},
{"lineNum":"   10","line":"#include \"synergia/foundation/physical_constants.h\""},
{"lineNum":"   11","line":"#include \"synergia/foundation/math_constants.h\""},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include \"synergia/simulation/propagator.h\""},
{"lineNum":"   14","line":"#include \"synergia/simulation/independent_stepper_elements.h\""},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#include \"synergia/utils/multi_array_conversions.h\""},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"namespace Lattice_simulator"},
{"lineNum":"   20","line":"{"},
{"lineNum":"   21","line":"    static double closed_orbit_tolerance"},
{"lineNum":"   22","line":"        = default_closed_orbit_tolerance;"},
{"lineNum":"   23","line":"}"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"void"},
{"lineNum":"   27","line":"Lattice_simulator::set_closed_orbit_tolerance(double tolerance)"},
{"lineNum":"   28","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"    closed_orbit_tolerance = tolerance;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"double"},
{"lineNum":"   33","line":"Lattice_simulator::get_closed_orbit_tolerance()"},
{"lineNum":"   34","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   35","line":"    return closed_orbit_tolerance;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   36","line":"}"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"std::array<double, 6>"},
{"lineNum":"   40","line":"Lattice_simulator::tune_linear_lattice(Lattice & lattice)"},
{"lineNum":"   41","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":"    return tune_rfcavities(lattice);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"}"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"std::array<double, 6>"},
{"lineNum":"   46","line":"Lattice_simulator::tune_circular_lattice(Lattice & lattice)"},
{"lineNum":"   47","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"    // calculate closed orbit"},
{"lineNum":"   49","line":"    auto state = calculate_closed_orbit(lattice, 0.0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":"    lattice.get_reference_particle().set_state(state);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    return tune_rfcavities(lattice);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"std::array<double, 6>"},
{"lineNum":"   56","line":"Lattice_simulator::tune_rfcavities(Lattice & lattice)"},
{"lineNum":"   57","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"    // make a copy of the original lattice"},
{"lineNum":"   59","line":"    Lattice temp_lattice(lattice);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"    auto & ref = temp_lattice.get_reference_particle();"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    // set rfcavity volt to 0 on the copied lattice"},
{"lineNum":"   63","line":"    for (auto & ele : temp_lattice.get_elements())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   64","line":"    {"},
{"lineNum":"   65","line":"        if (ele.get_type() == element_type::rfcavity)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"            ele.set_double_attribute(\"volt\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"    }"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    // setup the propagator"},
{"lineNum":"   70","line":"    Propagator propagator(temp_lattice, Independent_stepper_elements(1));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    // bunch simulator"},
{"lineNum":"   73","line":"    auto sim = Bunch_simulator::create_single_bunch_simulator(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   74","line":"            ref, Commxx().size(), 1e09);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    //"},
{"lineNum":"   77","line":"    sim.get_bunch()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"        .get_design_reference_particle()"},
{"lineNum":"   79","line":"        .set_state(ref.get_state());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    // propagate actions"},
{"lineNum":"   82","line":"    double accum_cdt = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"    sim.reg_prop_action_step_end([&accum_cdt](Bunch_simulator& sim, Lattice&, int, int, void*) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"        accum_cdt += sim.get_bunch().get_design_reference_particle().get_state()[4];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   85","line":"    }, nullptr );"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    // propagate to get the accumulated cdt"},
{"lineNum":"   88","line":"    Logger simlog(0, LoggerV::ERROR);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"    propagator.propagate(sim, simlog, 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    // return the state"},
{"lineNum":"   92","line":"    auto state = sim.get_bunch().get_reference_particle().get_state();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   93","line":"    state[Bunch::cdt] = accum_cdt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    // go back and set the frequency of the cavities based on the accumulated cdt"},
{"lineNum":"   96","line":"    double f = pconstants::c/accum_cdt;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    for (auto & ele : lattice.get_elements())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   99","line":"    {"},
{"lineNum":"  100","line":"        if (ele.get_type() == element_type::rfcavity)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"        {"},
{"lineNum":"  102","line":"            // set the frequency of the cavity if it doesn\'t already have one set and"},
{"lineNum":"  103","line":"            // there is a reasonable harmonic number"},
{"lineNum":"  104","line":"            if ( ele.get_double_attribute(\"freq\", -1.0) <= 0.0","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  105","line":"                    && ele.get_double_attribute(\"harmon\", -1.0) > 0.0 )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  106","line":"            {"},
{"lineNum":"  107","line":"                double harmon = ele.get_double_attribute(\"harmon\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"                // MAD-X definition of frequency is MHz"},
{"lineNum":"  109","line":"                ele.set_double_attribute(\"freq\", harmon*f*1.0e-6);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"            }"},
{"lineNum":"  111","line":"        }"},
{"lineNum":"  112","line":"    }"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    return state;"},
{"lineNum":"  115","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"#include <gsl/gsl_vector.h>"},
{"lineNum":"  119","line":"#include <gsl/gsl_multiroots.h>"},
{"lineNum":"  120","line":"#include \"synergia/libFF/ff_element.h\""},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"namespace"},
{"lineNum":"  123","line":"{"},
{"lineNum":"  124","line":"    struct Closed_orbit_params"},
{"lineNum":"  125","line":"    {"},
{"lineNum":"  126","line":"        const double dpp;"},
{"lineNum":"  127","line":"        Lattice lattice;"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"        Closed_orbit_params(double dpp, Lattice lattice)"},
{"lineNum":"  130","line":"            : dpp(dpp), lattice(lattice)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"        {"},
{"lineNum":"  132","line":"            // turn off any RF cavities because they"},
{"lineNum":"  133","line":"            // screw up the closed orbit calcation"},
{"lineNum":"  134","line":"            for (auto & ele : lattice.get_elements())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  135","line":"                if (ele.get_type() == element_type::rfcavity)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"                    ele.set_double_attribute(\"volt\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"    };"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    int"},
{"lineNum":"  141","line":"    propagate_co_try(const gsl_vector *co_try, void *params, gsl_vector *co_results)"},
{"lineNum":"  142","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"        Closed_orbit_params *copp = static_cast<Closed_orbit_params *>(params);"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"        auto comm = Commxx();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  146","line":"        Bunch bunch(copp->lattice.get_reference_particle(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  147","line":"                comm.size(), 1.0e10, comm);"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"        auto lp = bunch.get_host_particles();"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"        // set phase space coordinates in bunch"},
{"lineNum":"  152","line":"        double orbit_start[4];"},
{"lineNum":"  153","line":"        orbit_start[0] = lp(0, 0) = gsl_vector_get(co_try, 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  154","line":"        orbit_start[1] = lp(0, 1) = gsl_vector_get(co_try, 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  155","line":"        orbit_start[2] = lp(0, 2) = gsl_vector_get(co_try, 2);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  156","line":"        orbit_start[3] = lp(0, 3) = gsl_vector_get(co_try, 3);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"        lp(0, 4) = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"        lp(0, 5) = copp->dpp;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"        // checkin"},
{"lineNum":"  162","line":"        bunch.checkin_particles();"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"        // propagate"},
{"lineNum":"  165","line":"        for(auto const& ele : copp->lattice.get_elements())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  166","line":"            FF_element::apply(ele, bunch);"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"        // checkout"},
{"lineNum":"  169","line":"        bunch.checkout_particles();"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        gsl_vector_set(co_results, 0, lp(0, 0) - orbit_start[0]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"        gsl_vector_set(co_results, 1, lp(0, 1) - orbit_start[1]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  173","line":"        gsl_vector_set(co_results, 2, lp(0, 2) - orbit_start[2]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"        gsl_vector_set(co_results, 3, lp(0, 3) - orbit_start[3]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"        return GSL_SUCCESS;"},
{"lineNum":"  177","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  178","line":"}"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"std::array<double, 6>"},
{"lineNum":"  181","line":"Lattice_simulator::calculate_closed_orbit("},
{"lineNum":"  182","line":"        Lattice const& lattice, double dpp)"},
{"lineNum":"  183","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"    // create params object, make a copy of the lattice"},
{"lineNum":"  185","line":"    Closed_orbit_params cop(dpp, lattice);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    const size_t ndim = 4; // solve closed orbit in x, xp, y, yp"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    // init coordinates"},
{"lineNum":"  190","line":"    auto state = lattice.get_reference_particle().get_state();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    //const gsl_multiroot_fsolver_type * T = gsl_multiroot_fsolver_hybrid;"},
{"lineNum":"  193","line":"    const gsl_multiroot_fsolver_type * T = gsl_multiroot_fsolver_hybrids;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    //const gsl_multiroot_fsolver_type * T = gsl_multiroot_fsolver_dnewton;"},
{"lineNum":"  196","line":"    gsl_multiroot_fsolver * solver = gsl_multiroot_fsolver_alloc(T, ndim);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    // co_try are the coordinates of the closed orbit"},
{"lineNum":"  199","line":"    gsl_vector *co_try = gsl_vector_alloc(ndim);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    // initialize the closed orbit"},
{"lineNum":"  202","line":"    for (int i=0; i<ndim; ++i)"},
{"lineNum":"  203","line":"    {"},
{"lineNum":"  204","line":"        gsl_vector_set(co_try, i, 0.0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"        // or use the memory from last found closed orbit?"},
{"lineNum":"  207","line":"        //gsl_vector_set(co_try, i, state[i]);"},
{"lineNum":"  208","line":"    }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    gsl_multiroot_function F;"},
{"lineNum":"  211","line":"    F.f = &propagate_co_try;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  212","line":"    F.n = ndim;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  213","line":"    F.params = &cop;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    gsl_multiroot_fsolver_set(solver, &F, co_try);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"    int niter=0;"},
{"lineNum":"  218","line":"    const int maxiter = 100;"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"    do"},
{"lineNum":"  221","line":"    {"},
{"lineNum":"  222","line":"        int rc;"},
{"lineNum":"  223","line":"        rc = gsl_multiroot_fsolver_iterate(solver);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"        switch(rc)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":"        {"},
{"lineNum":"  227","line":"        case GSL_ENOPROG:"},
{"lineNum":"  228","line":"            throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  229","line":"                    \"Closed orbit solver unable to converge. \""},
{"lineNum":"  230","line":"                    \"Is the tolerance too tight?\");"},
{"lineNum":"  231","line":"            break;"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"        case GSL_EBADFUNC:"},
{"lineNum":"  234","line":"            throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"                    \"Closed orbit solver failed to evaluate solution\");"},
{"lineNum":"  236","line":"            break;"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"        default:"},
{"lineNum":"  239","line":"            break;"},
{"lineNum":"  240","line":"        }"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"        gsl_multiroot_fsolver_f(solver);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"    } while ((gsl_multiroot_test_residual(solver->f, closed_orbit_tolerance)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  245","line":"                == GSL_CONTINUE) && (++niter < maxiter));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"    if (niter == maxiter)"},
{"lineNum":"  248","line":"    {"},
{"lineNum":"  249","line":"        std::stringstream sstr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  250","line":"        sstr << \"Could not locate closed orbit after \"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"             << maxiter << \" iterations\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"        throw std::runtime_error( sstr.str() );","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  254","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"    std::array<double, 6> costate;"},
{"lineNum":"  257","line":"    gsl_vector *froots = gsl_multiroot_fsolver_root(solver);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  258","line":"    costate[0] = gsl_vector_get(froots, 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  259","line":"    costate[1] = gsl_vector_get(froots, 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"    costate[2] = gsl_vector_get(froots, 2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  261","line":"    costate[3] = gsl_vector_get(froots, 3);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"    costate[4] = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  263","line":"    costate[5] = cop.dpp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    gsl_multiroot_fsolver_free(solver);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"    gsl_vector_free(co_try);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"    return costate;"},
{"lineNum":"  268","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"#include \"synergia/foundation/trigon.h\""},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"std::array<double, 2>"},
{"lineNum":"  273","line":"filter_transverse_tunes(double const* jac);"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"// [tune_h, tune_v, c_delta_t]"},
{"lineNum":"  276","line":"std::array<double, 3>"},
{"lineNum":"  277","line":"Lattice_simulator::calculate_tune_and_cdt("},
{"lineNum":"  278","line":"        Lattice const& lattice, double dpp)"},
{"lineNum":"  279","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  280","line":"    // trigon bunch"},
{"lineNum":"  281","line":"    using trigon_t = Trigon<double, 2, 6>;"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    // get the reference particle"},
{"lineNum":"  284","line":"    auto const& ref = lattice.get_reference_particle();"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"    // closed orbit"},
{"lineNum":"  287","line":"    auto probe = Lattice_simulator::calculate_closed_orbit(lattice, dpp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"    // comm world"},
{"lineNum":"  290","line":"    Commxx comm;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"    bunch_t<trigon_t> tb(ref, comm.size(), comm);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  293","line":"    bunch_t<double>   pb(ref, comm.size(), 1e9, comm);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    // design reference particle from the closed orbit"},
{"lineNum":"  296","line":"    auto ref_l = ref;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":"    ref_l.set_state(probe);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":"    tb.set_design_reference_particle(ref_l);"},
{"lineNum":"  299","line":"    pb.set_design_reference_particle(ref_l);"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"    auto tparts = tb.get_host_particles();"},
{"lineNum":"  302","line":"    auto pparts = pb.get_host_particles();"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"    // init value"},
{"lineNum":"  305","line":"    for(int i=0; i<6; ++i)"},
{"lineNum":"  306","line":"    {"},
{"lineNum":"  307","line":"        tparts(0, i).set(probe[i], i);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  308","line":"        pparts(0, i) = probe[i];","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  309","line":"    }"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"    // check in"},
{"lineNum":"  312","line":"    tb.checkin_particles();"},
{"lineNum":"  313","line":"    pb.checkin_particles();"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    // init c_delta_t"},
{"lineNum":"  316","line":"    double c_delta_t = 0.0;"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"    // propagate trigon"},
{"lineNum":"  319","line":"    for(auto & ele : lattice.get_elements())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  320","line":"    {"},
{"lineNum":"  321","line":"        if (ele.get_type() == element_type::rfcavity)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  322","line":"        {"},
{"lineNum":"  323","line":"            Lattice_element dup = ele;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"            dup.set_double_attribute(\"volt\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"            FF_element::apply(dup, tb);"},
{"lineNum":"  327","line":"            FF_element::apply(dup, pb);"},
{"lineNum":"  328","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  329","line":"        else"},
{"lineNum":"  330","line":"        {"},
{"lineNum":"  331","line":"            FF_element::apply(ele, tb);"},
{"lineNum":"  332","line":"            FF_element::apply(ele, pb);"},
{"lineNum":"  333","line":"        }"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"        // cdt from reference particle"},
{"lineNum":"  336","line":"        c_delta_t += pb.get_design_reference_particle()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  337","line":"                       .get_state()[Bunch::cdt];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  338","line":"    }"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"    // checkout particles"},
{"lineNum":"  341","line":"    tb.checkout_particles();"},
{"lineNum":"  342","line":"    pb.checkout_particles();"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    // cdt from actual particle"},
{"lineNum":"  345","line":"    c_delta_t += pparts(0, 4);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"    // one-turn-map"},
{"lineNum":"  348","line":"    auto kjac = tb.get_jacobian(0);"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"    //auto jac = karray_to_matrix(kjac);"},
{"lineNum":"  351","line":"    //auto nus = filter_transverse_tunes(jac);"},
{"lineNum":"  352","line":"    auto nus = filter_transverse_tunes(kjac.data());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"#if 0"},
{"lineNum":"  355","line":"    std::cout << \"nus0 = \" << nus[0] << \"\\n\";"},
{"lineNum":"  356","line":"    std::cout << \"nus1 = \" << nus[1] << \"\\n\";"},
{"lineNum":"  357","line":"    std::cout << \"c_delta_t = \" << c_delta_t << \"\\n\";"},
{"lineNum":"  358","line":"#endif"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"    double tune_h = nus[0];"},
{"lineNum":"  361","line":"    double tune_v = nus[1];"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"    return {tune_h, tune_v, c_delta_t};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"chromaticities_t"},
{"lineNum":"  368","line":"Lattice_simulator::get_chromaticities("},
{"lineNum":"  369","line":"        Lattice const& lattice, double dpp)"},
{"lineNum":"  370","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  371","line":"    chromaticities_t chroms;"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    auto ref = lattice.get_reference_particle();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  374","line":"    double gamma = ref.get_gamma();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    // tune = [tune_h, tune_v, cdt]"},
{"lineNum":"  377","line":"    auto tune_0  = calculate_tune_and_cdt(lattice, 0.0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  378","line":"    auto tune_p  = calculate_tune_and_cdt(lattice, dpp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  379","line":"    auto tune_m  = calculate_tune_and_cdt(lattice, -dpp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  380","line":"    auto tune_pp = calculate_tune_and_cdt(lattice, 2.0*dpp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  381","line":"    auto tune_mm = calculate_tune_and_cdt(lattice, -2.0*dpp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    // five point stencil:"},
{"lineNum":"  384","line":"    // given function f(x) = a_0 + a_1*x + a_2*x**2 + a_3*x**3 + a_4*x**4"},
{"lineNum":"  385","line":"    // choose offset spacing d, calculate values"},
{"lineNum":"  386","line":"    // y++ = f(2*d)"},
{"lineNum":"  387","line":"    // y+ = f(d)"},
{"lineNum":"  388","line":"    // y0 = f(0)"},
{"lineNum":"  389","line":"    // y- = f(-d)"},
{"lineNum":"  390","line":"    // y-- = f(-2*d)"},
{"lineNum":"  391","line":"    // then you can easily calculate:"},
{"lineNum":"  392","line":"    // y0 = a_0"},
{"lineNum":"  393","line":"    // y+ - y- = 2*a_1*d + 2*a_3*d**3"},
{"lineNum":"  394","line":"    // y++ - y-- = 4*a_1*d + 16*a_3*d**3"},
{"lineNum":"  395","line":"    // y+ + y- - 2*y0 = 2*a_2*d**2 + 2*a_4*d**4"},
{"lineNum":"  396","line":"    // y++ + y-- - 2*y0 = 8*a_2*d**2 + 32*a_4*d**4"},
{"lineNum":"  397","line":"    // yielding expressions:"},
{"lineNum":"  398","line":"    // 8*(y+ - y-) - (y++ - y--) = 12*a_1*d"},
{"lineNum":"  399","line":"    // (y++ - y--) - 2*(y+ - y-) = 12*a_3*d**3"},
{"lineNum":"  400","line":"    // 16*(y+ + y- - 2*y_0) - (y++ + y-- - 2*y_0) = 24*a_2*d**2"},
{"lineNum":"  401","line":"    // (y++ + y-- - 2*y_0) - 4*(y+ + y- - 2*y_0) = 24*a_4*d**4"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"    double tune_h0 = tune_0[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  404","line":"    double tune_v0 = tune_0[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  405","line":"    double cT0 = tune_0[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"    double tune_h_plus = tune_p[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  408","line":"    double tune_v_plus = tune_p[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  409","line":"    double c_delta_t_plus = tune_p[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"    double tune_h_minus = tune_m[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  412","line":"    double tune_v_minus = tune_m[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  413","line":"    double c_delta_t_minus = tune_m[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"    double tune_h_plusplus = tune_pp[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  416","line":"    double tune_v_plusplus = tune_pp[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  417","line":"    double c_delta_t_plusplus = tune_pp[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"    double tune_h_minusminus = tune_mm[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  420","line":"    double tune_v_minusminus = tune_mm[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  421","line":"    double c_delta_t_minusminus = tune_mm[2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"#if 0"},
{"lineNum":"  424","line":"    std::cout << \"tune_0: \" << tune_0[0] << \", \" << tune_0[1] << \", \" << tune_0[2] << \"\\n\";"},
{"lineNum":"  425","line":"    std::cout << \"tune_p: \" << tune_p[0] << \", \" << tune_p[1] << \", \" << tune_p[2] << \"\\n\";"},
{"lineNum":"  426","line":"    std::cout << \"tune_m: \" << tune_m[0] << \", \" << tune_m[1] << \", \" << tune_m[2] << \"\\n\";"},
{"lineNum":"  427","line":"    std::cout << \"tune_pp: \" << tune_pp[0] << \", \" << tune_pp[1] << \", \" << tune_pp[2] << \"\\n\";"},
{"lineNum":"  428","line":"    std::cout << \"tune_mm: \" << tune_mm[0] << \", \" << tune_mm[1] << \", \" << tune_mm[2] << \"\\n\";"},
{"lineNum":"  429","line":"#endif"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    double a_h_chrom, b_h_chrom;"},
{"lineNum":"  432","line":"    a_h_chrom = 0.5*(tune_h_plus-tune_h_minus)/dpp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  433","line":"    b_h_chrom = 0.25*(tune_h_plusplus-tune_h_minusminus)/dpp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  434","line":"    double horizontal_chromaticity_alt=(4*a_h_chrom - b_h_chrom)/3.0;"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"    double a_v_chrom, b_v_chrom;"},
{"lineNum":"  437","line":"    a_v_chrom = 0.5*(tune_v_plus-tune_v_minus)/dpp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  438","line":"    b_v_chrom = 0.25*(tune_v_plusplus-tune_v_minusminus)/dpp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":"    double vertical_chromaticity_alt=(4*a_v_chrom - b_v_chrom)/3.0;"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"    double a_slip, b_slip;"},
{"lineNum":"  442","line":"    a_slip = 0.5*(c_delta_t_plus-c_delta_t_minus)/cT0 / dpp;"},
{"lineNum":"  443","line":"    b_slip = 0.25*(c_delta_t_plusplus-c_delta_t_minusminus)/cT0 / dpp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  444","line":"    double slip_factor_alt =(4*a_slip-b_slip)/3.0;"},
{"lineNum":"  445","line":"    double cdtp_m_cdtm = c_delta_t_plus - c_delta_t_minus;"},
{"lineNum":"  446","line":"    double cdtp_p_cdtm_m2cdt0 = c_delta_t_plus + c_delta_t_minus - 2*cT0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  447","line":"    double cdtpp_m_cdtmm = c_delta_t_plusplus - c_delta_t_minusminus;"},
{"lineNum":"  448","line":"    double cdtpp_p_cdtmm_m2cdt0 = c_delta_t_plusplus + c_delta_t_minusminus - 2*cT0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"    double qxp_m_qxm = tune_h_plus - tune_h_minus;"},
{"lineNum":"  451","line":"    double qxp_p_qxm_m2qx0 = tune_h_plus + tune_h_minus - 2*tune_h0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  452","line":"    double qxpp_m_qxmm = tune_h_plusplus - tune_h_minusminus;"},
{"lineNum":"  453","line":"    double qxpp_p_qxmm_m2qx0 = tune_h_plusplus + tune_h_minusminus - 2*tune_h0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"    double qyp_m_qym = tune_v_plus - tune_v_minus;"},
{"lineNum":"  456","line":"    double qyp_p_qym_m2qy0 = tune_v_plus + tune_v_minus - 2*tune_v0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  457","line":"    double qypp_m_qymm = tune_v_plusplus - tune_v_minusminus;"},
{"lineNum":"  458","line":"    double qypp_p_qymm_m2qy0 = tune_v_plusplus + tune_v_minusminus - 2*tune_v0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"    chroms.slip_factor"},
{"lineNum":"  461","line":"        = (8.0*cdtp_m_cdtm - cdtpp_m_cdtmm)/(12.0*dpp*cT0);"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"    chroms.slip_factor_prime"},
{"lineNum":"  464","line":"        = 2.0*(16*cdtp_p_cdtm_m2cdt0 - cdtpp_p_cdtmm_m2cdt0) /(24.0*dpp*dpp*cT0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"    chroms.momentum_compaction"},
{"lineNum":"  467","line":"        = chroms.slip_factor + 1. / gamma / gamma;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"    // d^2 cdt/d dpop^2 = 2! *a_2"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"    // d^3 cdt/ d dpop^3 = 3! * a_3 but I\'m not planning on using it"},
{"lineNum":"  472","line":"    // double d3cdt_d_dpop3 = 6.0*(cdtpp_m_cdtmm - 2.0*cdtp_m_cdtm)/(12.0*dpp*dpp*dpp*cT0);"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"    // d^4 cdt / d dpop^4 = 4! * a_4 but I\'m not planning on using it"},
{"lineNum":"  475","line":"    // double d4cdt_d_dpop4 = 24.0*(cdtpp_p_cdtmm_m2cdt0 - 4.0*cdtp_p_cdtm_m2cdt0)/(24.0*dpp*dpp*dpp*dpp*cT0);"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    chroms.horizontal_chromaticity"},
{"lineNum":"  478","line":"        = (8.0*qxp_m_qxm - qxpp_m_qxmm)/(12.0*dpp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"    chroms.vertical_chromaticity"},
{"lineNum":"  481","line":"        = (8.0*qyp_m_qym - qypp_m_qymm)/(12.0*dpp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"    chroms.horizontal_chromaticity_prime"},
{"lineNum":"  484","line":"        = 2.0*(16*qxp_p_qxm_m2qx0 - qxpp_p_qxmm_m2qx0) /(24.0*dpp*dpp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"    chroms.vertical_chromaticity_prime"},
{"lineNum":"  487","line":"        = 2.0*(16*qyp_p_qym_m2qy0 - qypp_p_qymm_m2qy0) /(24.0*dpp*dpp);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"    return chroms;"},
{"lineNum":"  490","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"karray2d_row"},
{"lineNum":"  493","line":"Lattice_simulator::get_linear_one_turn_map(Lattice const& lattice)"},
{"lineNum":"  494","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  495","line":"    // 2nd order one-turn-map is sufficient for the jacobian"},
{"lineNum":"  496","line":"    auto map = get_one_turn_map<2>(lattice);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  497","line":"    return map.jacobian();"},
{"lineNum":"  498","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"std::array<double, 3>"},
{"lineNum":"  501","line":"Lattice_simulator::map_to_twiss(karray2d_row map)"},
{"lineNum":"  502","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  503","line":"    // map must be 2x2"},
{"lineNum":"  504","line":"    if (map.extent(0)!=2 || map.extent(1)!=2)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  505","line":"        throw std::runtime_error(\"map_to_twiss: wrong dimensions\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"    // [alpha, beta, psi]"},
{"lineNum":"  508","line":"    std::array<double, 3> ret;"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"    double cosmu = 0.5 * (map(0, 0) + map(1, 1));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  511","line":"    double asinmu = 0.5 * (map(0, 0) - map(1, 1));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"    if (abs(cosmu) > 1.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  514","line":"        throw std::runtime_error(\"map_to_twiss: map is unstable\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"    double mu = acos(cosmu);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"    // beta is positive"},
{"lineNum":"  519","line":"    if (map(0,1) < 0.0) mu = 2.0*mconstants::pi - mu;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"    ret[0] = asinmu / sin(mu);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  522","line":"    ret[1] = map(0,1) / sin(mu);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  523","line":"    ret[2] = mu / (2.0 * mconstants::pi);"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"    return ret;"},
{"lineNum":"  526","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"double"},
{"lineNum":"  529","line":"Lattice_simulator::get_bucket_length(Lattice const& lattice)"},
{"lineNum":"  530","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  531","line":"    double freq = 0.0;"},
{"lineNum":"  532","line":"    double freq2 = 0.0;"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"    double harmon = 0.0;"},
{"lineNum":"  535","line":"    double harmon2 = 0.0;"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"    bool iswf = false;"},
{"lineNum":"  538","line":"    bool iswh = false;"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"    double eps = 1e-6;"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"    for(auto & ele : lattice.get_elements())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  543","line":"    {"},
{"lineNum":"  544","line":"        if (ele.get_type() == element_type::rfcavity)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  545","line":"        {"},
{"lineNum":"  546","line":"            if (ele.has_double_attribute(\"harmon\"))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  547","line":"            {"},
{"lineNum":"  548","line":"                harmon = ele.get_double_attribute(\"harmon\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"                if (iswh && (abs(harmon-harmon2)>eps))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  551","line":"                    throw std::runtime_error(\"get_bucket_length:\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  552","line":"                            \" rf elements with different harmonic\""},
{"lineNum":"  553","line":"                            \" number found!\");"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"                harmon2 = harmon;"},
{"lineNum":"  556","line":"                iswh = true;"},
{"lineNum":"  557","line":"            }"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"            if (ele.has_double_attribute(\"freq\"))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  560","line":"            {"},
{"lineNum":"  561","line":"                freq = ele.get_double_attribute(\"freq\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"                if (iswf && (abs(freq-freq2)>eps))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  564","line":"                    throw std::runtime_error(\"get_bucket_length:\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  565","line":"                            \" rf elements with different frequency\""},
{"lineNum":"  566","line":"                            \" found!\");"},
{"lineNum":"  567","line":""},
{"lineNum":"  568","line":"                freq2 = freq;"},
{"lineNum":"  569","line":"                iswf = true;"},
{"lineNum":"  570","line":"            }"},
{"lineNum":"  571","line":"        }"},
{"lineNum":"  572","line":"    }"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"    // use harmonic number"},
{"lineNum":"  575","line":"    if (iswh) return lattice.get_length()/harmon;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"    // use frequency"},
{"lineNum":"  578","line":"    if (iswf)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  579","line":"    {"},
{"lineNum":"  580","line":"        double beta = lattice.get_reference_particle().get_beta();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  581","line":"        return pconstants::c * beta / freq;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  582","line":"    }"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"    // or return 0"},
{"lineNum":"  585","line":"    return 0.0;"},
{"lineNum":"  586","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"double"},
{"lineNum":"  589","line":"Lattice_simulator::get_rf_frequency(Lattice const& lattice)"},
{"lineNum":"  590","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  591","line":"    double freq = 0.0;"},
{"lineNum":"  592","line":"    double freq2 = 0.0;"},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"    bool iswf = false;"},
{"lineNum":"  595","line":"    double eps = 1e-6;"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"    for(auto & ele : lattice.get_elements())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  598","line":"    {"},
{"lineNum":"  599","line":"        if (ele.get_type() == element_type::rfcavity)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  600","line":"        {"},
{"lineNum":"  601","line":"            if (ele.has_double_attribute(\"freq\"))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  602","line":"            {"},
{"lineNum":"  603","line":"                freq = ele.get_double_attribute(\"freq\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"                if (iswf && abs(freq-freq2)>eps)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  606","line":"                    throw std::runtime_error(\"get_rf_frequency:\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  607","line":"                            \" rf elements with different frequency\""},
{"lineNum":"  608","line":"                            \" found!\");"},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"                freq2 = freq;"},
{"lineNum":"  611","line":"                iswf = true;"},
{"lineNum":"  612","line":"            }"},
{"lineNum":"  613","line":"        }"},
{"lineNum":"  614","line":"    }"},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"    return freq * 1e6;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  617","line":"}"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":""},
{"lineNum":"  620","line":"// --------------------------------------------"},
{"lineNum":"  621","line":"// adjust tunes"},
{"lineNum":"  622","line":"// --------------------------------------------"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":""},
{"lineNum":"  625","line":"namespace"},
{"lineNum":"  626","line":"{"},
{"lineNum":"  627","line":"    double"},
{"lineNum":"  628","line":"    get_AT_corrector_strength(Lattice_element const& elm)"},
{"lineNum":"  629","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  630","line":"        // TODO: more element types"},
{"lineNum":"  631","line":"        // ..."},
{"lineNum":"  632","line":"        if (elm.get_type() == element_type::quadrupole)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  633","line":"            return elm.get_double_attribute(\"k1\", 0.0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  636","line":"                \"Bad element type passed to get_AT_corrector_strength: \""},
{"lineNum":"  637","line":"                + elm.get_name());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  638","line":"    }"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"    void"},
{"lineNum":"  642","line":"    set_AT_corrector_strength(Lattice_element& elm, double strength)"},
{"lineNum":"  643","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  644","line":"        // TODO: more element types"},
{"lineNum":"  645","line":"        // ..."},
{"lineNum":"  646","line":"        if (elm.get_type() == element_type::quadrupole)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  647","line":"            elm.set_double_attribute(\"k1\", strength);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  648","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"    void"},
{"lineNum":"  651","line":"    get_strengths_param("},
{"lineNum":"  652","line":"            std::vector<Lattice_element*> const& elms,"},
{"lineNum":"  653","line":"            std::vector<double> & original_strengths,"},
{"lineNum":"  654","line":"            double & param, bool & relative)"},
{"lineNum":"  655","line":"    {"},
{"lineNum":"  656","line":"        relative = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"        double lastval = get_AT_corrector_strength(*(elms[0]));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  659","line":"        const double tolerance = 1.0e-12;"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"        for (int i=0; i<elms.size(); ++i)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  662","line":"        {"},
{"lineNum":"  663","line":"            double val = get_AT_corrector_strength(*(elms[i]));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  664","line":"            if (std::abs(val - lastval) > tolerance) relative = true;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"            original_strengths.at(i) = val;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  667","line":"            lastval = val;"},
{"lineNum":"  668","line":"        }"},
{"lineNum":"  669","line":""},
{"lineNum":"  670","line":"        param = relative ? 1.0 : original_strengths[0];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  671","line":"    }"},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"    struct Adjust_tunes_params","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  676","line":"    {"},
{"lineNum":"  677","line":"        Lattice& lattice;"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"        double h_nu_target;"},
{"lineNum":"  680","line":"        double v_nu_target;"},
{"lineNum":"  681","line":""},
{"lineNum":"  682","line":"        std::vector<Lattice_element*> h_elements;"},
{"lineNum":"  683","line":"        std::vector<Lattice_element*> v_elements;"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"        std::vector<double> h_original_strengths;"},
{"lineNum":"  686","line":"        std::vector<double> v_original_strengths;"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"        double h_param;"},
{"lineNum":"  689","line":"        double v_param;"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"        bool h_relative;"},
{"lineNum":"  692","line":"        bool v_relative;"},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"        Adjust_tunes_params("},
{"lineNum":"  695","line":"                Lattice& lattice,"},
{"lineNum":"  696","line":"                double horizontal_tune,"},
{"lineNum":"  697","line":"                double vertical_tune,"},
{"lineNum":"  698","line":"                std::vector<Lattice_element*> const& h_correctors,"},
{"lineNum":"  699","line":"                std::vector<Lattice_element*> const& v_correctors)"},
{"lineNum":"  700","line":"            : lattice(lattice)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  701","line":"            , h_nu_target(horizontal_tune)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  702","line":"            , v_nu_target(vertical_tune)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  703","line":"            , h_elements(h_correctors)"},
{"lineNum":"  704","line":"            , v_elements(v_correctors)"},
{"lineNum":"  705","line":"            , h_original_strengths(h_correctors.size())"},
{"lineNum":"  706","line":"            , v_original_strengths(v_correctors.size())"},
{"lineNum":"  707","line":"            , h_param(1.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  708","line":"            , v_param(1.0)"},
{"lineNum":"  709","line":"            , h_relative(false)"},
{"lineNum":"  710","line":"            , v_relative(false)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  711","line":"        {"},
{"lineNum":"  712","line":"            get_strengths_param(h_elements, h_original_strengths,"},
{"lineNum":"  713","line":"                    h_param, h_relative);"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"            get_strengths_param(v_elements, v_original_strengths,"},
{"lineNum":"  716","line":"                    v_param, v_relative);"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"#if 0"},
{"lineNum":"  719","line":"            if (verbosity > 1)"},
{"lineNum":"  720","line":"            {"},
{"lineNum":"  721","line":"                logger << \"Lattice_simulator::adjust_tunes: h_relative = \""},
{"lineNum":"  722","line":"                        << h_relative << \", v_relative = \" << v_relative"},
{"lineNum":"  723","line":"                        << std::endl;"},
{"lineNum":"  724","line":"            }"},
{"lineNum":"  725","line":"#endif"},
{"lineNum":"  726","line":"        }"},
{"lineNum":"  727","line":"    };"},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"    int"},
{"lineNum":"  732","line":"    adjust_tunes_function("},
{"lineNum":"  733","line":"            const gsl_vector* x,"},
{"lineNum":"  734","line":"            void* params,"},
{"lineNum":"  735","line":"            gsl_vector* f)"},
{"lineNum":"  736","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  737","line":"        Adjust_tunes_params * atparams ="},
{"lineNum":"  738","line":"            static_cast<Adjust_tunes_params*>(params);"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"        double h_param = gsl_vector_get(x, 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"        for (int i=0; i<atparams->h_elements.size(); ++i)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  743","line":"        {"},
{"lineNum":"  744","line":"            double str = atparams->h_relative","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  745","line":"                ? h_param * atparams->h_original_strengths[i]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  746","line":"                : h_param;"},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"            auto pe = atparams->h_elements[i];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  749","line":"            set_AT_corrector_strength(*pe, str);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  750","line":"        }"},
{"lineNum":"  751","line":""},
{"lineNum":"  752","line":"        double v_param = gsl_vector_get(x, 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"        for (int i=0; i<atparams->v_elements.size(); ++i)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  755","line":"        {"},
{"lineNum":"  756","line":"            double str = atparams->v_relative","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  757","line":"                ? v_param * atparams->v_original_strengths[i]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  758","line":"                : v_param;"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"            auto pe = atparams->v_elements[i];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  761","line":"            set_AT_corrector_strength(*pe, str);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  762","line":"        }"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"        auto nus = Lattice_simulator::calculate_tune_and_cdt(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  765","line":"                atparams->lattice, 0.0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"        double nu_h = nus[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  768","line":"        double nu_v = nus[1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"        gsl_vector_set(f, 0, nu_h - atparams->h_nu_target);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  771","line":"        gsl_vector_set(f, 1, nu_v - atparams->v_nu_target);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":"        return GSL_SUCCESS;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  774","line":"    }"},
{"lineNum":"  775","line":"}"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":""},
{"lineNum":"  779","line":"void"},
{"lineNum":"  780","line":"Lattice_simulator::adjust_tunes("},
{"lineNum":"  781","line":"        Lattice& lattice,"},
{"lineNum":"  782","line":"        double horizontal_tune,"},
{"lineNum":"  783","line":"        double vertical_tune,"},
{"lineNum":"  784","line":"        double tolerance )"},
{"lineNum":"  785","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  786","line":"    std::vector<Lattice_element*> h_correctors;"},
{"lineNum":"  787","line":"    std::vector<Lattice_element*> v_correctors;"},
{"lineNum":"  788","line":""},
{"lineNum":"  789","line":"    for(auto & e : lattice.get_elements())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  790","line":"    {"},
{"lineNum":"  791","line":"        if (e.has_marker(marker_type::h_tunes_corrector))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  792","line":"            h_correctors.push_back(&e);"},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"        if (e.has_marker(marker_type::v_tunes_corrector))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  795","line":"            v_correctors.push_back(&e);"},
{"lineNum":"  796","line":"    }"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"    if (!h_correctors.size()) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  799","line":"        throw std::runtime_error(\"No h_tunes_correctors defined\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  800","line":"    }"},
{"lineNum":"  801","line":"    if (!v_correctors.size()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  802","line":"        throw std::runtime_error(\"No v_tunes_correctors defined\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  803","line":"    }"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"    Adjust_tunes_params atparams("},
{"lineNum":"  806","line":"            lattice,"},
{"lineNum":"  807","line":"            horizontal_tune, vertical_tune,"},
{"lineNum":"  808","line":"            h_correctors, v_correctors );"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"    const size_t n = 2;"},
{"lineNum":"  811","line":"    gsl_multiroot_function f = {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  812","line":"        &adjust_tunes_function, n, (void*)&atparams };"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"    gsl_vector * x = gsl_vector_alloc(n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  815","line":"    gsl_vector_set(x, 0, atparams.h_param);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  816","line":"    gsl_vector_set(x, 1, atparams.v_param);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"    const gsl_multiroot_fsolver_type * T = gsl_multiroot_fsolver_hybrids;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  819","line":"    gsl_multiroot_fsolver * s = gsl_multiroot_fsolver_alloc(T, n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  820","line":"    gsl_multiroot_fsolver_set(s, &f, x);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"    int status;"},
{"lineNum":"  823","line":"    size_t iter = 0;"},
{"lineNum":"  824","line":"    const int max_iter = 100;"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"    do"},
{"lineNum":"  827","line":"    {"},
{"lineNum":"  828","line":"        iter++;"},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"#if 0"},
{"lineNum":"  831","line":"        if (verbosity > 1)"},
{"lineNum":"  832","line":"        {"},
{"lineNum":"  833","line":"            logger << \"Lattice_simulator::adjust_tunes: iteration \""},
{"lineNum":"  834","line":"                   << iter << std::endl;"},
{"lineNum":"  835","line":"        }"},
{"lineNum":"  836","line":"#endif"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"        status = gsl_multiroot_fsolver_iterate(s);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  839","line":"        if (status) break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"        status = gsl_multiroot_test_residual(s->f, tolerance);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"    } while (status == GSL_CONTINUE && iter < max_iter);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"    gsl_multiroot_fsolver_free(s);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  846","line":"    gsl_vector_free(x);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"    if (iter >= max_iter)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  849","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  850","line":"                \"Lattice_elements::adjust_tunes: \""},
{"lineNum":"  851","line":"                \"solver failed to converge\" );"},
{"lineNum":"  852","line":"#if 0"},
{"lineNum":"  853","line":"    if (verbosity > 1)"},
{"lineNum":"  854","line":"    {"},
{"lineNum":"  855","line":"        logger"},
{"lineNum":"  856","line":"            << \"Lattice_simulator::adjust_tunes: \""},
{"lineNum":"  857","line":"            << \"begin new corrector quads\" << std::endl;"},
{"lineNum":"  858","line":"    }"},
{"lineNum":"  859","line":"#endif"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"#if 0"},
{"lineNum":"  862","line":"    if (verbosity > 1)"},
{"lineNum":"  863","line":"    {"},
{"lineNum":"  864","line":"        logger"},
{"lineNum":"  865","line":"            << \"Lattice_simulator::adjust_tunes: \""},
{"lineNum":"  866","line":"            << \"end new corrector quads\" << std::endl;"},
{"lineNum":"  867","line":"    }"},
{"lineNum":"  868","line":"#endif"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"#if 0"},
{"lineNum":"  871","line":"    if (verbosity > 0)"},
{"lineNum":"  872","line":"    {"},
{"lineNum":"  873","line":"        logger"},
{"lineNum":"  874","line":"            << \"Lattice_simulator::adjust_tunes: \""},
{"lineNum":"  875","line":"            << \"convergence achieved in \" << iter"},
{"lineNum":"  876","line":"            << \" iterations\" << std::endl;"},
{"lineNum":"  877","line":""},
{"lineNum":"  878","line":"        logger"},
{"lineNum":"  879","line":"            << std::setprecision(decimal_digits(tolerance)+2);"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"        logger"},
{"lineNum":"  882","line":"            << \"Lattice_simulator::adjust_tunes: \""},
{"lineNum":"  883","line":"            << \"final horizontal tune = \" << get_horizontal_tune()"},
{"lineNum":"  884","line":"            << \", final vertical tune = \" << get_vertical_tune()"},
{"lineNum":"  885","line":"            << std::endl;"},
{"lineNum":"  886","line":"    }"},
{"lineNum":"  887","line":"#endif"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"// --------------------------------------------"},
{"lineNum":"  893","line":"// Lattice Functions"},
{"lineNum":"  894","line":"// --------------------------------------------"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"void"},
{"lineNum":"  897","line":"Lattice_simulator::CourantSnyderLatticeFunctions(Lattice& lattice)"},
{"lineNum":"  898","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  899","line":"    CourantSnyderLatticeFunctions_impl(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  900","line":"            lattice, lattice.get_elements());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  901","line":"}"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"void"},
{"lineNum":"  904","line":"Lattice_simulator::CourantSnyderLatticeFunctions(Propagator& prop)"},
{"lineNum":"  905","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  906","line":"    CourantSnyderLatticeFunctions_impl(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  907","line":"            prop.get_lattice(), prop.get_lattice_element_slices());"},
{"lineNum":"  908","line":"}"},
{"lineNum":"  909","line":""},
{"lineNum":"  910","line":"void"},
{"lineNum":"  911","line":"Lattice_simulator::calc_dispersions(Lattice& lattice)"},
{"lineNum":"  912","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  913","line":"    calc_dispersions_impl(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  914","line":"            lattice, lattice.get_elements());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  915","line":"}"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"void"},
{"lineNum":"  918","line":"Lattice_simulator::calc_dispersions(Propagator& prop)"},
{"lineNum":"  919","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  920","line":"    calc_dispersions_impl(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  921","line":"            prop.get_lattice(), prop.get_lattice_element_slices());"},
{"lineNum":"  922","line":"}"},
{"lineNum":"  923","line":""},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"// --------------------------------------------"},
{"lineNum":"  927","line":"// adjust chromaticities"},
{"lineNum":"  928","line":"// --------------------------------------------"},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"namespace"},
{"lineNum":"  931","line":"{"},
{"lineNum":"  932","line":"    struct ChromAdjuster"},
{"lineNum":"  933","line":"    {"},
{"lineNum":"  934","line":"        using MatrixD = Eigen::Matrix<double,"},
{"lineNum":"  935","line":"              Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>;"},
{"lineNum":"  936","line":""},
{"lineNum":"  937","line":"        const int N;"},
{"lineNum":"  938","line":"        Lattice& lattice;"},
{"lineNum":"  939","line":"        std::vector<Lattice_element*> correctors;"},
{"lineNum":"  940","line":"        MatrixD f_;"},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"        ChromAdjuster("},
{"lineNum":"  943","line":"            Lattice& lattice,"},
{"lineNum":"  944","line":"            std::vector<Lattice_element*> const& h_correctors,"},
{"lineNum":"  945","line":"            std::vector<Lattice_element*> const& v_correctors)"},
{"lineNum":"  946","line":"        : N(h_correctors.size() + v_correctors.size())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  947","line":"        , lattice(lattice)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  948","line":"        , correctors(N), f_(N, 2)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  949","line":"        {"},
{"lineNum":"  950","line":"            auto h_size = h_correctors.size();"},
{"lineNum":"  951","line":"            auto v_size = v_correctors.size();"},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"            for(size_t i=0; i<h_size; ++i)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  954","line":"            {"},
{"lineNum":"  955","line":"                correctors[i] = h_correctors[i];","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  956","line":"                f_(i, 0) = 1.0;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  957","line":"                f_(i, 1) = 0.0;"},
{"lineNum":"  958","line":"            }"},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"            for(size_t i=0; i<v_size; ++i)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  961","line":"            {"},
{"lineNum":"  962","line":"                correctors[i+h_size] = v_correctors[i];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  963","line":"                f_(i+h_size, 0) = 0.0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  964","line":"                f_(i+h_size, 1) = 1.0;"},
{"lineNum":"  965","line":"            }"},
{"lineNum":"  966","line":"        }"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"        void change_chrom_by(double dh, double dv)"},
{"lineNum":"  969","line":"        {"},
{"lineNum":"  970","line":"            namespace LS = Lattice_simulator;"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"            LS::CourantSnyderLatticeFunctions(lattice);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  973","line":"            LS::calc_dispersions(lattice);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"            MatrixD beta(2, N);"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":"            // delta_xi = beta * _f * c"},
{"lineNum":"  978","line":"            // w = _f * c"},
{"lineNum":"  979","line":"            // delta chef_str = 2 * pi * brho * w_k / dsp_k"},
{"lineNum":"  980","line":"            // (chef_str = k * brho / 2)"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"            for( int j = 0; j < N; ++j)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  983","line":"            {"},
{"lineNum":"  984","line":"                double dsp = correctors[j]->lf.dispersion.hor;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  985","line":"                beta(0,j) = correctors[j]->lf.beta.hor * dsp;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  986","line":"                beta(1,j) = -correctors[j]->lf.beta.ver * dsp;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  987","line":"            }"},
{"lineNum":"  988","line":""},
{"lineNum":"  989","line":"            // Adjust chromaticity"},
{"lineNum":"  990","line":"            MatrixD d_xi(2, 1);"},
{"lineNum":"  991","line":"            d_xi(0,0) = dh;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  992","line":"            d_xi(1,0) = dv;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  993","line":""},
{"lineNum":"  994","line":"            MatrixD c_ = 4.0 * mconstants::pi * ((beta*f_).inverse()*d_xi);"},
{"lineNum":"  995","line":"            MatrixD w  = f_* c_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  996","line":""},
{"lineNum":"  997","line":"            for(int j=0; j<N; ++j)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  998","line":"            {"},
{"lineNum":"  999","line":"                double len = correctors[j]->get_length();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1000","line":"                double str = correctors[j]->get_double_attribute(\"k2\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1001","line":""},
{"lineNum":" 1002","line":"                str += (len>0.0) ? w(j,0)/len : w(j,0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1003","line":"                correctors[j]->set_double_attribute(\"k2\", str);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1004","line":"            }"},
{"lineNum":" 1005","line":"        }"},
{"lineNum":" 1006","line":"    };"},
{"lineNum":" 1007","line":""},
{"lineNum":" 1008","line":""},
{"lineNum":" 1009","line":"}"},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"void"},
{"lineNum":" 1012","line":"Lattice_simulator::adjust_chromaticities("},
{"lineNum":" 1013","line":"        Lattice& lattice,"},
{"lineNum":" 1014","line":"        double horizontal_chromaticity,"},
{"lineNum":" 1015","line":"        double vertical_chromaticity,"},
{"lineNum":" 1016","line":"        double tolerance,"},
{"lineNum":" 1017","line":"        int max_steps )"},
{"lineNum":" 1018","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1019","line":"    std::vector<Lattice_element*> h_correctors;"},
{"lineNum":" 1020","line":"    std::vector<Lattice_element*> v_correctors;"},
{"lineNum":" 1021","line":""},
{"lineNum":" 1022","line":"    // extract the H/V correctors"},
{"lineNum":" 1023","line":"    for(auto & e : lattice.get_elements())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1024","line":"    {"},
{"lineNum":" 1025","line":"        if (e.has_marker(marker_type::h_chrom_corrector))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1026","line":"            h_correctors.push_back(&e);"},
{"lineNum":" 1027","line":""},
{"lineNum":" 1028","line":"        if (e.has_marker(marker_type::v_chrom_corrector))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1029","line":"            v_correctors.push_back(&e);"},
{"lineNum":" 1030","line":"    }"},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"    // Adjuster"},
{"lineNum":" 1033","line":"    ChromAdjuster ca(lattice, h_correctors, v_correctors);;"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"    // current chromaticities"},
{"lineNum":" 1036","line":"    auto chroms = get_chromaticities(lattice);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1037","line":""},
{"lineNum":" 1038","line":"    double chr_h = chroms.horizontal_chromaticity;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1039","line":"    double chr_v = chroms.vertical_chromaticity;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1040","line":""},
{"lineNum":" 1041","line":"    // delta = target - current"},
{"lineNum":" 1042","line":"    double dh = horizontal_chromaticity - chr_h;"},
{"lineNum":" 1043","line":"    double dv = vertical_chromaticity - chr_v;"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"    int count = 0;"},
{"lineNum":" 1046","line":""},
{"lineNum":" 1047","line":"    // loop"},
{"lineNum":" 1048","line":"    while (((std::abs(dh) > tolerance) || (std::abs(dv) > tolerance))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1049","line":"            && (count < max_steps))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1050","line":"    {"},
{"lineNum":" 1051","line":"#if 0"},
{"lineNum":" 1052","line":"        //if (verbosity>0)"},
{"lineNum":" 1053","line":"        {"},
{"lineNum":" 1054","line":"            std::cout"},
{"lineNum":" 1055","line":"                << \"  step = \" << count"},
{"lineNum":" 1056","line":"                << \" chromaticity (H,V):  (\" << chr_h<< \", \" << chr_v<< \")\""},
{"lineNum":" 1057","line":"                << \"   (Delta H, Delta V): (\" << dh << \", \" << dv << \")\""},
{"lineNum":" 1058","line":"                <<    std::endl;"},
{"lineNum":" 1059","line":"        }"},
{"lineNum":" 1060","line":"#endif"},
{"lineNum":" 1061","line":""},
{"lineNum":" 1062","line":"        ca.change_chrom_by(dh, dv);"},
{"lineNum":" 1063","line":""},
{"lineNum":" 1064","line":"        auto chroms = get_chromaticities(lattice);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"        chr_h = chroms.horizontal_chromaticity;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1067","line":"        chr_v = chroms.vertical_chromaticity;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"        dh = horizontal_chromaticity - chr_h;"},
{"lineNum":" 1070","line":"        dv = vertical_chromaticity - chr_v;"},
{"lineNum":" 1071","line":""},
{"lineNum":" 1072","line":"        count++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1073","line":"    }"},
{"lineNum":" 1074","line":""},
{"lineNum":" 1075","line":"#if 0"},
{"lineNum":" 1076","line":"    //if (verbosity>0)"},
{"lineNum":" 1077","line":"    {"},
{"lineNum":" 1078","line":"        std::cout"},
{"lineNum":" 1079","line":"            << \" after steps=\" << count"},
{"lineNum":" 1080","line":"            << \" chromaticity (H,V):  (\" << chr_h<<\", \" <<chr_v<<\")\""},
{"lineNum":" 1081","line":"            << \"   (Delta H, Delta V): (\" << dh << \", \" << dv <<\")\""},
{"lineNum":" 1082","line":"            <<    std::endl;"},
{"lineNum":" 1083","line":"    }"},
{"lineNum":" 1084","line":"#endif"},
{"lineNum":" 1085","line":""},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"#if 0"},
{"lineNum":" 1088","line":"    Logger flogger(0, \"sextupole_correctors.txt\", false, true);"},
{"lineNum":" 1089","line":"    flogger"},
{"lineNum":" 1090","line":"        << \"! the sextupole correctors  for the chromaticity (H, V):  (\""},
{"lineNum":" 1091","line":"        << chr_h << \" ,  \" << chr_v << \" ) \""},
{"lineNum":" 1092","line":"        << std::endl;"},
{"lineNum":" 1093","line":""},
{"lineNum":" 1094","line":"    write_sextupole_correctors(h_correctors, v_correctors,"},
{"lineNum":" 1095","line":"            *chef_lattice_sptr, flogger);"},
{"lineNum":" 1096","line":""},
{"lineNum":" 1097","line":"    logger"},
{"lineNum":" 1098","line":"        << \"sextupole correctors strength written in the file \""},
{"lineNum":" 1099","line":"        << \"sextupole_correctors.txt\""},
{"lineNum":" 1100","line":"        << std::endl;"},
{"lineNum":" 1101","line":"#endif"},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":"    if (count == max_steps)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1104","line":"        throw std::runtime_error(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1105","line":"                \"Lattice_simulator::adjust_chromaticities: \""},
{"lineNum":" 1106","line":"                \"Convergence not achieved. Increase the maximum number of steps.\");"},
{"lineNum":" 1107","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1108","line":""},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":""},
{"lineNum":" 1111","line":""},
{"lineNum":" 1112","line":"#endif // __CUDA_ARCH__"},
{"lineNum":" 1113","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 304, "covered" : 0,};
var merged_data = [];
