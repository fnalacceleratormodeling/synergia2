var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    5","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    6","line":"==============================================================================*/"},
{"lineNum":"    7","line":"#if !defined(BOOST_SPIRIT_TST_JUNE_03_2007_1031AM)"},
{"lineNum":"    8","line":"#define BOOST_SPIRIT_TST_JUNE_03_2007_1031AM"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#if defined(_MSC_VER)"},
{"lineNum":"   11","line":"#pragma once"},
{"lineNum":"   12","line":"#endif"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include <boost/spirit/home/qi/string/detail/tst.hpp>"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":"    struct tst_pass_through"},
{"lineNum":"   19","line":"    {"},
{"lineNum":"   20","line":"        template <typename Char>"},
{"lineNum":"   21","line":"        Char operator()(Char ch) const"},
{"lineNum":"   22","line":"        {"},
{"lineNum":"   23","line":"            return ch;"},
{"lineNum":"   24","line":"        }"},
{"lineNum":"   25","line":"    };"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    template <typename Char, typename T>"},
{"lineNum":"   28","line":"    struct tst"},
{"lineNum":"   29","line":"    {"},
{"lineNum":"   30","line":"        typedef Char char_type; // the character type"},
{"lineNum":"   31","line":"        typedef T value_type; // the value associated with each entry"},
{"lineNum":"   32","line":"        typedef detail::tst_node<Char, T> node;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"        tst()"},
{"lineNum":"   35","line":"          : root(0)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   36","line":"        {"},
{"lineNum":"   37","line":"        }"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"        ~tst()"},
{"lineNum":"   40","line":"        {"},
{"lineNum":"   41","line":"            clear();","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"   42","line":"        }"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"        tst(tst const& rhs)"},
{"lineNum":"   45","line":"          : root(0)"},
{"lineNum":"   46","line":"        {"},
{"lineNum":"   47","line":"            copy(rhs);"},
{"lineNum":"   48","line":"        }"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"        tst& operator=(tst const& rhs)"},
{"lineNum":"   51","line":"        {"},
{"lineNum":"   52","line":"            return assign(rhs);"},
{"lineNum":"   53","line":"        }"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        template <typename Iterator, typename Filter>"},
{"lineNum":"   56","line":"        T* find(Iterator& first, Iterator last, Filter filter) const"},
{"lineNum":"   57","line":"        {"},
{"lineNum":"   58","line":"            return node::find(root, first, last, filter);"},
{"lineNum":"   59","line":"        }"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        template <typename Iterator>"},
{"lineNum":"   62","line":"        T* find(Iterator& first, Iterator last) const"},
{"lineNum":"   63","line":"        {"},
{"lineNum":"   64","line":"            return find(first, last, tst_pass_through());"},
{"lineNum":"   65","line":"        }"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"        template <typename Iterator>"},
{"lineNum":"   68","line":"        T* add("},
{"lineNum":"   69","line":"            Iterator first"},
{"lineNum":"   70","line":"          , Iterator last"},
{"lineNum":"   71","line":"          , typename boost::call_traits<T>::param_type val)"},
{"lineNum":"   72","line":"        {"},
{"lineNum":"   73","line":"            return node::add(root, first, last, val, this);"},
{"lineNum":"   74","line":"        }"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"        template <typename Iterator>"},
{"lineNum":"   77","line":"        void remove(Iterator first, Iterator last)"},
{"lineNum":"   78","line":"        {"},
{"lineNum":"   79","line":"            node::remove(root, first, last, this);"},
{"lineNum":"   80","line":"        }"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"        void clear()"},
{"lineNum":"   83","line":"        {"},
{"lineNum":"   84","line":"            node::destruct_node(root, this);","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   85","line":"            root = 0;"},
{"lineNum":"   86","line":"        }"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"        template <typename F>"},
{"lineNum":"   89","line":"        void for_each(F f) const"},
{"lineNum":"   90","line":"        {"},
{"lineNum":"   91","line":"            node::for_each(root, std::basic_string<Char>(), f);"},
{"lineNum":"   92","line":"        }"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    private:"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"        friend struct detail::tst_node<Char, T>;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"        void copy(tst const& rhs)"},
{"lineNum":"   99","line":"        {"},
{"lineNum":"  100","line":"            root = node::clone_node(rhs.root, this);"},
{"lineNum":"  101","line":"        }"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"        tst& assign(tst const& rhs)"},
{"lineNum":"  104","line":"        {"},
{"lineNum":"  105","line":"            if (this != &rhs)"},
{"lineNum":"  106","line":"            {"},
{"lineNum":"  107","line":"                clear();"},
{"lineNum":"  108","line":"                copy(rhs);"},
{"lineNum":"  109","line":"            }"},
{"lineNum":"  110","line":"            return *this;"},
{"lineNum":"  111","line":"        }"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"        node* root;"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"        node* new_node(Char id)"},
{"lineNum":"  116","line":"        {"},
{"lineNum":"  117","line":"            return new node(id);","class":"lineNoCov","hits":"0","possible_hits":"153",},
{"lineNum":"  118","line":"        }"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"        T* new_data(typename boost::call_traits<T>::param_type val)"},
{"lineNum":"  121","line":"        {"},
{"lineNum":"  122","line":"            return new T(val);","class":"lineNoCov","hits":"0","possible_hits":"63",},
{"lineNum":"  123","line":"        }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"        void delete_node(node* p)"},
{"lineNum":"  126","line":"        {"},
{"lineNum":"  127","line":"            delete p;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  128","line":"        }"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"        void delete_data(T* p)"},
{"lineNum":"  131","line":"        {"},
{"lineNum":"  132","line":"            delete p;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  133","line":"        }"},
{"lineNum":"  134","line":"    };"},
{"lineNum":"  135","line":"}}}"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
