var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___ITERATOR_ADVANCE_H"},
{"lineNum":"   11","line":"#define _LIBCPP___ITERATOR_ADVANCE_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":"#include <__debug>"},
{"lineNum":"   15","line":"#include <__function_like.h>"},
{"lineNum":"   16","line":"#include <__iterator/concepts.h>"},
{"lineNum":"   17","line":"#include <__iterator/incrementable_traits.h>"},
{"lineNum":"   18","line":"#include <__iterator/iterator_traits.h>"},
{"lineNum":"   19","line":"#include <__utility/move.h>"},
{"lineNum":"   20","line":"#include <cstdlib>"},
{"lineNum":"   21","line":"#include <concepts>"},
{"lineNum":"   22","line":"#include <limits>"},
{"lineNum":"   23","line":"#include <type_traits>"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   26","line":"#pragma GCC system_header"},
{"lineNum":"   27","line":"#endif"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   30","line":"#include <__undef_macros>"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"template <class _InputIter>"},
{"lineNum":"   35","line":"_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   36","line":"void __advance(_InputIter& __i, typename iterator_traits<_InputIter>::difference_type __n, input_iterator_tag) {"},
{"lineNum":"   37","line":"  for (; __n > 0; --__n)"},
{"lineNum":"   38","line":"    ++__i;"},
{"lineNum":"   39","line":"}"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"template <class _BiDirIter>"},
{"lineNum":"   42","line":"_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   43","line":"void __advance(_BiDirIter& __i, typename iterator_traits<_BiDirIter>::difference_type __n, bidirectional_iterator_tag) {"},
{"lineNum":"   44","line":"  if (__n >= 0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   45","line":"    for (; __n > 0; --__n)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   46","line":"      ++__i;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   47","line":"  else"},
{"lineNum":"   48","line":"    for (; __n < 0; ++__n)","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"   49","line":"      --__i;"},
{"lineNum":"   50","line":"}"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"template <class _RandIter>"},
{"lineNum":"   53","line":"_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   54","line":"void __advance(_RandIter& __i, typename iterator_traits<_RandIter>::difference_type __n, random_access_iterator_tag) {"},
{"lineNum":"   55","line":"  __i += __n;","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":"   56","line":"}"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"template <"},
{"lineNum":"   59","line":"    class _InputIter, class _Distance,"},
{"lineNum":"   60","line":"    class _IntegralDistance = decltype(_VSTD::__convert_to_integral(declval<_Distance>())),"},
{"lineNum":"   61","line":"    class = _EnableIf<is_integral<_IntegralDistance>::value> >"},
{"lineNum":"   62","line":"_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14"},
{"lineNum":"   63","line":"void advance(_InputIter& __i, _Distance __orig_n) {"},
{"lineNum":"   64","line":"  typedef typename iterator_traits<_InputIter>::difference_type _Difference;"},
{"lineNum":"   65","line":"  _Difference __n = static_cast<_Difference>(_VSTD::__convert_to_integral(__orig_n));"},
{"lineNum":"   66","line":"  _LIBCPP_ASSERT(__n >= 0 || __is_cpp17_bidirectional_iterator<_InputIter>::value,"},
{"lineNum":"   67","line":"                 \"Attempt to advance(it, n) with negative n on a non-bidirectional iterator\");"},
{"lineNum":"   68","line":"  _VSTD::__advance(__i, __n, typename iterator_traits<_InputIter>::iterator_category());"},
{"lineNum":"   69","line":"}"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"#if !defined(_LIBCPP_HAS_NO_RANGES)"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"namespace ranges {"},
{"lineNum":"   74","line":"// [range.iter.op.advance]"},
{"lineNum":"   75","line":"struct __advance_fn final : private __function_like {"},
{"lineNum":"   76","line":"private:"},
{"lineNum":"   77","line":"  template <class _Tp>"},
{"lineNum":"   78","line":"  _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":"   79","line":"  static constexpr _Tp __magnitude_geq(_Tp __a, _Tp __b) noexcept {"},
{"lineNum":"   80","line":"    return __a < 0 ? (__a <= __b) : (__a >= __b);"},
{"lineNum":"   81","line":"  }"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"  template <class _Ip>"},
{"lineNum":"   84","line":"  _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":"   85","line":"  static constexpr void __advance_forward(_Ip& __i, iter_difference_t<_Ip> __n) {"},
{"lineNum":"   86","line":"    while (__n > 0) {"},
{"lineNum":"   87","line":"      --__n;"},
{"lineNum":"   88","line":"      ++__i;"},
{"lineNum":"   89","line":"    }"},
{"lineNum":"   90","line":"  }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"  template <class _Ip>"},
{"lineNum":"   93","line":"  _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":"   94","line":"  static constexpr void __advance_backward(_Ip& __i, iter_difference_t<_Ip> __n) {"},
{"lineNum":"   95","line":"    while (__n < 0) {"},
{"lineNum":"   96","line":"      ++__n;"},
{"lineNum":"   97","line":"      --__i;"},
{"lineNum":"   98","line":"    }"},
{"lineNum":"   99","line":"  }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"public:"},
{"lineNum":"  102","line":"  constexpr explicit __advance_fn(__tag __x) noexcept : __function_like(__x) {}"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"  // Preconditions: If `I` does not model `bidirectional_iterator`, `n` is not negative."},
{"lineNum":"  105","line":"  template <input_or_output_iterator _Ip>"},
{"lineNum":"  106","line":"  _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":"  107","line":"  constexpr void operator()(_Ip& __i, iter_difference_t<_Ip> __n) const {"},
{"lineNum":"  108","line":"    _LIBCPP_ASSERT(__n >= 0 || bidirectional_iterator<_Ip>,"},
{"lineNum":"  109","line":"                   \"If `n < 0`, then `bidirectional_iterator<I>` must be true.\");"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"    // If `I` models `random_access_iterator`, equivalent to `i += n`."},
{"lineNum":"  112","line":"    if constexpr (random_access_iterator<_Ip>) {"},
{"lineNum":"  113","line":"      __i += __n;"},
{"lineNum":"  114","line":"      return;"},
{"lineNum":"  115","line":"    } else if constexpr (bidirectional_iterator<_Ip>) {"},
{"lineNum":"  116","line":"      // Otherwise, if `n` is non-negative, increments `i` by `n`."},
{"lineNum":"  117","line":"      __advance_forward(__i, __n);"},
{"lineNum":"  118","line":"      // Otherwise, decrements `i` by `-n`."},
{"lineNum":"  119","line":"      __advance_backward(__i, __n);"},
{"lineNum":"  120","line":"      return;"},
{"lineNum":"  121","line":"    } else {"},
{"lineNum":"  122","line":"      // Otherwise, if `n` is non-negative, increments `i` by `n`."},
{"lineNum":"  123","line":"      __advance_forward(__i, __n);"},
{"lineNum":"  124","line":"      return;"},
{"lineNum":"  125","line":"    }"},
{"lineNum":"  126","line":"  }"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"  // Preconditions: Either `assignable_from<I&, S> || sized_sentinel_for<S, I>` is modeled, or [i, bound) denotes a range."},
{"lineNum":"  129","line":"  template <input_or_output_iterator _Ip, sentinel_for<_Ip> _Sp>"},
{"lineNum":"  130","line":"  _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":"  131","line":"  constexpr void operator()(_Ip& __i, _Sp __bound) const {"},
{"lineNum":"  132","line":"    // If `I` and `S` model `assignable_from<I&, S>`, equivalent to `i = std::move(bound)`."},
{"lineNum":"  133","line":"    if constexpr (assignable_from<_Ip&, _Sp>) {"},
{"lineNum":"  134","line":"      __i = _VSTD::move(__bound);"},
{"lineNum":"  135","line":"    }"},
{"lineNum":"  136","line":"    // Otherwise, if `S` and `I` model `sized_sentinel_for<S, I>`, equivalent to `ranges::advance(i, bound - i)`."},
{"lineNum":"  137","line":"    else if constexpr (sized_sentinel_for<_Sp, _Ip>) {"},
{"lineNum":"  138","line":"      (*this)(__i, __bound - __i);"},
{"lineNum":"  139","line":"    }"},
{"lineNum":"  140","line":"    // Otherwise, while `bool(i != bound)` is true, increments `i`."},
{"lineNum":"  141","line":"    else {"},
{"lineNum":"  142","line":"      while (__i != __bound) {"},
{"lineNum":"  143","line":"        ++__i;"},
{"lineNum":"  144","line":"      }"},
{"lineNum":"  145","line":"    }"},
{"lineNum":"  146","line":"  }"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"  // Preconditions:"},
{"lineNum":"  149","line":"  //   * If `n > 0`, [i, bound) denotes a range."},
{"lineNum":"  150","line":"  //   * If `n == 0`, [i, bound) or [bound, i) denotes a range."},
{"lineNum":"  151","line":"  //   * If `n < 0`, [bound, i) denotes a range, `I` models `bidirectional_iterator`, and `I` and `S` model `same_as<I, S>`."},
{"lineNum":"  152","line":"  // Returns: `n - M`, where `M` is the difference between the the ending and starting position."},
{"lineNum":"  153","line":"  template <input_or_output_iterator _Ip, sentinel_for<_Ip> _Sp>"},
{"lineNum":"  154","line":"  _LIBCPP_HIDE_FROM_ABI"},
{"lineNum":"  155","line":"  constexpr iter_difference_t<_Ip> operator()(_Ip& __i, iter_difference_t<_Ip> __n, _Sp __bound) const {"},
{"lineNum":"  156","line":"    _LIBCPP_ASSERT((__n >= 0) || (bidirectional_iterator<_Ip> && same_as<_Ip, _Sp>),"},
{"lineNum":"  157","line":"                   \"If `n < 0`, then `bidirectional_iterator<I> && same_as<I, S>` must be true.\");"},
{"lineNum":"  158","line":"    // If `S` and `I` model `sized_sentinel_for<S, I>`:"},
{"lineNum":"  159","line":"    if constexpr (sized_sentinel_for<_Sp, _Ip>) {"},
{"lineNum":"  160","line":"      // If |n| >= |bound - i|, equivalent to `ranges::advance(i, bound)`."},
{"lineNum":"  161","line":"      if (const auto __M = __bound - __i; __magnitude_geq(__n, __M)) {"},
{"lineNum":"  162","line":"        (*this)(__i, __bound);"},
{"lineNum":"  163","line":"        return __n - __M;"},
{"lineNum":"  164","line":"      }"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"      // Otherwise, equivalent to `ranges::advance(i, n)`."},
{"lineNum":"  167","line":"      (*this)(__i, __n);"},
{"lineNum":"  168","line":"      return 0;"},
{"lineNum":"  169","line":"    } else {"},
{"lineNum":"  170","line":"      // Otherwise, if `n` is non-negative, while `bool(i != bound)` is true, increments `i` but at"},
{"lineNum":"  171","line":"      // most `n` times."},
{"lineNum":"  172","line":"      while (__i != __bound && __n > 0) {"},
{"lineNum":"  173","line":"        ++__i;"},
{"lineNum":"  174","line":"        --__n;"},
{"lineNum":"  175","line":"      }"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"      // Otherwise, while `bool(i != bound)` is true, decrements `i` but at most `-n` times."},
{"lineNum":"  178","line":"      if constexpr (bidirectional_iterator<_Ip> && same_as<_Ip, _Sp>) {"},
{"lineNum":"  179","line":"        while (__i != __bound && __n < 0) {"},
{"lineNum":"  180","line":"          --__i;"},
{"lineNum":"  181","line":"          ++__n;"},
{"lineNum":"  182","line":"        }"},
{"lineNum":"  183","line":"      }"},
{"lineNum":"  184","line":"      return __n;"},
{"lineNum":"  185","line":"    }"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    _LIBCPP_UNREACHABLE();"},
{"lineNum":"  188","line":"  }"},
{"lineNum":"  189","line":"};"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"inline constexpr auto advance = __advance_fn(__function_like::__tag());"},
{"lineNum":"  192","line":"} // namespace ranges"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"#endif // !defined(_LIBCPP_HAS_NO_RANGES)"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"#endif // _LIBCPP___ITERATOR_ADVANCE_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 5, "covered" : 0,};
var merged_data = [];
