var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___BITS"},
{"lineNum":"   11","line":"#define _LIBCPP___BITS"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   16","line":"#pragma GCC system_header"},
{"lineNum":"   17","line":"#endif"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   20","line":"#include <__undef_macros>"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#ifndef _LIBCPP_COMPILER_MSVC"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"   28","line":"int __libcpp_ctz(unsigned __x)           _NOEXCEPT { return __builtin_ctz(__x); }"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"   31","line":"int __libcpp_ctz(unsigned long __x)      _NOEXCEPT { return __builtin_ctzl(__x); }"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"   34","line":"int __libcpp_ctz(unsigned long long __x) _NOEXCEPT { return __builtin_ctzll(__x); }"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"   38","line":"int __libcpp_clz(unsigned __x)           _NOEXCEPT { return __builtin_clz(__x); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"   41","line":"int __libcpp_clz(unsigned long __x)      _NOEXCEPT { return __builtin_clzl(__x); }","class":"lineNoCov","hits":"0","possible_hits":"33",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"   44","line":"int __libcpp_clz(unsigned long long __x) _NOEXCEPT { return __builtin_clzll(__x); }"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"   48","line":"int __libcpp_popcount(unsigned __x)           _NOEXCEPT { return __builtin_popcount(__x); }"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"   51","line":"int __libcpp_popcount(unsigned long __x)      _NOEXCEPT { return __builtin_popcountl(__x); }"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":"   54","line":"int __libcpp_popcount(unsigned long long __x) _NOEXCEPT { return __builtin_popcountll(__x); }"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#else  // _LIBCPP_COMPILER_MSVC"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"// Precondition:  __x != 0"},
{"lineNum":"   59","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   60","line":"int __libcpp_ctz(unsigned __x) {"},
{"lineNum":"   61","line":"  static_assert(sizeof(unsigned) == sizeof(unsigned long), \"\");"},
{"lineNum":"   62","line":"  static_assert(sizeof(unsigned long) == 4, \"\");"},
{"lineNum":"   63","line":"  unsigned long __where;"},
{"lineNum":"   64","line":"  if (_BitScanForward(&__where, __x))"},
{"lineNum":"   65","line":"    return static_cast<int>(__where);"},
{"lineNum":"   66","line":"  return 32;"},
{"lineNum":"   67","line":"}"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   70","line":"int __libcpp_ctz(unsigned long __x) {"},
{"lineNum":"   71","line":"    static_assert(sizeof(unsigned long) == sizeof(unsigned), \"\");"},
{"lineNum":"   72","line":"    return __ctz(static_cast<unsigned>(__x));"},
{"lineNum":"   73","line":"}"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   76","line":"int __libcpp_ctz(unsigned long long __x) {"},
{"lineNum":"   77","line":"    unsigned long __where;"},
{"lineNum":"   78","line":"#if defined(_LIBCPP_HAS_BITSCAN64)"},
{"lineNum":"   79","line":"  if (_BitScanForward64(&__where, __x))"},
{"lineNum":"   80","line":"    return static_cast<int>(__where);"},
{"lineNum":"   81","line":"#else"},
{"lineNum":"   82","line":"  // Win32 doesn\'t have _BitScanForward64 so emulate it with two 32 bit calls."},
{"lineNum":"   83","line":"  if (_BitScanForward(&__where, static_cast<unsigned long>(__x)))"},
{"lineNum":"   84","line":"    return static_cast<int>(__where);"},
{"lineNum":"   85","line":"  if (_BitScanForward(&__where, static_cast<unsigned long>(__x >> 32)))"},
{"lineNum":"   86","line":"    return static_cast<int>(__where + 32);"},
{"lineNum":"   87","line":"#endif"},
{"lineNum":"   88","line":"  return 64;"},
{"lineNum":"   89","line":"}"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"// Precondition:  __x != 0"},
{"lineNum":"   92","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   93","line":"int __libcpp_clz(unsigned __x) {"},
{"lineNum":"   94","line":"  static_assert(sizeof(unsigned) == sizeof(unsigned long), \"\");"},
{"lineNum":"   95","line":"  static_assert(sizeof(unsigned long) == 4, \"\");"},
{"lineNum":"   96","line":"  unsigned long __where;"},
{"lineNum":"   97","line":"  if (_BitScanReverse(&__where, __x))"},
{"lineNum":"   98","line":"    return static_cast<int>(31 - __where);"},
{"lineNum":"   99","line":"  return 32; // Undefined Behavior."},
{"lineNum":"  100","line":"}"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  103","line":"int __libcpp_clz(unsigned long __x) {"},
{"lineNum":"  104","line":"    static_assert(sizeof(unsigned) == sizeof(unsigned long), \"\");"},
{"lineNum":"  105","line":"    return __libcpp_clz(static_cast<unsigned>(__x));"},
{"lineNum":"  106","line":"}"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  109","line":"int __libcpp_clz(unsigned long long __x) {"},
{"lineNum":"  110","line":"  unsigned long __where;"},
{"lineNum":"  111","line":"#if defined(_LIBCPP_HAS_BITSCAN64)"},
{"lineNum":"  112","line":"  if (_BitScanReverse64(&__where, __x))"},
{"lineNum":"  113","line":"    return static_cast<int>(63 - __where);"},
{"lineNum":"  114","line":"#else"},
{"lineNum":"  115","line":"  // Win32 doesn\'t have _BitScanReverse64 so emulate it with two 32 bit calls."},
{"lineNum":"  116","line":"  if (_BitScanReverse(&__where, static_cast<unsigned long>(__x >> 32)))"},
{"lineNum":"  117","line":"    return static_cast<int>(63 - (__where + 32));"},
{"lineNum":"  118","line":"  if (_BitScanReverse(&__where, static_cast<unsigned long>(__x)))"},
{"lineNum":"  119","line":"    return static_cast<int>(63 - __where);"},
{"lineNum":"  120","line":"#endif"},
{"lineNum":"  121","line":"  return 64; // Undefined Behavior."},
{"lineNum":"  122","line":"}"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"inline _LIBCPP_INLINE_VISIBILITY int __libcpp_popcount(unsigned __x) {"},
{"lineNum":"  125","line":"  static_assert(sizeof(unsigned) == 4, \"\");"},
{"lineNum":"  126","line":"  return __popcnt(__x);"},
{"lineNum":"  127","line":"}"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"inline _LIBCPP_INLINE_VISIBILITY int __libcpp_popcount(unsigned long __x) {"},
{"lineNum":"  130","line":"  static_assert(sizeof(unsigned long) == 4, \"\");"},
{"lineNum":"  131","line":"  return __popcnt(__x);"},
{"lineNum":"  132","line":"}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"inline _LIBCPP_INLINE_VISIBILITY int __libcpp_popcount(unsigned long long __x) {"},
{"lineNum":"  135","line":"  static_assert(sizeof(unsigned long long) == 8, \"\");"},
{"lineNum":"  136","line":"  return __popcnt64(__x);"},
{"lineNum":"  137","line":"}"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"#endif // _LIBCPP_COMPILER_MSVC"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"#endif // _LIBCPP___BITS"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
