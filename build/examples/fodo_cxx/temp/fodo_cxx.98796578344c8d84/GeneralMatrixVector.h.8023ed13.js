var data = {lines:[
{"lineNum":"    1","line":"// This file is part of Eigen, a lightweight C++ template library"},
{"lineNum":"    2","line":"// for linear algebra."},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Copyright (C) 2008-2016 Gael Guennebaud <gael.guennebaud@inria.fr>"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// This Source Code Form is subject to the terms of the Mozilla"},
{"lineNum":"    7","line":"// Public License v. 2.0. If a copy of the MPL was not distributed"},
{"lineNum":"    8","line":"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/."},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef EIGEN_GENERAL_MATRIX_VECTOR_H"},
{"lineNum":"   11","line":"#define EIGEN_GENERAL_MATRIX_VECTOR_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include \"../InternalHeaderCheck.h\""},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"namespace Eigen {"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"namespace internal {"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"enum GEMVPacketSizeType {"},
{"lineNum":"   20","line":"  GEMVPacketFull = 0,"},
{"lineNum":"   21","line":"  GEMVPacketHalf,"},
{"lineNum":"   22","line":"  GEMVPacketQuarter"},
{"lineNum":"   23","line":"};"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"template <int N, typename T1, typename T2, typename T3>"},
{"lineNum":"   26","line":"struct gemv_packet_cond { typedef T3 type; };"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"template <typename T1, typename T2, typename T3>"},
{"lineNum":"   29","line":"struct gemv_packet_cond<GEMVPacketFull, T1, T2, T3> { typedef T1 type; };"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"template <typename T1, typename T2, typename T3>"},
{"lineNum":"   32","line":"struct gemv_packet_cond<GEMVPacketHalf, T1, T2, T3> { typedef T2 type; };"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"template<typename LhsScalar, typename RhsScalar, int PacketSize_=GEMVPacketFull>"},
{"lineNum":"   35","line":"class gemv_traits"},
{"lineNum":"   36","line":"{"},
{"lineNum":"   37","line":"  typedef typename ScalarBinaryOpTraits<LhsScalar, RhsScalar>::ReturnType ResScalar;"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"#define PACKET_DECL_COND_PREFIX(prefix, name, packet_size)                        \\"},
{"lineNum":"   40","line":"  typedef typename gemv_packet_cond<packet_size,                                  \\"},
{"lineNum":"   41","line":"                                    typename packet_traits<name ## Scalar>::type, \\"},
{"lineNum":"   42","line":"                                    typename packet_traits<name ## Scalar>::half, \\"},
{"lineNum":"   43","line":"                                    typename unpacket_traits<typename packet_traits<name ## Scalar>::half>::half>::type \\"},
{"lineNum":"   44","line":"  prefix ## name ## Packet"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"  PACKET_DECL_COND_PREFIX(_, Lhs, PacketSize_);"},
{"lineNum":"   47","line":"  PACKET_DECL_COND_PREFIX(_, Rhs, PacketSize_);"},
{"lineNum":"   48","line":"  PACKET_DECL_COND_PREFIX(_, Res, PacketSize_);"},
{"lineNum":"   49","line":"#undef PACKET_DECL_COND_PREFIX"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"public:"},
{"lineNum":"   52","line":"  enum {"},
{"lineNum":"   53","line":"        Vectorizable = unpacket_traits<_LhsPacket>::vectorizable &&"},
{"lineNum":"   54","line":"        unpacket_traits<_RhsPacket>::vectorizable &&"},
{"lineNum":"   55","line":"        int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size),"},
{"lineNum":"   56","line":"        LhsPacketSize = Vectorizable ? unpacket_traits<_LhsPacket>::size : 1,"},
{"lineNum":"   57","line":"        RhsPacketSize = Vectorizable ? unpacket_traits<_RhsPacket>::size : 1,"},
{"lineNum":"   58","line":"        ResPacketSize = Vectorizable ? unpacket_traits<_ResPacket>::size : 1"},
{"lineNum":"   59","line":"  };"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"  typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;"},
{"lineNum":"   62","line":"  typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;"},
{"lineNum":"   63","line":"  typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;"},
{"lineNum":"   64","line":"};"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"/* Optimized col-major matrix * vector product:"},
{"lineNum":"   68","line":" * This algorithm processes the matrix per vertical panels,"},
{"lineNum":"   69","line":" * which are then processed horizontally per chunck of 8*PacketSize x 1 vertical segments."},
{"lineNum":"   70","line":" *"},
{"lineNum":"   71","line":" * Mixing type logic: C += alpha * A * B"},
{"lineNum":"   72","line":" *  |  A  |  B  |alpha| comments"},
{"lineNum":"   73","line":" *  |real |cplx |cplx | no vectorization"},
{"lineNum":"   74","line":" *  |real |cplx |real | alpha is converted to a cplx when calling the run function, no vectorization"},
{"lineNum":"   75","line":" *  |cplx |real |cplx | invalid, the caller has to do tmp: = A * B; C += alpha*tmp"},
{"lineNum":"   76","line":" *  |cplx |real |real | optimal case, vectorization possible via real-cplx mul"},
{"lineNum":"   77","line":" *"},
{"lineNum":"   78","line":" * The same reasoning apply for the transposed case."},
{"lineNum":"   79","line":" */"},
{"lineNum":"   80","line":"template<typename Index, typename LhsScalar, typename LhsMapper, bool ConjugateLhs, typename RhsScalar, typename RhsMapper, bool ConjugateRhs, int Version>"},
{"lineNum":"   81","line":"struct general_matrix_vector_product<Index,LhsScalar,LhsMapper,ColMajor,ConjugateLhs,RhsScalar,RhsMapper,ConjugateRhs,Version>"},
{"lineNum":"   82","line":"{"},
{"lineNum":"   83","line":"  typedef gemv_traits<LhsScalar,RhsScalar> Traits;"},
{"lineNum":"   84","line":"  typedef gemv_traits<LhsScalar,RhsScalar,GEMVPacketHalf> HalfTraits;"},
{"lineNum":"   85","line":"  typedef gemv_traits<LhsScalar,RhsScalar,GEMVPacketQuarter> QuarterTraits;"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"  typedef typename ScalarBinaryOpTraits<LhsScalar, RhsScalar>::ReturnType ResScalar;"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"  typedef typename Traits::LhsPacket LhsPacket;"},
{"lineNum":"   90","line":"  typedef typename Traits::RhsPacket RhsPacket;"},
{"lineNum":"   91","line":"  typedef typename Traits::ResPacket ResPacket;"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"  typedef typename HalfTraits::LhsPacket LhsPacketHalf;"},
{"lineNum":"   94","line":"  typedef typename HalfTraits::RhsPacket RhsPacketHalf;"},
{"lineNum":"   95","line":"  typedef typename HalfTraits::ResPacket ResPacketHalf;"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"  typedef typename QuarterTraits::LhsPacket LhsPacketQuarter;"},
{"lineNum":"   98","line":"  typedef typename QuarterTraits::RhsPacket RhsPacketQuarter;"},
{"lineNum":"   99","line":"  typedef typename QuarterTraits::ResPacket ResPacketQuarter;"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE static void run("},
{"lineNum":"  102","line":"  Index rows, Index cols,"},
{"lineNum":"  103","line":"  const LhsMapper& lhs,"},
{"lineNum":"  104","line":"  const RhsMapper& rhs,"},
{"lineNum":"  105","line":"        ResScalar* res, Index resIncr,"},
{"lineNum":"  106","line":"  RhsScalar alpha);"},
{"lineNum":"  107","line":"};"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"template<typename Index, typename LhsScalar, typename LhsMapper, bool ConjugateLhs, typename RhsScalar, typename RhsMapper, bool ConjugateRhs, int Version>"},
{"lineNum":"  110","line":"EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE void general_matrix_vector_product<Index,LhsScalar,LhsMapper,ColMajor,ConjugateLhs,RhsScalar,RhsMapper,ConjugateRhs,Version>::run("},
{"lineNum":"  111","line":"  Index rows, Index cols,"},
{"lineNum":"  112","line":"  const LhsMapper& alhs,"},
{"lineNum":"  113","line":"  const RhsMapper& rhs,"},
{"lineNum":"  114","line":"        ResScalar* res, Index resIncr,"},
{"lineNum":"  115","line":"  RhsScalar alpha)"},
{"lineNum":"  116","line":"{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  117","line":"  EIGEN_UNUSED_VARIABLE(resIncr);"},
{"lineNum":"  118","line":"  eigen_internal_assert(resIncr==1);"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"  // The following copy tells the compiler that lhs\'s attributes are not modified outside this function"},
{"lineNum":"  121","line":"  // This helps GCC to generate propoer code."},
{"lineNum":"  122","line":"  LhsMapper lhs(alhs);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"  conj_helper<LhsScalar,RhsScalar,ConjugateLhs,ConjugateRhs> cj;"},
{"lineNum":"  125","line":"  conj_helper<LhsPacket,RhsPacket,ConjugateLhs,ConjugateRhs> pcj;"},
{"lineNum":"  126","line":"  conj_helper<LhsPacketHalf,RhsPacketHalf,ConjugateLhs,ConjugateRhs> pcj_half;"},
{"lineNum":"  127","line":"  conj_helper<LhsPacketQuarter,RhsPacketQuarter,ConjugateLhs,ConjugateRhs> pcj_quarter;"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"  const Index lhsStride = lhs.stride();"},
{"lineNum":"  130","line":"  // TODO: for padded aligned inputs, we could enable aligned reads"},
{"lineNum":"  131","line":"  enum { LhsAlignment = Unaligned,"},
{"lineNum":"  132","line":"         ResPacketSize = Traits::ResPacketSize,"},
{"lineNum":"  133","line":"         ResPacketSizeHalf = HalfTraits::ResPacketSize,"},
{"lineNum":"  134","line":"         ResPacketSizeQuarter = QuarterTraits::ResPacketSize,"},
{"lineNum":"  135","line":"         LhsPacketSize = Traits::LhsPacketSize,"},
{"lineNum":"  136","line":"         HasHalf = (int)ResPacketSizeHalf < (int)ResPacketSize,"},
{"lineNum":"  137","line":"         HasQuarter = (int)ResPacketSizeQuarter < (int)ResPacketSizeHalf"},
{"lineNum":"  138","line":"  };"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"  const Index n8 = rows-8*ResPacketSize+1;"},
{"lineNum":"  141","line":"  const Index n4 = rows-4*ResPacketSize+1;"},
{"lineNum":"  142","line":"  const Index n3 = rows-3*ResPacketSize+1;"},
{"lineNum":"  143","line":"  const Index n2 = rows-2*ResPacketSize+1;"},
{"lineNum":"  144","line":"  const Index n1 = rows-1*ResPacketSize+1;"},
{"lineNum":"  145","line":"  const Index n_half = rows-1*ResPacketSizeHalf+1;"},
{"lineNum":"  146","line":"  const Index n_quarter = rows-1*ResPacketSizeQuarter+1;"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"  // TODO: improve the following heuristic:"},
{"lineNum":"  149","line":"  const Index block_cols = cols<128 ? cols : (lhsStride*sizeof(LhsScalar)<32000?16:4);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  150","line":"  ResPacket palpha = pset1<ResPacket>(alpha);"},
{"lineNum":"  151","line":"  ResPacketHalf palpha_half = pset1<ResPacketHalf>(alpha);"},
{"lineNum":"  152","line":"  ResPacketQuarter palpha_quarter = pset1<ResPacketQuarter>(alpha);"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"  for(Index j2=0; j2<cols; j2+=block_cols)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  155","line":"  {"},
{"lineNum":"  156","line":"    Index jend = numext::mini(j2+block_cols,cols);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  157","line":"    Index i=0;"},
{"lineNum":"  158","line":"    for(; i<n8; i+=ResPacketSize*8)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  159","line":"    {"},
{"lineNum":"  160","line":"      ResPacket c0 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  161","line":"                c1 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  162","line":"                c2 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  163","line":"                c3 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  164","line":"                c4 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  165","line":"                c5 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  166","line":"                c6 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  167","line":"                c7 = pset1<ResPacket>(ResScalar(0));"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"      for(Index j=j2; j<jend; j+=1)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  170","line":"      {"},
{"lineNum":"  171","line":"        RhsPacket b0 = pset1<RhsPacket>(rhs(j,0));"},
{"lineNum":"  172","line":"        c0 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*0,j),b0,c0);"},
{"lineNum":"  173","line":"        c1 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*1,j),b0,c1);"},
{"lineNum":"  174","line":"        c2 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*2,j),b0,c2);"},
{"lineNum":"  175","line":"        c3 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*3,j),b0,c3);"},
{"lineNum":"  176","line":"        c4 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*4,j),b0,c4);"},
{"lineNum":"  177","line":"        c5 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*5,j),b0,c5);"},
{"lineNum":"  178","line":"        c6 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*6,j),b0,c6);"},
{"lineNum":"  179","line":"        c7 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*7,j),b0,c7);"},
{"lineNum":"  180","line":"      }"},
{"lineNum":"  181","line":"      pstoreu(res+i+ResPacketSize*0, pmadd(c0,palpha,ploadu<ResPacket>(res+i+ResPacketSize*0)));"},
{"lineNum":"  182","line":"      pstoreu(res+i+ResPacketSize*1, pmadd(c1,palpha,ploadu<ResPacket>(res+i+ResPacketSize*1)));"},
{"lineNum":"  183","line":"      pstoreu(res+i+ResPacketSize*2, pmadd(c2,palpha,ploadu<ResPacket>(res+i+ResPacketSize*2)));"},
{"lineNum":"  184","line":"      pstoreu(res+i+ResPacketSize*3, pmadd(c3,palpha,ploadu<ResPacket>(res+i+ResPacketSize*3)));"},
{"lineNum":"  185","line":"      pstoreu(res+i+ResPacketSize*4, pmadd(c4,palpha,ploadu<ResPacket>(res+i+ResPacketSize*4)));"},
{"lineNum":"  186","line":"      pstoreu(res+i+ResPacketSize*5, pmadd(c5,palpha,ploadu<ResPacket>(res+i+ResPacketSize*5)));"},
{"lineNum":"  187","line":"      pstoreu(res+i+ResPacketSize*6, pmadd(c6,palpha,ploadu<ResPacket>(res+i+ResPacketSize*6)));"},
{"lineNum":"  188","line":"      pstoreu(res+i+ResPacketSize*7, pmadd(c7,palpha,ploadu<ResPacket>(res+i+ResPacketSize*7)));"},
{"lineNum":"  189","line":"    }"},
{"lineNum":"  190","line":"    if(i<n4)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  191","line":"    {"},
{"lineNum":"  192","line":"      ResPacket c0 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  193","line":"                c1 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  194","line":"                c2 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  195","line":"                c3 = pset1<ResPacket>(ResScalar(0));"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"      for(Index j=j2; j<jend; j+=1)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  198","line":"      {"},
{"lineNum":"  199","line":"        RhsPacket b0 = pset1<RhsPacket>(rhs(j,0));"},
{"lineNum":"  200","line":"        c0 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*0,j),b0,c0);"},
{"lineNum":"  201","line":"        c1 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*1,j),b0,c1);"},
{"lineNum":"  202","line":"        c2 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*2,j),b0,c2);"},
{"lineNum":"  203","line":"        c3 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*3,j),b0,c3);"},
{"lineNum":"  204","line":"      }"},
{"lineNum":"  205","line":"      pstoreu(res+i+ResPacketSize*0, pmadd(c0,palpha,ploadu<ResPacket>(res+i+ResPacketSize*0)));"},
{"lineNum":"  206","line":"      pstoreu(res+i+ResPacketSize*1, pmadd(c1,palpha,ploadu<ResPacket>(res+i+ResPacketSize*1)));"},
{"lineNum":"  207","line":"      pstoreu(res+i+ResPacketSize*2, pmadd(c2,palpha,ploadu<ResPacket>(res+i+ResPacketSize*2)));"},
{"lineNum":"  208","line":"      pstoreu(res+i+ResPacketSize*3, pmadd(c3,palpha,ploadu<ResPacket>(res+i+ResPacketSize*3)));"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"      i+=ResPacketSize*4;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  211","line":"    }"},
{"lineNum":"  212","line":"    if(i<n3)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  213","line":"    {"},
{"lineNum":"  214","line":"      ResPacket c0 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  215","line":"                c1 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  216","line":"                c2 = pset1<ResPacket>(ResScalar(0));"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"      for(Index j=j2; j<jend; j+=1)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  219","line":"      {"},
{"lineNum":"  220","line":"        RhsPacket b0 = pset1<RhsPacket>(rhs(j,0));"},
{"lineNum":"  221","line":"        c0 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*0,j),b0,c0);"},
{"lineNum":"  222","line":"        c1 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*1,j),b0,c1);"},
{"lineNum":"  223","line":"        c2 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*2,j),b0,c2);"},
{"lineNum":"  224","line":"      }"},
{"lineNum":"  225","line":"      pstoreu(res+i+ResPacketSize*0, pmadd(c0,palpha,ploadu<ResPacket>(res+i+ResPacketSize*0)));"},
{"lineNum":"  226","line":"      pstoreu(res+i+ResPacketSize*1, pmadd(c1,palpha,ploadu<ResPacket>(res+i+ResPacketSize*1)));"},
{"lineNum":"  227","line":"      pstoreu(res+i+ResPacketSize*2, pmadd(c2,palpha,ploadu<ResPacket>(res+i+ResPacketSize*2)));"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"      i+=ResPacketSize*3;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  230","line":"    }"},
{"lineNum":"  231","line":"    if(i<n2)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  232","line":"    {"},
{"lineNum":"  233","line":"      ResPacket c0 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  234","line":"                c1 = pset1<ResPacket>(ResScalar(0));"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"      for(Index j=j2; j<jend; j+=1)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  237","line":"      {"},
{"lineNum":"  238","line":"        RhsPacket b0 = pset1<RhsPacket>(rhs(j,0));"},
{"lineNum":"  239","line":"        c0 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*0,j),b0,c0);"},
{"lineNum":"  240","line":"        c1 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*1,j),b0,c1);"},
{"lineNum":"  241","line":"      }"},
{"lineNum":"  242","line":"      pstoreu(res+i+ResPacketSize*0, pmadd(c0,palpha,ploadu<ResPacket>(res+i+ResPacketSize*0)));"},
{"lineNum":"  243","line":"      pstoreu(res+i+ResPacketSize*1, pmadd(c1,palpha,ploadu<ResPacket>(res+i+ResPacketSize*1)));"},
{"lineNum":"  244","line":"      i+=ResPacketSize*2;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  245","line":"    }"},
{"lineNum":"  246","line":"    if(i<n1)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  247","line":"    {"},
{"lineNum":"  248","line":"      ResPacket c0 = pset1<ResPacket>(ResScalar(0));"},
{"lineNum":"  249","line":"      for(Index j=j2; j<jend; j+=1)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  250","line":"      {"},
{"lineNum":"  251","line":"        RhsPacket b0 = pset1<RhsPacket>(rhs(j,0));"},
{"lineNum":"  252","line":"        c0 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+0,j),b0,c0);"},
{"lineNum":"  253","line":"      }"},
{"lineNum":"  254","line":"      pstoreu(res+i+ResPacketSize*0, pmadd(c0,palpha,ploadu<ResPacket>(res+i+ResPacketSize*0)));"},
{"lineNum":"  255","line":"      i+=ResPacketSize;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  256","line":"    }"},
{"lineNum":"  257","line":"    if(HasHalf && i<n_half)"},
{"lineNum":"  258","line":"    {"},
{"lineNum":"  259","line":"      ResPacketHalf c0 = pset1<ResPacketHalf>(ResScalar(0));"},
{"lineNum":"  260","line":"      for(Index j=j2; j<jend; j+=1)"},
{"lineNum":"  261","line":"      {"},
{"lineNum":"  262","line":"        RhsPacketHalf b0 = pset1<RhsPacketHalf>(rhs(j,0));"},
{"lineNum":"  263","line":"        c0 = pcj_half.pmadd(lhs.template load<LhsPacketHalf,LhsAlignment>(i+0,j),b0,c0);"},
{"lineNum":"  264","line":"      }"},
{"lineNum":"  265","line":"      pstoreu(res+i+ResPacketSizeHalf*0, pmadd(c0,palpha_half,ploadu<ResPacketHalf>(res+i+ResPacketSizeHalf*0)));"},
{"lineNum":"  266","line":"      i+=ResPacketSizeHalf;"},
{"lineNum":"  267","line":"    }"},
{"lineNum":"  268","line":"    if(HasQuarter && i<n_quarter)"},
{"lineNum":"  269","line":"    {"},
{"lineNum":"  270","line":"      ResPacketQuarter c0 = pset1<ResPacketQuarter>(ResScalar(0));"},
{"lineNum":"  271","line":"      for(Index j=j2; j<jend; j+=1)"},
{"lineNum":"  272","line":"      {"},
{"lineNum":"  273","line":"        RhsPacketQuarter b0 = pset1<RhsPacketQuarter>(rhs(j,0));"},
{"lineNum":"  274","line":"        c0 = pcj_quarter.pmadd(lhs.template load<LhsPacketQuarter,LhsAlignment>(i+0,j),b0,c0);"},
{"lineNum":"  275","line":"      }"},
{"lineNum":"  276","line":"      pstoreu(res+i+ResPacketSizeQuarter*0, pmadd(c0,palpha_quarter,ploadu<ResPacketQuarter>(res+i+ResPacketSizeQuarter*0)));"},
{"lineNum":"  277","line":"      i+=ResPacketSizeQuarter;"},
{"lineNum":"  278","line":"    }"},
{"lineNum":"  279","line":"    for(;i<rows;++i)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  280","line":"    {"},
{"lineNum":"  281","line":"      ResScalar c0(0);"},
{"lineNum":"  282","line":"      for(Index j=j2; j<jend; j+=1)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  283","line":"        c0 += cj.pmul(lhs(i,j), rhs(j,0));","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  284","line":"      res[i] += alpha*c0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  285","line":"    }"},
{"lineNum":"  286","line":"  }"},
{"lineNum":"  287","line":"}","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"/* Optimized row-major matrix * vector product:"},
{"lineNum":"  290","line":" * This algorithm processes 4 rows at once that allows to both reduce"},
{"lineNum":"  291","line":" * the number of load/stores of the result by a factor 4 and to reduce"},
{"lineNum":"  292","line":" * the instruction dependency. Moreover, we know that all bands have the"},
{"lineNum":"  293","line":" * same alignment pattern."},
{"lineNum":"  294","line":" *"},
{"lineNum":"  295","line":" * Mixing type logic:"},
{"lineNum":"  296","line":" *  - alpha is always a complex (or converted to a complex)"},
{"lineNum":"  297","line":" *  - no vectorization"},
{"lineNum":"  298","line":" */"},
{"lineNum":"  299","line":"template<typename Index, typename LhsScalar, typename LhsMapper, bool ConjugateLhs, typename RhsScalar, typename RhsMapper, bool ConjugateRhs, int Version>"},
{"lineNum":"  300","line":"struct general_matrix_vector_product<Index,LhsScalar,LhsMapper,RowMajor,ConjugateLhs,RhsScalar,RhsMapper,ConjugateRhs,Version>"},
{"lineNum":"  301","line":"{"},
{"lineNum":"  302","line":"  typedef gemv_traits<LhsScalar,RhsScalar> Traits;"},
{"lineNum":"  303","line":"  typedef gemv_traits<LhsScalar,RhsScalar,GEMVPacketHalf> HalfTraits;"},
{"lineNum":"  304","line":"  typedef gemv_traits<LhsScalar,RhsScalar,GEMVPacketQuarter> QuarterTraits;"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"  typedef typename ScalarBinaryOpTraits<LhsScalar, RhsScalar>::ReturnType ResScalar;"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"  typedef typename Traits::LhsPacket LhsPacket;"},
{"lineNum":"  309","line":"  typedef typename Traits::RhsPacket RhsPacket;"},
{"lineNum":"  310","line":"  typedef typename Traits::ResPacket ResPacket;"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"  typedef typename HalfTraits::LhsPacket LhsPacketHalf;"},
{"lineNum":"  313","line":"  typedef typename HalfTraits::RhsPacket RhsPacketHalf;"},
{"lineNum":"  314","line":"  typedef typename HalfTraits::ResPacket ResPacketHalf;"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"  typedef typename QuarterTraits::LhsPacket LhsPacketQuarter;"},
{"lineNum":"  317","line":"  typedef typename QuarterTraits::RhsPacket RhsPacketQuarter;"},
{"lineNum":"  318","line":"  typedef typename QuarterTraits::ResPacket ResPacketQuarter;"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE static void run("},
{"lineNum":"  321","line":"  Index rows, Index cols,"},
{"lineNum":"  322","line":"  const LhsMapper& lhs,"},
{"lineNum":"  323","line":"  const RhsMapper& rhs,"},
{"lineNum":"  324","line":"        ResScalar* res, Index resIncr,"},
{"lineNum":"  325","line":"  ResScalar alpha);"},
{"lineNum":"  326","line":"};"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"template<typename Index, typename LhsScalar, typename LhsMapper, bool ConjugateLhs, typename RhsScalar, typename RhsMapper, bool ConjugateRhs, int Version>"},
{"lineNum":"  329","line":"EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE void general_matrix_vector_product<Index,LhsScalar,LhsMapper,RowMajor,ConjugateLhs,RhsScalar,RhsMapper,ConjugateRhs,Version>::run("},
{"lineNum":"  330","line":"  Index rows, Index cols,"},
{"lineNum":"  331","line":"  const LhsMapper& alhs,"},
{"lineNum":"  332","line":"  const RhsMapper& rhs,"},
{"lineNum":"  333","line":"  ResScalar* res, Index resIncr,"},
{"lineNum":"  334","line":"  ResScalar alpha)"},
{"lineNum":"  335","line":"{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  336","line":"  // The following copy tells the compiler that lhs\'s attributes are not modified outside this function"},
{"lineNum":"  337","line":"  // This helps GCC to generate propoer code."},
{"lineNum":"  338","line":"  LhsMapper lhs(alhs);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"  eigen_internal_assert(rhs.stride()==1);"},
{"lineNum":"  341","line":"  conj_helper<LhsScalar,RhsScalar,ConjugateLhs,ConjugateRhs> cj;"},
{"lineNum":"  342","line":"  conj_helper<LhsPacket,RhsPacket,ConjugateLhs,ConjugateRhs> pcj;"},
{"lineNum":"  343","line":"  conj_helper<LhsPacketHalf,RhsPacketHalf,ConjugateLhs,ConjugateRhs> pcj_half;"},
{"lineNum":"  344","line":"  conj_helper<LhsPacketQuarter,RhsPacketQuarter,ConjugateLhs,ConjugateRhs> pcj_quarter;"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"  // TODO: fine tune the following heuristic. The rationale is that if the matrix is very large,"},
{"lineNum":"  347","line":"  //       processing 8 rows at once might be counter productive wrt cache."},
{"lineNum":"  348","line":"  const Index n8 = lhs.stride()*sizeof(LhsScalar)>32000 ? 0 : rows-7;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  349","line":"  const Index n4 = rows-3;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  350","line":"  const Index n2 = rows-1;"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"  // TODO: for padded aligned inputs, we could enable aligned reads"},
{"lineNum":"  353","line":"  enum { LhsAlignment = Unaligned,"},
{"lineNum":"  354","line":"         ResPacketSize = Traits::ResPacketSize,"},
{"lineNum":"  355","line":"         ResPacketSizeHalf = HalfTraits::ResPacketSize,"},
{"lineNum":"  356","line":"         ResPacketSizeQuarter = QuarterTraits::ResPacketSize,"},
{"lineNum":"  357","line":"         LhsPacketSize = Traits::LhsPacketSize,"},
{"lineNum":"  358","line":"         LhsPacketSizeHalf = HalfTraits::LhsPacketSize,"},
{"lineNum":"  359","line":"         LhsPacketSizeQuarter = QuarterTraits::LhsPacketSize,"},
{"lineNum":"  360","line":"         HasHalf = (int)ResPacketSizeHalf < (int)ResPacketSize,"},
{"lineNum":"  361","line":"         HasQuarter = (int)ResPacketSizeQuarter < (int)ResPacketSizeHalf"},
{"lineNum":"  362","line":"  };"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"  Index i=0;"},
{"lineNum":"  365","line":"  for(; i<n8; i+=8)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  366","line":"  {"},
{"lineNum":"  367","line":"    ResPacket c0 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  368","line":"              c1 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  369","line":"              c2 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  370","line":"              c3 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  371","line":"              c4 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  372","line":"              c5 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  373","line":"              c6 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  374","line":"              c7 = pset1<ResPacket>(ResScalar(0));"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    Index j=0;"},
{"lineNum":"  377","line":"    for(; j+LhsPacketSize<=cols; j+=LhsPacketSize)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  378","line":"    {"},
{"lineNum":"  379","line":"      RhsPacket b0 = rhs.template load<RhsPacket, Unaligned>(j,0);"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"      c0 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+0,j),b0,c0);"},
{"lineNum":"  382","line":"      c1 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+1,j),b0,c1);"},
{"lineNum":"  383","line":"      c2 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+2,j),b0,c2);"},
{"lineNum":"  384","line":"      c3 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+3,j),b0,c3);"},
{"lineNum":"  385","line":"      c4 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+4,j),b0,c4);"},
{"lineNum":"  386","line":"      c5 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+5,j),b0,c5);"},
{"lineNum":"  387","line":"      c6 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+6,j),b0,c6);"},
{"lineNum":"  388","line":"      c7 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+7,j),b0,c7);"},
{"lineNum":"  389","line":"    }"},
{"lineNum":"  390","line":"    ResScalar cc0 = predux(c0);"},
{"lineNum":"  391","line":"    ResScalar cc1 = predux(c1);"},
{"lineNum":"  392","line":"    ResScalar cc2 = predux(c2);"},
{"lineNum":"  393","line":"    ResScalar cc3 = predux(c3);"},
{"lineNum":"  394","line":"    ResScalar cc4 = predux(c4);"},
{"lineNum":"  395","line":"    ResScalar cc5 = predux(c5);"},
{"lineNum":"  396","line":"    ResScalar cc6 = predux(c6);"},
{"lineNum":"  397","line":"    ResScalar cc7 = predux(c7);"},
{"lineNum":"  398","line":"    for(; j<cols; ++j)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  399","line":"    {"},
{"lineNum":"  400","line":"      RhsScalar b0 = rhs(j,0);"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"      cc0 += cj.pmul(lhs(i+0,j), b0);","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  403","line":"      cc1 += cj.pmul(lhs(i+1,j), b0);"},
{"lineNum":"  404","line":"      cc2 += cj.pmul(lhs(i+2,j), b0);"},
{"lineNum":"  405","line":"      cc3 += cj.pmul(lhs(i+3,j), b0);"},
{"lineNum":"  406","line":"      cc4 += cj.pmul(lhs(i+4,j), b0);"},
{"lineNum":"  407","line":"      cc5 += cj.pmul(lhs(i+5,j), b0);"},
{"lineNum":"  408","line":"      cc6 += cj.pmul(lhs(i+6,j), b0);"},
{"lineNum":"  409","line":"      cc7 += cj.pmul(lhs(i+7,j), b0);"},
{"lineNum":"  410","line":"    }"},
{"lineNum":"  411","line":"    res[(i+0)*resIncr] += alpha*cc0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  412","line":"    res[(i+1)*resIncr] += alpha*cc1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  413","line":"    res[(i+2)*resIncr] += alpha*cc2;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  414","line":"    res[(i+3)*resIncr] += alpha*cc3;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  415","line":"    res[(i+4)*resIncr] += alpha*cc4;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  416","line":"    res[(i+5)*resIncr] += alpha*cc5;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  417","line":"    res[(i+6)*resIncr] += alpha*cc6;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  418","line":"    res[(i+7)*resIncr] += alpha*cc7;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  419","line":"  }"},
{"lineNum":"  420","line":"  for(; i<n4; i+=4)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  421","line":"  {"},
{"lineNum":"  422","line":"    ResPacket c0 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  423","line":"              c1 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  424","line":"              c2 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  425","line":"              c3 = pset1<ResPacket>(ResScalar(0));"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"    Index j=0;"},
{"lineNum":"  428","line":"    for(; j+LhsPacketSize<=cols; j+=LhsPacketSize)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  429","line":"    {"},
{"lineNum":"  430","line":"      RhsPacket b0 = rhs.template load<RhsPacket, Unaligned>(j,0);"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"      c0 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+0,j),b0,c0);"},
{"lineNum":"  433","line":"      c1 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+1,j),b0,c1);"},
{"lineNum":"  434","line":"      c2 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+2,j),b0,c2);"},
{"lineNum":"  435","line":"      c3 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+3,j),b0,c3);"},
{"lineNum":"  436","line":"    }"},
{"lineNum":"  437","line":"    ResScalar cc0 = predux(c0);"},
{"lineNum":"  438","line":"    ResScalar cc1 = predux(c1);"},
{"lineNum":"  439","line":"    ResScalar cc2 = predux(c2);"},
{"lineNum":"  440","line":"    ResScalar cc3 = predux(c3);"},
{"lineNum":"  441","line":"    for(; j<cols; ++j)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  442","line":"    {"},
{"lineNum":"  443","line":"      RhsScalar b0 = rhs(j,0);"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"      cc0 += cj.pmul(lhs(i+0,j), b0);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  446","line":"      cc1 += cj.pmul(lhs(i+1,j), b0);"},
{"lineNum":"  447","line":"      cc2 += cj.pmul(lhs(i+2,j), b0);"},
{"lineNum":"  448","line":"      cc3 += cj.pmul(lhs(i+3,j), b0);"},
{"lineNum":"  449","line":"    }"},
{"lineNum":"  450","line":"    res[(i+0)*resIncr] += alpha*cc0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  451","line":"    res[(i+1)*resIncr] += alpha*cc1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  452","line":"    res[(i+2)*resIncr] += alpha*cc2;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  453","line":"    res[(i+3)*resIncr] += alpha*cc3;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  454","line":"  }"},
{"lineNum":"  455","line":"  for(; i<n2; i+=2)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  456","line":"  {"},
{"lineNum":"  457","line":"    ResPacket c0 = pset1<ResPacket>(ResScalar(0)),"},
{"lineNum":"  458","line":"              c1 = pset1<ResPacket>(ResScalar(0));"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"    Index j=0;"},
{"lineNum":"  461","line":"    for(; j+LhsPacketSize<=cols; j+=LhsPacketSize)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  462","line":"    {"},
{"lineNum":"  463","line":"      RhsPacket b0 = rhs.template load<RhsPacket, Unaligned>(j,0);"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"      c0 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+0,j),b0,c0);"},
{"lineNum":"  466","line":"      c1 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+1,j),b0,c1);"},
{"lineNum":"  467","line":"    }"},
{"lineNum":"  468","line":"    ResScalar cc0 = predux(c0);"},
{"lineNum":"  469","line":"    ResScalar cc1 = predux(c1);"},
{"lineNum":"  470","line":"    for(; j<cols; ++j)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  471","line":"    {"},
{"lineNum":"  472","line":"      RhsScalar b0 = rhs(j,0);"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"      cc0 += cj.pmul(lhs(i+0,j), b0);","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  475","line":"      cc1 += cj.pmul(lhs(i+1,j), b0);"},
{"lineNum":"  476","line":"    }"},
{"lineNum":"  477","line":"    res[(i+0)*resIncr] += alpha*cc0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  478","line":"    res[(i+1)*resIncr] += alpha*cc1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  479","line":"  }"},
{"lineNum":"  480","line":"  for(; i<rows; ++i)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  481","line":"  {"},
{"lineNum":"  482","line":"    ResPacket c0 = pset1<ResPacket>(ResScalar(0));"},
{"lineNum":"  483","line":"    ResPacketHalf c0_h = pset1<ResPacketHalf>(ResScalar(0));"},
{"lineNum":"  484","line":"    ResPacketQuarter c0_q = pset1<ResPacketQuarter>(ResScalar(0));"},
{"lineNum":"  485","line":"    Index j=0;"},
{"lineNum":"  486","line":"    for(; j+LhsPacketSize<=cols; j+=LhsPacketSize)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  487","line":"    {"},
{"lineNum":"  488","line":"      RhsPacket b0 = rhs.template load<RhsPacket,Unaligned>(j,0);"},
{"lineNum":"  489","line":"      c0 = pcj.pmadd(lhs.template load<LhsPacket,LhsAlignment>(i,j),b0,c0);"},
{"lineNum":"  490","line":"    }"},
{"lineNum":"  491","line":"    ResScalar cc0 = predux(c0);"},
{"lineNum":"  492","line":"    if (HasHalf) {"},
{"lineNum":"  493","line":"      for(; j+LhsPacketSizeHalf<=cols; j+=LhsPacketSizeHalf)"},
{"lineNum":"  494","line":"        {"},
{"lineNum":"  495","line":"          RhsPacketHalf b0 = rhs.template load<RhsPacketHalf,Unaligned>(j,0);"},
{"lineNum":"  496","line":"          c0_h = pcj_half.pmadd(lhs.template load<LhsPacketHalf,LhsAlignment>(i,j),b0,c0_h);"},
{"lineNum":"  497","line":"        }"},
{"lineNum":"  498","line":"      cc0 += predux(c0_h);"},
{"lineNum":"  499","line":"    }"},
{"lineNum":"  500","line":"    if (HasQuarter) {"},
{"lineNum":"  501","line":"      for(; j+LhsPacketSizeQuarter<=cols; j+=LhsPacketSizeQuarter)"},
{"lineNum":"  502","line":"        {"},
{"lineNum":"  503","line":"          RhsPacketQuarter b0 = rhs.template load<RhsPacketQuarter,Unaligned>(j,0);"},
{"lineNum":"  504","line":"          c0_q = pcj_quarter.pmadd(lhs.template load<LhsPacketQuarter,LhsAlignment>(i,j),b0,c0_q);"},
{"lineNum":"  505","line":"        }"},
{"lineNum":"  506","line":"      cc0 += predux(c0_q);"},
{"lineNum":"  507","line":"    }"},
{"lineNum":"  508","line":"    for(; j<cols; ++j)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  509","line":"    {"},
{"lineNum":"  510","line":"      cc0 += cj.pmul(lhs(i,j), rhs(j,0));","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  511","line":"    }"},
{"lineNum":"  512","line":"    res[i*resIncr] += alpha*cc0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  513","line":"  }"},
{"lineNum":"  514","line":"}","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"} // end namespace internal"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"} // end namespace Eigen"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"#endif // EIGEN_GENERAL_MATRIX_VECTOR_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 60, "covered" : 0,};
var merged_data = [];
