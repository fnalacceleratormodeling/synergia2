var data = {lines:[
{"lineNum":"    1","line":"#ifndef PROPAGATOR_H_"},
{"lineNum":"    2","line":"#define PROPAGATOR_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"synergia/lattice/lattice.h\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"//#include \"synergia/simulation/bunch_simulator.h\""},
{"lineNum":"    7","line":"#include \"synergia/simulation/step.h\""},
{"lineNum":"    8","line":"#include \"synergia/simulation/stepper.h\""},
{"lineNum":"    9","line":"#include \"synergia/simulation/independent_stepper_elements.h\""},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#include \"synergia/utils/cereal.h\""},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <cereal/types/memory.hpp>"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"class Bunch_simulator;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"class Propagator","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   18","line":"{"},
{"lineNum":"   19","line":"public:"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"    static const int PRE_TURN   = -1;"},
{"lineNum":"   22","line":"    static const int FINAL_STEP = -1;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    struct Slice_iterator"},
{"lineNum":"   25","line":"    {"},
{"lineNum":"   26","line":"        using iterator_category = std::forward_iterator_tag;"},
{"lineNum":"   27","line":"        using difference_type = int;"},
{"lineNum":"   28","line":"        using value_type = Lattice_element_slice;"},
{"lineNum":"   29","line":"        using pointer    = Lattice_element_slice*;"},
{"lineNum":"   30","line":"        using reference  = Lattice_element_slice&;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"        Slice_iterator(Propagator& p) : prop(p) { }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"        reference operator*() const { return *slice_it; }"},
{"lineNum":"   35","line":"        pointer operator->() { return &(*slice_it); }"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"        void first_slice()"},
{"lineNum":"   38","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   39","line":"            step_it = prop.steps.begin();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   40","line":"            step_end = prop.steps.end();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"            if (step_it == prop.steps.end()) return;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"            opr_it = step_it->operators.begin();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   45","line":"            opr_end = step_it->operators.end();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"            if(is_valid_opr())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"            {"},
{"lineNum":"   49","line":"                auto o = dynamic_cast<Independent_operator*>(opr_it->get());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   50","line":"                slice_it = o->slices.begin();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   51","line":"                slice_end = o->slices.end();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   52","line":"                return;"},
{"lineNum":"   53","line":"            }"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"            advance_to_next_slice();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   56","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"        void end()"},
{"lineNum":"   59","line":"        {"},
{"lineNum":"   60","line":"            step_it = prop.steps.end();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":"        }"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"        Slice_iterator& operator++()"},
{"lineNum":"   64","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"            ++slice_it;"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"            auto o = dynamic_cast<Independent_operator*>(opr_it->get());","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   68","line":"            if(slice_it == o->slices.end())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   69","line":"                advance_to_next_slice();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"            return *this;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   72","line":"        }"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"        void advance_to_next_slice()"},
{"lineNum":"   75","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   76","line":"            while(step_it != prop.steps.end())","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   77","line":"            {"},
{"lineNum":"   78","line":"                if (opr_it == step_it->operators.end())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   79","line":"                {"},
{"lineNum":"   80","line":"                    ++step_it;"},
{"lineNum":"   81","line":"                    if (step_it == prop.steps.end()) return;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"                    opr_it = step_it->operators.begin();","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   84","line":"                    opr_end = step_it->operators.end();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   85","line":"                }"},
{"lineNum":"   86","line":"                else"},
{"lineNum":"   87","line":"                {"},
{"lineNum":"   88","line":"                    ++opr_it;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"                }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"                if (is_valid_opr())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"                {"},
{"lineNum":"   93","line":"                    auto o = dynamic_cast<Independent_operator*>(opr_it->get());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   94","line":"                    slice_it = o->slices.begin();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   95","line":"                    slice_end = o->slices.end();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   96","line":"                    return;"},
{"lineNum":"   97","line":"                }"},
{"lineNum":"   98","line":"            }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"            // the step is now at the end if reached here"},
{"lineNum":"  101","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"        bool is_valid_opr()"},
{"lineNum":"  104","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"            if (opr_it == step_it->operators.end()) return false;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"            auto o = dynamic_cast<Independent_operator*>(opr_it->get());","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  108","line":"            if (o && o->slices.size()) return true;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"        // iterator++"},
{"lineNum":"  114","line":"        Slice_iterator operator++(int)"},
{"lineNum":"  115","line":"        {"},
{"lineNum":"  116","line":"            Slice_iterator tmp = *this;"},
{"lineNum":"  117","line":"            ++(*this);"},
{"lineNum":"  118","line":"            return tmp;"},
{"lineNum":"  119","line":"        }"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"        friend bool"},
{"lineNum":"  122","line":"        operator==(const Slice_iterator& a, const Slice_iterator& b)"},
{"lineNum":"  123","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"            if (&a.prop != &b.prop)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  125","line":"                return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"            if (a.step_it != b.step_it)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"                return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"            if (a.step_it != a.step_end &&","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  131","line":"                b.step_it != b.step_end &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  132","line":"                a.opr_it  != b.opr_it)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  133","line":"                return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"            if (a.step_it != a.step_end &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  136","line":"                b.step_it != b.step_end &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  137","line":"                a.opr_it  != a.opr_end &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  138","line":"                b.opr_it  != b.opr_end &&","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  139","line":"                a.slice_it!= b.slice_it)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":"                return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"            return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"        friend bool"},
{"lineNum":"  146","line":"        operator!=(const Slice_iterator& a, const Slice_iterator& b)"},
{"lineNum":"  147","line":"        { return !(a==b); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    private:"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"        Propagator& prop;"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"        std::vector<Step>::iterator step_it;"},
{"lineNum":"  154","line":"        std::vector<Step>::iterator step_end;"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"        std::vector<std::shared_ptr<Operator>>::iterator opr_it;"},
{"lineNum":"  157","line":"        std::vector<std::shared_ptr<Operator>>::iterator opr_end;"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"        std::vector<Lattice_element_slice>::iterator slice_it;"},
{"lineNum":"  160","line":"        std::vector<Lattice_element_slice>::iterator slice_end;"},
{"lineNum":"  161","line":"    };"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"    struct Lattice_element_slices"},
{"lineNum":"  165","line":"    {"},
{"lineNum":"  166","line":"        Lattice_element_slices(Propagator& p)"},
{"lineNum":"  167","line":"            : prop(p) { }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"        Slice_iterator begin()"},
{"lineNum":"  170","line":"        {"},
{"lineNum":"  171","line":"            Slice_iterator it(prop);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  172","line":"            it.first_slice();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  173","line":"            return it;"},
{"lineNum":"  174","line":"        }"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"        Slice_iterator end()"},
{"lineNum":"  177","line":"        {"},
{"lineNum":"  178","line":"            Slice_iterator it(prop);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  179","line":"            it.end();"},
{"lineNum":"  180","line":"            return it;"},
{"lineNum":"  181","line":"        }"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"        Propagator& prop;"},
{"lineNum":"  184","line":"    };"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"private:"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"    Lattice lattice;"},
{"lineNum":"  189","line":"    std::vector<Step> steps;"},
{"lineNum":"  190","line":"    Lattice_element_slices slices;"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    std::unique_ptr<Stepper> stepper_ptr;"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"private:"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"\tvoid do_before_start("},
{"lineNum":"  197","line":"            Bunch_simulator & simulator,"},
{"lineNum":"  198","line":"            Logger & logger);"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"\tvoid do_start_repetition("},
{"lineNum":"  201","line":"            Bunch_simulator & simulator);"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"\tvoid do_turn_end("},
{"lineNum":"  204","line":"            Bunch_simulator & simulator,"},
{"lineNum":"  205","line":"            int turn_count,"},
{"lineNum":"  206","line":"            Logger & logger);"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"\tvoid do_step("},
{"lineNum":"  209","line":"            Bunch_simulator & simulator,"},
{"lineNum":"  210","line":"            Step & step,"},
{"lineNum":"  211","line":"            int step_count,"},
{"lineNum":"  212","line":"            int turn_count,"},
{"lineNum":"  213","line":"            Logger & logger);"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"\tbool check_out_of_particles("},
{"lineNum":"  216","line":"            Bunch_simulator const & simulator,"},
{"lineNum":"  217","line":"            Logger & logger);"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"public:"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    // given lattice and stepper"},
{"lineNum":"  222","line":"    Propagator("},
{"lineNum":"  223","line":"            Lattice const& lattice,"},
{"lineNum":"  224","line":"            Stepper const& stepper = Independent_stepper_elements(1) )"},
{"lineNum":"  225","line":"        : lattice(lattice)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":"        , steps()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  227","line":"        , slices(*this)"},
{"lineNum":"  228","line":"        , stepper_ptr(stepper.clone())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  229","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  230","line":"        this->lattice.update();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  231","line":"        steps = stepper_ptr->apply(this->lattice);"},
{"lineNum":"  232","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    // max_turns: number of turns in this propagate. -1 run to the end"},
{"lineNum":"  235","line":"    void propagate(Bunch_simulator & simulator, Logger & logger, int max_turns = -1);"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    Lattice_element_slices&"},
{"lineNum":"  238","line":"    get_lattice_element_slices()"},
{"lineNum":"  239","line":"    { return slices; }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    std::list<Lattice_element> const&"},
{"lineNum":"  242","line":"    get_lattice_elements()"},
{"lineNum":"  243","line":"    { return lattice.get_elements(); }"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    Lattice&       get_lattice()       { return lattice; }"},
{"lineNum":"  246","line":"    Lattice const& get_lattice() const { return lattice; }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    // print"},
{"lineNum":"  249","line":"    void print_steps(Logger & logger) const"},
{"lineNum":"  250","line":"    { for(auto const & s : steps) s.print(logger); }"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    // dump to a string"},
{"lineNum":"  253","line":"    std::string dump() const"},
{"lineNum":"  254","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"        std::stringstream ss;"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"        {"},
{"lineNum":"  258","line":"            cereal::JSONOutputArchive ar(ss);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  259","line":"            ar(*this);"},
{"lineNum":"  260","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"        return ss.str();"},
{"lineNum":"  263","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    // static method to load from a serialize string to void"},
{"lineNum":"  266","line":"    // the public default constructor"},
{"lineNum":"  267","line":"    static Propagator load_from_string(std::string const& str)"},
{"lineNum":"  268","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"        std::stringstream ss(str);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":"        cereal::JSONInputArchive ar(ss);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"        Propagator p;"},
{"lineNum":"  273","line":"        ar(p);"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"        return p;"},
{"lineNum":"  276","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"private:"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    // default ctor for serialization only"},
{"lineNum":"  281","line":"    Propagator() : lattice(), steps(), slices(*this), stepper_ptr() { }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    friend class cereal::access;"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"    template<class AR>"},
{"lineNum":"  286","line":"    void save(AR & ar) const"},
{"lineNum":"  287","line":"    {"},
{"lineNum":"  288","line":"        ar(CEREAL_NVP(lattice));"},
{"lineNum":"  289","line":"        ar(CEREAL_NVP(stepper_ptr));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  290","line":"    }"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"    template<class AR>"},
{"lineNum":"  293","line":"    void load(AR & ar)"},
{"lineNum":"  294","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  295","line":"        ar(CEREAL_NVP(lattice));"},
{"lineNum":"  296","line":"        ar(CEREAL_NVP(stepper_ptr));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"        lattice.update();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":"        steps = stepper_ptr->apply(lattice);"},
{"lineNum":"  300","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"#if 0"},
{"lineNum":"  303","line":"    Stepper_sptr"},
{"lineNum":"  304","line":"    get_stepper_sptr();"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"    void"},
{"lineNum":"  307","line":"    set_checkpoint_period(int period);"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"    int"},
{"lineNum":"  310","line":"    get_checkpoint_period() const;"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    void"},
{"lineNum":"  313","line":"    set_checkpoint_dir(std::string const& directory_name);"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    std::string const&"},
{"lineNum":"  316","line":"    get_checkpoint_dir() const;"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"    void"},
{"lineNum":"  319","line":"    set_checkpoint_with_xml(bool with_xml);"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    bool"},
{"lineNum":"  322","line":"    get_checkpoint_with_xml() const;"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    void"},
{"lineNum":"  325","line":"    set_final_checkpoint(bool final_checkpoint);"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    bool"},
{"lineNum":"  328","line":"    get_final_checkpoint() const;"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"    void"},
{"lineNum":"  331","line":"    set_concurrent_io(int max);"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    int"},
{"lineNum":"  334","line":"    get_concurrent_io() const;"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"    void"},
{"lineNum":"  337","line":"    set_num_threads(int nt);"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"    int"},
{"lineNum":"  340","line":"    get_num_threads() const;"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"    void"},
{"lineNum":"  343","line":"    propagate(State & state);"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"    /// jfa note: the lifetime of the pointers in state must"},
{"lineNum":"  346","line":"    ///           be managed manually"},
{"lineNum":"  347","line":"    State"},
{"lineNum":"  348","line":"    get_resume_state(std::string const& checkpoint_dir);"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"    void"},
{"lineNum":"  351","line":"    resume( std::string const& checkpoint_dir,"},
{"lineNum":"  352","line":"            bool new_num_turns, int num_turns,"},
{"lineNum":"  353","line":"            bool new_max_turns, int max_turns,"},
{"lineNum":"  354","line":"            bool new_verbosity, int verbosity );"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"    void"},
{"lineNum":"  357","line":"    propagate("},
{"lineNum":"  358","line":"            Bunch_simulator & bunch_simulator,"},
{"lineNum":"  359","line":"            int num_turns,"},
{"lineNum":"  360","line":"            int max_turns = 0,"},
{"lineNum":"  361","line":"            int verbosity = 1 );"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"    void"},
{"lineNum":"  364","line":"    propagate("},
{"lineNum":"  365","line":"            Bunch_simulator & bunch_simulator,"},
{"lineNum":"  366","line":"            Propagate_actions & general_actions,"},
{"lineNum":"  367","line":"            int num_turns,"},
{"lineNum":"  368","line":"            int max_turns = 0,"},
{"lineNum":"  369","line":"            int verbosity = 1 );"},
{"lineNum":"  370","line":"#endif"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"#if 0"},
{"lineNum":"  373","line":"    template<class Archive>"},
{"lineNum":"  374","line":"    void"},
{"lineNum":"  375","line":"    serialize(Archive & ar, const unsigned int version);"},
{"lineNum":"  376","line":"#endif"},
{"lineNum":"  377","line":"};"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"#endif /* PROPAGATOR_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 81, "covered" : 0,};
var merged_data = [];
