var data = {lines:[
{"lineNum":"    1","line":"/*"},
{"lineNum":"    2","line":"//@HEADER"},
{"lineNum":"    3","line":"// ************************************************************************"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"//                        Kokkos v. 3.0"},
{"lineNum":"    6","line":"//       Copyright (2020) National Technology & Engineering"},
{"lineNum":"    7","line":"//               Solutions of Sandia, LLC (NTESS)."},
{"lineNum":"    8","line":"//"},
{"lineNum":"    9","line":"// Under the terms of Contract DE-NA0003525 with NTESS,"},
{"lineNum":"   10","line":"// the U.S. Government retains certain rights in this software."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// Redistribution and use in source and binary forms, with or without"},
{"lineNum":"   13","line":"// modification, are permitted provided that the following conditions are"},
{"lineNum":"   14","line":"// met:"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// 1. Redistributions of source code must retain the above copyright"},
{"lineNum":"   17","line":"// notice, this list of conditions and the following disclaimer."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// 2. Redistributions in binary form must reproduce the above copyright"},
{"lineNum":"   20","line":"// notice, this list of conditions and the following disclaimer in the"},
{"lineNum":"   21","line":"// documentation and/or other materials provided with the distribution."},
{"lineNum":"   22","line":"//"},
{"lineNum":"   23","line":"// 3. Neither the name of the Corporation nor the names of the"},
{"lineNum":"   24","line":"// contributors may be used to endorse or promote products derived from"},
{"lineNum":"   25","line":"// this software without specific prior written permission."},
{"lineNum":"   26","line":"//"},
{"lineNum":"   27","line":"// THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY"},
{"lineNum":"   28","line":"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"},
{"lineNum":"   29","line":"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR"},
{"lineNum":"   30","line":"// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE"},
{"lineNum":"   31","line":"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,"},
{"lineNum":"   32","line":"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,"},
{"lineNum":"   33","line":"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR"},
{"lineNum":"   34","line":"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF"},
{"lineNum":"   35","line":"// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING"},
{"lineNum":"   36","line":"// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"},
{"lineNum":"   37","line":"// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   38","line":"//"},
{"lineNum":"   39","line":"// Questions? Contact Christian R. Trott (crtrott@sandia.gov)"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// ************************************************************************"},
{"lineNum":"   42","line":"//@HEADER"},
{"lineNum":"   43","line":"*/"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifndef KOKKOS_RANDOM_HPP"},
{"lineNum":"   46","line":"#define KOKKOS_RANDOM_HPP"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#include <Kokkos_Core.hpp>"},
{"lineNum":"   49","line":"#include <Kokkos_Complex.hpp>"},
{"lineNum":"   50","line":"#include <cstdio>"},
{"lineNum":"   51","line":"#include <cstdlib>"},
{"lineNum":"   52","line":"#include <cmath>"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"/// \\file Kokkos_Random.hpp"},
{"lineNum":"   55","line":"/// \\brief Pseudorandom number generators"},
{"lineNum":"   56","line":"///"},
{"lineNum":"   57","line":"/// These generators are based on Vigna, Sebastiano (2014). \"An"},
{"lineNum":"   58","line":"/// experimental exploration of Marsaglia\'s xorshift generators,"},
{"lineNum":"   59","line":"/// scrambled.\"  See: http://arxiv.org/abs/1402.6246"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"namespace Kokkos {"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"// clang-format off"},
{"lineNum":"   64","line":"  /*Template functions to get equidistributed random numbers from a generator for a specific Scalar type"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"       template<class Generator,Scalar>"},
{"lineNum":"   67","line":"       struct rand{"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"         //Max value returned by draw(Generator& gen)"},
{"lineNum":"   70","line":"         KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   71","line":"         static Scalar max();"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"         //Returns a value between zero and max()"},
{"lineNum":"   74","line":"         KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   75","line":"         static Scalar draw(Generator& gen);"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"         //Returns a value between zero and range()"},
{"lineNum":"   78","line":"         //Note: for floating point values range can be larger than max()"},
{"lineNum":"   79","line":"         KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   80","line":"         static Scalar draw(Generator& gen, const Scalar& range){}"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"         //Return value between start and end"},
{"lineNum":"   83","line":"         KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   84","line":"         static Scalar draw(Generator& gen, const Scalar& start, const Scalar& end);"},
{"lineNum":"   85","line":"      };"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    The Random number generators themselves have two components a state-pool and the actual generator"},
{"lineNum":"   88","line":"    A state-pool manages a number of generators, so that each active thread is able to grep its own."},
{"lineNum":"   89","line":"    This allows the generation of random numbers which are independent between threads. Note that"},
{"lineNum":"   90","line":"    in contrast to CuRand none of the functions of the pool (or the generator) are collectives,"},
{"lineNum":"   91","line":"    i.e. all functions can be called inside conditionals."},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    template<class Device>"},
{"lineNum":"   94","line":"    class Pool {"},
{"lineNum":"   95","line":"     public:"},
{"lineNum":"   96","line":"      //The Kokkos device type"},
{"lineNum":"   97","line":"      using device_type = Device;"},
{"lineNum":"   98","line":"      //The actual generator type"},
{"lineNum":"   99","line":"      using generator_type = Generator<Device>;"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"      //Default constructor: does not initialize a pool"},
{"lineNum":"  102","line":"      Pool();"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"      //Initializing constructor: calls init(seed,Device_Specific_Number);"},
{"lineNum":"  105","line":"      Pool(unsigned int seed);"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"      //Initialize Pool with seed as a starting seed with a pool_size of num_states"},
{"lineNum":"  108","line":"      //The Random_XorShift64 generator is used in serial to initialize all states,"},
{"lineNum":"  109","line":"      //thus the initialization process is platform independent and deterministic."},
{"lineNum":"  110","line":"      void init(unsigned int seed, int num_states);"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"      //Get a generator. This will lock one of the states, guaranteeing that each thread"},
{"lineNum":"  113","line":"      //will have its private generator. Note: on Cuda getting a state involves atomics,"},
{"lineNum":"  114","line":"      //and is thus not deterministic!"},
{"lineNum":"  115","line":"      generator_type get_state();"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"      //Give a state back to the pool. This unlocks the state, and writes the modified"},
{"lineNum":"  118","line":"      //state of the generator back to the pool."},
{"lineNum":"  119","line":"      void free_state(generator_type gen);"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    }"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    template<class Device>"},
{"lineNum":"  124","line":"    class Generator {"},
{"lineNum":"  125","line":"     public:"},
{"lineNum":"  126","line":"     //The Kokkos device type"},
{"lineNum":"  127","line":"    using device_type = DeviceType;"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    //Max return values of respective [X]rand[S]() functions"},
{"lineNum":"  130","line":"    enum {MAX_URAND = 0xffffffffU};"},
{"lineNum":"  131","line":"    enum {MAX_URAND64 = 0xffffffffffffffffULL-1};"},
{"lineNum":"  132","line":"    enum {MAX_RAND = static_cast<int>(0xffffffffU/2)};"},
{"lineNum":"  133","line":"    enum {MAX_RAND64 = static_cast<int64_t>(0xffffffffffffffffULL/2-1)};"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    //Init with a state and the idx with respect to pool. Note: in serial the"},
{"lineNum":"  137","line":"    //Generator can be used by just giving it the necessary state arguments"},
{"lineNum":"  138","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  139","line":"    Generator (STATE_ARGUMENTS, int state_idx = 0);"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    //Draw a equidistributed uint32_t in the range [0,MAX_URAND)"},
{"lineNum":"  142","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  143","line":"    uint32_t urand();"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"    //Draw a equidistributed uint64_t in the range [0,MAX_URAND64)"},
{"lineNum":"  146","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  147","line":"    uint64_t urand64();"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    //Draw a equidistributed uint32_t in the range [0,range)"},
{"lineNum":"  150","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  151","line":"    uint32_t urand(const uint32_t& range);"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    //Draw a equidistributed uint32_t in the range [start,end)"},
{"lineNum":"  154","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  155","line":"    uint32_t urand(const uint32_t& start, const uint32_t& end );"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    //Draw a equidistributed uint64_t in the range [0,range)"},
{"lineNum":"  158","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  159","line":"    uint64_t urand64(const uint64_t& range);"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    //Draw a equidistributed uint64_t in the range [start,end)"},
{"lineNum":"  162","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  163","line":"    uint64_t urand64(const uint64_t& start, const uint64_t& end );"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    //Draw a equidistributed int in the range [0,MAX_RAND)"},
{"lineNum":"  166","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  167","line":"    int rand();"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    //Draw a equidistributed int in the range [0,range)"},
{"lineNum":"  170","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  171","line":"    int rand(const int& range);"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    //Draw a equidistributed int in the range [start,end)"},
{"lineNum":"  174","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  175","line":"    int rand(const int& start, const int& end );"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    //Draw a equidistributed int64_t in the range [0,MAX_RAND64)"},
{"lineNum":"  178","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  179","line":"    int64_t rand64();"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    //Draw a equidistributed int64_t in the range [0,range)"},
{"lineNum":"  182","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  183","line":"    int64_t rand64(const int64_t& range);"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"    //Draw a equidistributed int64_t in the range [start,end)"},
{"lineNum":"  186","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  187","line":"    int64_t rand64(const int64_t& start, const int64_t& end );"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    //Draw a equidistributed float in the range [0,1.0)"},
{"lineNum":"  190","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  191","line":"    float frand();"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    //Draw a equidistributed float in the range [0,range)"},
{"lineNum":"  194","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  195","line":"    float frand(const float& range);"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    //Draw a equidistributed float in the range [start,end)"},
{"lineNum":"  198","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  199","line":"    float frand(const float& start, const float& end );"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    //Draw a equidistributed double in the range [0,1.0)"},
{"lineNum":"  202","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  203","line":"    double drand();"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    //Draw a equidistributed double in the range [0,range)"},
{"lineNum":"  206","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  207","line":"    double drand(const double& range);"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"    //Draw a equidistributed double in the range [start,end)"},
{"lineNum":"  210","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  211","line":"    double drand(const double& start, const double& end );"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    //Draw a standard normal distributed double"},
{"lineNum":"  214","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  215","line":"    double normal() ;"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"    //Draw a normal distributed double with given mean and standard deviation"},
{"lineNum":"  218","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  219","line":"    double normal(const double& mean, const double& std_dev=1.0);"},
{"lineNum":"  220","line":"    }"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"    //Additional Functions:"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"    //Fills view with random numbers in the range [0,range)"},
{"lineNum":"  225","line":"    template<class ViewType, class PoolType>"},
{"lineNum":"  226","line":"    void fill_random(ViewType view, PoolType pool, ViewType::value_type range);"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"    //Fills view with random numbers in the range [start,end)"},
{"lineNum":"  229","line":"    template<class ViewType, class PoolType>"},
{"lineNum":"  230","line":"    void fill_random(ViewType view, PoolType pool,"},
{"lineNum":"  231","line":"                     ViewType::value_type start, ViewType::value_type end);"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"*/"},
{"lineNum":"  234","line":"// clang-format on"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"template <class Generator, class Scalar>"},
{"lineNum":"  237","line":"struct rand;"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"template <class Generator>"},
{"lineNum":"  240","line":"struct rand<Generator, char> {"},
{"lineNum":"  241","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  242","line":"  static short max() { return 127; }"},
{"lineNum":"  243","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  244","line":"  static short draw(Generator& gen) {"},
{"lineNum":"  245","line":"    return short((gen.rand() & 0xff + 256) % 256);"},
{"lineNum":"  246","line":"  }"},
{"lineNum":"  247","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  248","line":"  static short draw(Generator& gen, const char& range) {"},
{"lineNum":"  249","line":"    return char(gen.rand(range));"},
{"lineNum":"  250","line":"  }"},
{"lineNum":"  251","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  252","line":"  static short draw(Generator& gen, const char& start, const char& end) {"},
{"lineNum":"  253","line":"    return char(gen.rand(start, end));"},
{"lineNum":"  254","line":"  }"},
{"lineNum":"  255","line":"};"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"template <class Generator>"},
{"lineNum":"  258","line":"struct rand<Generator, short> {"},
{"lineNum":"  259","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  260","line":"  static short max() { return 32767; }"},
{"lineNum":"  261","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  262","line":"  static short draw(Generator& gen) {"},
{"lineNum":"  263","line":"    return short((gen.rand() & 0xffff + 65536) % 32768);"},
{"lineNum":"  264","line":"  }"},
{"lineNum":"  265","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  266","line":"  static short draw(Generator& gen, const short& range) {"},
{"lineNum":"  267","line":"    return short(gen.rand(range));"},
{"lineNum":"  268","line":"  }"},
{"lineNum":"  269","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  270","line":"  static short draw(Generator& gen, const short& start, const short& end) {"},
{"lineNum":"  271","line":"    return short(gen.rand(start, end));"},
{"lineNum":"  272","line":"  }"},
{"lineNum":"  273","line":"};"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"template <class Generator>"},
{"lineNum":"  276","line":"struct rand<Generator, int> {"},
{"lineNum":"  277","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  278","line":"  static int max() { return Generator::MAX_RAND; }"},
{"lineNum":"  279","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  280","line":"  static int draw(Generator& gen) { return gen.rand(); }"},
{"lineNum":"  281","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  282","line":"  static int draw(Generator& gen, const int& range) { return gen.rand(range); }"},
{"lineNum":"  283","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  284","line":"  static int draw(Generator& gen, const int& start, const int& end) {"},
{"lineNum":"  285","line":"    return gen.rand(start, end);"},
{"lineNum":"  286","line":"  }"},
{"lineNum":"  287","line":"};"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"template <class Generator>"},
{"lineNum":"  290","line":"struct rand<Generator, unsigned int> {"},
{"lineNum":"  291","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  292","line":"  static unsigned int max() { return Generator::MAX_URAND; }"},
{"lineNum":"  293","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  294","line":"  static unsigned int draw(Generator& gen) { return gen.urand(); }"},
{"lineNum":"  295","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  296","line":"  static unsigned int draw(Generator& gen, const unsigned int& range) {"},
{"lineNum":"  297","line":"    return gen.urand(range);"},
{"lineNum":"  298","line":"  }"},
{"lineNum":"  299","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  300","line":"  static unsigned int draw(Generator& gen, const unsigned int& start,"},
{"lineNum":"  301","line":"                           const unsigned int& end) {"},
{"lineNum":"  302","line":"    return gen.urand(start, end);"},
{"lineNum":"  303","line":"  }"},
{"lineNum":"  304","line":"};"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"template <class Generator>"},
{"lineNum":"  307","line":"struct rand<Generator, long> {"},
{"lineNum":"  308","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  309","line":"  static long max() {"},
{"lineNum":"  310","line":"    // FIXME (mfh 26 Oct 2014) It would be better to select the"},
{"lineNum":"  311","line":"    // return value at compile time, using something like enable_if."},
{"lineNum":"  312","line":"    return sizeof(long) == 4 ? static_cast<long>(Generator::MAX_RAND)"},
{"lineNum":"  313","line":"                             : static_cast<long>(Generator::MAX_RAND64);"},
{"lineNum":"  314","line":"  }"},
{"lineNum":"  315","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  316","line":"  static long draw(Generator& gen) {"},
{"lineNum":"  317","line":"    // FIXME (mfh 26 Oct 2014) It would be better to select the"},
{"lineNum":"  318","line":"    // return value at compile time, using something like enable_if."},
{"lineNum":"  319","line":"    return sizeof(long) == 4 ? static_cast<long>(gen.rand())"},
{"lineNum":"  320","line":"                             : static_cast<long>(gen.rand64());"},
{"lineNum":"  321","line":"  }"},
{"lineNum":"  322","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  323","line":"  static long draw(Generator& gen, const long& range) {"},
{"lineNum":"  324","line":"    // FIXME (mfh 26 Oct 2014) It would be better to select the"},
{"lineNum":"  325","line":"    // return value at compile time, using something like enable_if."},
{"lineNum":"  326","line":"    return sizeof(long) == 4"},
{"lineNum":"  327","line":"               ? static_cast<long>(gen.rand(static_cast<int>(range)))"},
{"lineNum":"  328","line":"               : static_cast<long>(gen.rand64(range));"},
{"lineNum":"  329","line":"  }"},
{"lineNum":"  330","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  331","line":"  static long draw(Generator& gen, const long& start, const long& end) {"},
{"lineNum":"  332","line":"    // FIXME (mfh 26 Oct 2014) It would be better to select the"},
{"lineNum":"  333","line":"    // return value at compile time, using something like enable_if."},
{"lineNum":"  334","line":"    return sizeof(long) == 4"},
{"lineNum":"  335","line":"               ? static_cast<long>("},
{"lineNum":"  336","line":"                     gen.rand(static_cast<int>(start), static_cast<int>(end)))"},
{"lineNum":"  337","line":"               : static_cast<long>(gen.rand64(start, end));"},
{"lineNum":"  338","line":"  }"},
{"lineNum":"  339","line":"};"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"template <class Generator>"},
{"lineNum":"  342","line":"struct rand<Generator, unsigned long> {"},
{"lineNum":"  343","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  344","line":"  static unsigned long max() {"},
{"lineNum":"  345","line":"    // FIXME (mfh 26 Oct 2014) It would be better to select the"},
{"lineNum":"  346","line":"    // return value at compile time, using something like enable_if."},
{"lineNum":"  347","line":"    return sizeof(unsigned long) == 4"},
{"lineNum":"  348","line":"               ? static_cast<unsigned long>(Generator::MAX_URAND)"},
{"lineNum":"  349","line":"               : static_cast<unsigned long>(Generator::MAX_URAND64);"},
{"lineNum":"  350","line":"  }"},
{"lineNum":"  351","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  352","line":"  static unsigned long draw(Generator& gen) {"},
{"lineNum":"  353","line":"    // FIXME (mfh 26 Oct 2014) It would be better to select the"},
{"lineNum":"  354","line":"    // return value at compile time, using something like enable_if."},
{"lineNum":"  355","line":"    return sizeof(unsigned long) == 4"},
{"lineNum":"  356","line":"               ? static_cast<unsigned long>(gen.urand())"},
{"lineNum":"  357","line":"               : static_cast<unsigned long>(gen.urand64());"},
{"lineNum":"  358","line":"  }"},
{"lineNum":"  359","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  360","line":"  static unsigned long draw(Generator& gen, const unsigned long& range) {"},
{"lineNum":"  361","line":"    // FIXME (mfh 26 Oct 2014) It would be better to select the"},
{"lineNum":"  362","line":"    // return value at compile time, using something like enable_if."},
{"lineNum":"  363","line":"    return sizeof(unsigned long) == 4"},
{"lineNum":"  364","line":"               ? static_cast<unsigned long>("},
{"lineNum":"  365","line":"                     gen.urand(static_cast<unsigned int>(range)))"},
{"lineNum":"  366","line":"               : static_cast<unsigned long>(gen.urand64(range));"},
{"lineNum":"  367","line":"  }"},
{"lineNum":"  368","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  369","line":"  static unsigned long draw(Generator& gen, const unsigned long& start,"},
{"lineNum":"  370","line":"                            const unsigned long& end) {"},
{"lineNum":"  371","line":"    // FIXME (mfh 26 Oct 2014) It would be better to select the"},
{"lineNum":"  372","line":"    // return value at compile time, using something like enable_if."},
{"lineNum":"  373","line":"    return sizeof(unsigned long) == 4"},
{"lineNum":"  374","line":"               ? static_cast<unsigned long>("},
{"lineNum":"  375","line":"                     gen.urand(static_cast<unsigned int>(start),"},
{"lineNum":"  376","line":"                               static_cast<unsigned int>(end)))"},
{"lineNum":"  377","line":"               : static_cast<unsigned long>(gen.urand64(start, end));"},
{"lineNum":"  378","line":"  }"},
{"lineNum":"  379","line":"};"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"// NOTE (mfh 26 oct 2014) This is a partial specialization for long"},
{"lineNum":"  382","line":"// long, a C99 / C++11 signed type which is guaranteed to be at"},
{"lineNum":"  383","line":"// least 64 bits.  Do NOT write a partial specialization for"},
{"lineNum":"  384","line":"// int64_t!!!  This is just an alias!  It could be either long or"},
{"lineNum":"  385","line":"// long long.  We don\'t know which a priori, and I\'ve seen both."},
{"lineNum":"  386","line":"// The types long and long long are guaranteed to differ, so it\'s"},
{"lineNum":"  387","line":"// always safe to specialize for both."},
{"lineNum":"  388","line":"template <class Generator>"},
{"lineNum":"  389","line":"struct rand<Generator, long long> {"},
{"lineNum":"  390","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  391","line":"  static long long max() {"},
{"lineNum":"  392","line":"    // FIXME (mfh 26 Oct 2014) It\'s legal for long long to be > 64 bits."},
{"lineNum":"  393","line":"    return Generator::MAX_RAND64;"},
{"lineNum":"  394","line":"  }"},
{"lineNum":"  395","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  396","line":"  static long long draw(Generator& gen) {"},
{"lineNum":"  397","line":"    // FIXME (mfh 26 Oct 2014) It\'s legal for long long to be > 64 bits."},
{"lineNum":"  398","line":"    return gen.rand64();"},
{"lineNum":"  399","line":"  }"},
{"lineNum":"  400","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  401","line":"  static long long draw(Generator& gen, const long long& range) {"},
{"lineNum":"  402","line":"    // FIXME (mfh 26 Oct 2014) It\'s legal for long long to be > 64 bits."},
{"lineNum":"  403","line":"    return gen.rand64(range);"},
{"lineNum":"  404","line":"  }"},
{"lineNum":"  405","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  406","line":"  static long long draw(Generator& gen, const long long& start,"},
{"lineNum":"  407","line":"                        const long long& end) {"},
{"lineNum":"  408","line":"    // FIXME (mfh 26 Oct 2014) It\'s legal for long long to be > 64 bits."},
{"lineNum":"  409","line":"    return gen.rand64(start, end);"},
{"lineNum":"  410","line":"  }"},
{"lineNum":"  411","line":"};"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"// NOTE (mfh 26 oct 2014) This is a partial specialization for"},
{"lineNum":"  414","line":"// unsigned long long, a C99 / C++11 unsigned type which is"},
{"lineNum":"  415","line":"// guaranteed to be at least 64 bits.  Do NOT write a partial"},
{"lineNum":"  416","line":"// specialization for uint64_t!!!  This is just an alias!  It could"},
{"lineNum":"  417","line":"// be either unsigned long or unsigned long long.  We don\'t know"},
{"lineNum":"  418","line":"// which a priori, and I\'ve seen both.  The types unsigned long and"},
{"lineNum":"  419","line":"// unsigned long long are guaranteed to differ, so it\'s always safe"},
{"lineNum":"  420","line":"// to specialize for both."},
{"lineNum":"  421","line":"template <class Generator>"},
{"lineNum":"  422","line":"struct rand<Generator, unsigned long long> {"},
{"lineNum":"  423","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  424","line":"  static unsigned long long max() {"},
{"lineNum":"  425","line":"    // FIXME (mfh 26 Oct 2014) It\'s legal for unsigned long long to be > 64"},
{"lineNum":"  426","line":"    // bits."},
{"lineNum":"  427","line":"    return Generator::MAX_URAND64;"},
{"lineNum":"  428","line":"  }"},
{"lineNum":"  429","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  430","line":"  static unsigned long long draw(Generator& gen) {"},
{"lineNum":"  431","line":"    // FIXME (mfh 26 Oct 2014) It\'s legal for unsigned long long to be > 64"},
{"lineNum":"  432","line":"    // bits."},
{"lineNum":"  433","line":"    return gen.urand64();"},
{"lineNum":"  434","line":"  }"},
{"lineNum":"  435","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  436","line":"  static unsigned long long draw(Generator& gen,"},
{"lineNum":"  437","line":"                                 const unsigned long long& range) {"},
{"lineNum":"  438","line":"    // FIXME (mfh 26 Oct 2014) It\'s legal for long long to be > 64 bits."},
{"lineNum":"  439","line":"    return gen.urand64(range);"},
{"lineNum":"  440","line":"  }"},
{"lineNum":"  441","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  442","line":"  static unsigned long long draw(Generator& gen,"},
{"lineNum":"  443","line":"                                 const unsigned long long& start,"},
{"lineNum":"  444","line":"                                 const unsigned long long& end) {"},
{"lineNum":"  445","line":"    // FIXME (mfh 26 Oct 2014) It\'s legal for long long to be > 64 bits."},
{"lineNum":"  446","line":"    return gen.urand64(start, end);"},
{"lineNum":"  447","line":"  }"},
{"lineNum":"  448","line":"};"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"template <class Generator>"},
{"lineNum":"  451","line":"struct rand<Generator, float> {"},
{"lineNum":"  452","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  453","line":"  static float max() { return 1.0f; }"},
{"lineNum":"  454","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  455","line":"  static float draw(Generator& gen) { return gen.frand(); }"},
{"lineNum":"  456","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  457","line":"  static float draw(Generator& gen, const float& range) {"},
{"lineNum":"  458","line":"    return gen.frand(range);"},
{"lineNum":"  459","line":"  }"},
{"lineNum":"  460","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  461","line":"  static float draw(Generator& gen, const float& start, const float& end) {"},
{"lineNum":"  462","line":"    return gen.frand(start, end);"},
{"lineNum":"  463","line":"  }"},
{"lineNum":"  464","line":"};"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"template <class Generator>"},
{"lineNum":"  467","line":"struct rand<Generator, double> {"},
{"lineNum":"  468","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  469","line":"  static double max() { return 1.0; }"},
{"lineNum":"  470","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  471","line":"  static double draw(Generator& gen) { return gen.drand(); }"},
{"lineNum":"  472","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  473","line":"  static double draw(Generator& gen, const double& range) {"},
{"lineNum":"  474","line":"    return gen.drand(range);"},
{"lineNum":"  475","line":"  }"},
{"lineNum":"  476","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  477","line":"  static double draw(Generator& gen, const double& start, const double& end) {"},
{"lineNum":"  478","line":"    return gen.drand(start, end);"},
{"lineNum":"  479","line":"  }"},
{"lineNum":"  480","line":"};"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"template <class Generator>"},
{"lineNum":"  483","line":"struct rand<Generator, Kokkos::complex<float> > {"},
{"lineNum":"  484","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  485","line":"  static Kokkos::complex<float> max() {"},
{"lineNum":"  486","line":"    return Kokkos::complex<float>(1.0, 1.0);"},
{"lineNum":"  487","line":"  }"},
{"lineNum":"  488","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  489","line":"  static Kokkos::complex<float> draw(Generator& gen) {"},
{"lineNum":"  490","line":"    const float re = gen.frand();"},
{"lineNum":"  491","line":"    const float im = gen.frand();"},
{"lineNum":"  492","line":"    return Kokkos::complex<float>(re, im);"},
{"lineNum":"  493","line":"  }"},
{"lineNum":"  494","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  495","line":"  static Kokkos::complex<float> draw(Generator& gen,"},
{"lineNum":"  496","line":"                                     const Kokkos::complex<float>& range) {"},
{"lineNum":"  497","line":"    const float re = gen.frand(real(range));"},
{"lineNum":"  498","line":"    const float im = gen.frand(imag(range));"},
{"lineNum":"  499","line":"    return Kokkos::complex<float>(re, im);"},
{"lineNum":"  500","line":"  }"},
{"lineNum":"  501","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  502","line":"  static Kokkos::complex<float> draw(Generator& gen,"},
{"lineNum":"  503","line":"                                     const Kokkos::complex<float>& start,"},
{"lineNum":"  504","line":"                                     const Kokkos::complex<float>& end) {"},
{"lineNum":"  505","line":"    const float re = gen.frand(real(start), real(end));"},
{"lineNum":"  506","line":"    const float im = gen.frand(imag(start), imag(end));"},
{"lineNum":"  507","line":"    return Kokkos::complex<float>(re, im);"},
{"lineNum":"  508","line":"  }"},
{"lineNum":"  509","line":"};"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"template <class Generator>"},
{"lineNum":"  512","line":"struct rand<Generator, Kokkos::complex<double> > {"},
{"lineNum":"  513","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  514","line":"  static Kokkos::complex<double> max() {"},
{"lineNum":"  515","line":"    return Kokkos::complex<double>(1.0, 1.0);"},
{"lineNum":"  516","line":"  }"},
{"lineNum":"  517","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  518","line":"  static Kokkos::complex<double> draw(Generator& gen) {"},
{"lineNum":"  519","line":"    const double re = gen.drand();"},
{"lineNum":"  520","line":"    const double im = gen.drand();"},
{"lineNum":"  521","line":"    return Kokkos::complex<double>(re, im);"},
{"lineNum":"  522","line":"  }"},
{"lineNum":"  523","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  524","line":"  static Kokkos::complex<double> draw(Generator& gen,"},
{"lineNum":"  525","line":"                                      const Kokkos::complex<double>& range) {"},
{"lineNum":"  526","line":"    const double re = gen.drand(real(range));"},
{"lineNum":"  527","line":"    const double im = gen.drand(imag(range));"},
{"lineNum":"  528","line":"    return Kokkos::complex<double>(re, im);"},
{"lineNum":"  529","line":"  }"},
{"lineNum":"  530","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  531","line":"  static Kokkos::complex<double> draw(Generator& gen,"},
{"lineNum":"  532","line":"                                      const Kokkos::complex<double>& start,"},
{"lineNum":"  533","line":"                                      const Kokkos::complex<double>& end) {"},
{"lineNum":"  534","line":"    const double re = gen.drand(real(start), real(end));"},
{"lineNum":"  535","line":"    const double im = gen.drand(imag(start), imag(end));"},
{"lineNum":"  536","line":"    return Kokkos::complex<double>(re, im);"},
{"lineNum":"  537","line":"  }"},
{"lineNum":"  538","line":"};"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"template <class DeviceType>"},
{"lineNum":"  541","line":"class Random_XorShift1024_Pool;"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"namespace Impl {"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"template <bool UseCArrayState>"},
{"lineNum":"  546","line":"struct Random_XorShift1024_State {"},
{"lineNum":"  547","line":"  uint64_t state_[16];"},
{"lineNum":"  548","line":"  KOKKOS_DEFAULTED_FUNCTION"},
{"lineNum":"  549","line":"  Random_XorShift1024_State() = default;"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"  template <class StateViewType>"},
{"lineNum":"  552","line":"  KOKKOS_FUNCTION Random_XorShift1024_State(const StateViewType& v,"},
{"lineNum":"  553","line":"                                            int state_idx) {"},
{"lineNum":"  554","line":"    for (int i = 0; i < 16; i++) state_[i] = v(state_idx, i);"},
{"lineNum":"  555","line":"  }"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"  KOKKOS_FUNCTION"},
{"lineNum":"  558","line":"  uint64_t operator[](const int i) const { return state_[i]; }"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"  KOKKOS_FUNCTION"},
{"lineNum":"  561","line":"  uint64_t& operator[](const int i) { return state_[i]; }"},
{"lineNum":"  562","line":"};"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"template <>"},
{"lineNum":"  565","line":"struct Random_XorShift1024_State<false> {"},
{"lineNum":"  566","line":"  uint64_t* state_;"},
{"lineNum":"  567","line":"  const int stride_;"},
{"lineNum":"  568","line":"  KOKKOS_FUNCTION"},
{"lineNum":"  569","line":"  Random_XorShift1024_State() : state_(nullptr), stride_(1){};"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"  template <class StateViewType>"},
{"lineNum":"  572","line":"  KOKKOS_FUNCTION Random_XorShift1024_State(const StateViewType& v,"},
{"lineNum":"  573","line":"                                            int state_idx)"},
{"lineNum":"  574","line":"      : state_(&v(state_idx, 0)), stride_(v.stride_1()) {}"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"  KOKKOS_FUNCTION"},
{"lineNum":"  577","line":"  uint64_t operator[](const int i) const { return state_[i * stride_]; }"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"  KOKKOS_FUNCTION"},
{"lineNum":"  580","line":"  uint64_t& operator[](const int i) { return state_[i * stride_]; }"},
{"lineNum":"  581","line":"};"},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"template <class ExecutionSpace>"},
{"lineNum":"  584","line":"struct Random_XorShift1024_UseCArrayState : std::true_type {};"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"#ifdef KOKKOS_ENABLE_CUDA"},
{"lineNum":"  587","line":"template <>"},
{"lineNum":"  588","line":"struct Random_XorShift1024_UseCArrayState<Kokkos::Cuda> : std::false_type {};"},
{"lineNum":"  589","line":"#endif"},
{"lineNum":"  590","line":"#ifdef KOKKOS_ENABLE_HIP"},
{"lineNum":"  591","line":"template <>"},
{"lineNum":"  592","line":"struct Random_XorShift1024_UseCArrayState<Kokkos::Experimental::HIP>"},
{"lineNum":"  593","line":"    : std::false_type {};"},
{"lineNum":"  594","line":"#endif"},
{"lineNum":"  595","line":"#ifdef KOKKOS_ENABLE_OPENMPTARGET"},
{"lineNum":"  596","line":"template <>"},
{"lineNum":"  597","line":"struct Random_XorShift1024_UseCArrayState<Kokkos::Experimental::OpenMPTarget>"},
{"lineNum":"  598","line":"    : std::false_type {};"},
{"lineNum":"  599","line":"#endif"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"template <class ExecutionSpace>"},
{"lineNum":"  602","line":"struct Random_UniqueIndex {"},
{"lineNum":"  603","line":"  using locks_view_type = View<int*, ExecutionSpace>;"},
{"lineNum":"  604","line":"  KOKKOS_FUNCTION"},
{"lineNum":"  605","line":"  static int get_state_idx(const locks_view_type) {"},
{"lineNum":"  606","line":"#ifdef KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_HOST"},
{"lineNum":"  607","line":"    const int i = ExecutionSpace::impl_hardware_thread_id();"},
{"lineNum":"  608","line":"    return i;"},
{"lineNum":"  609","line":"#else"},
{"lineNum":"  610","line":"    return 0;"},
{"lineNum":"  611","line":"#endif"},
{"lineNum":"  612","line":"  }"},
{"lineNum":"  613","line":"};"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"#ifdef KOKKOS_ENABLE_CUDA"},
{"lineNum":"  616","line":"template <>"},
{"lineNum":"  617","line":"struct Random_UniqueIndex<Kokkos::Cuda> {"},
{"lineNum":"  618","line":"  using locks_view_type = View<int*, Kokkos::Cuda>;"},
{"lineNum":"  619","line":"  KOKKOS_FUNCTION"},
{"lineNum":"  620","line":"  static int get_state_idx(const locks_view_type& locks_) {"},
{"lineNum":"  621","line":"#ifdef __CUDA_ARCH__"},
{"lineNum":"  622","line":"    const int i_offset ="},
{"lineNum":"  623","line":"        (threadIdx.x * blockDim.y + threadIdx.y) * blockDim.z + threadIdx.z;"},
{"lineNum":"  624","line":"    int i = (((blockIdx.x * gridDim.y + blockIdx.y) * gridDim.z + blockIdx.z) *"},
{"lineNum":"  625","line":"                 blockDim.x * blockDim.y * blockDim.z +"},
{"lineNum":"  626","line":"             i_offset) %"},
{"lineNum":"  627","line":"            locks_.extent(0);"},
{"lineNum":"  628","line":"    while (Kokkos::atomic_compare_exchange(&locks_(i), 0, 1)) {"},
{"lineNum":"  629","line":"      i += blockDim.x * blockDim.y * blockDim.z;"},
{"lineNum":"  630","line":"      if (i >= static_cast<int>(locks_.extent(0))) {"},
{"lineNum":"  631","line":"        i = i_offset;"},
{"lineNum":"  632","line":"      }"},
{"lineNum":"  633","line":"    }"},
{"lineNum":"  634","line":"    return i;"},
{"lineNum":"  635","line":"#else"},
{"lineNum":"  636","line":"    (void)locks_;"},
{"lineNum":"  637","line":"    return 0;"},
{"lineNum":"  638","line":"#endif"},
{"lineNum":"  639","line":"  }"},
{"lineNum":"  640","line":"};"},
{"lineNum":"  641","line":"#endif"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"#ifdef KOKKOS_ENABLE_HIP"},
{"lineNum":"  644","line":"template <>"},
{"lineNum":"  645","line":"struct Random_UniqueIndex<Kokkos::Experimental::HIP> {"},
{"lineNum":"  646","line":"  using locks_view_type = View<int*, Kokkos::Experimental::HIP>;"},
{"lineNum":"  647","line":"  KOKKOS_FUNCTION"},
{"lineNum":"  648","line":"  static int get_state_idx(const locks_view_type& locks_) {"},
{"lineNum":"  649","line":"#ifdef __HIP_DEVICE_COMPILE__"},
{"lineNum":"  650","line":"    const int i_offset ="},
{"lineNum":"  651","line":"        (threadIdx.x * blockDim.y + threadIdx.y) * blockDim.z + threadIdx.z;"},
{"lineNum":"  652","line":"    int i = (((blockIdx.x * gridDim.y + blockIdx.y) * gridDim.z + blockIdx.z) *"},
{"lineNum":"  653","line":"                 blockDim.x * blockDim.y * blockDim.z +"},
{"lineNum":"  654","line":"             i_offset) %"},
{"lineNum":"  655","line":"            locks_.extent(0);"},
{"lineNum":"  656","line":"    while (Kokkos::atomic_compare_exchange(&locks_(i), 0, 1)) {"},
{"lineNum":"  657","line":"      i += blockDim.x * blockDim.y * blockDim.z;"},
{"lineNum":"  658","line":"      if (i >= static_cast<int>(locks_.extent(0))) {"},
{"lineNum":"  659","line":"        i = i_offset;"},
{"lineNum":"  660","line":"      }"},
{"lineNum":"  661","line":"    }"},
{"lineNum":"  662","line":"    return i;"},
{"lineNum":"  663","line":"#else"},
{"lineNum":"  664","line":"    (void)locks_;"},
{"lineNum":"  665","line":"    return 0;"},
{"lineNum":"  666","line":"#endif"},
{"lineNum":"  667","line":"  }"},
{"lineNum":"  668","line":"};"},
{"lineNum":"  669","line":"#endif"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"#ifdef KOKKOS_ENABLE_SYCL"},
{"lineNum":"  672","line":"template <>"},
{"lineNum":"  673","line":"struct Random_UniqueIndex<Kokkos::Experimental::SYCL> {"},
{"lineNum":"  674","line":"  using locks_view_type = View<int*, Kokkos::Experimental::SYCL>;"},
{"lineNum":"  675","line":"  KOKKOS_FUNCTION"},
{"lineNum":"  676","line":"  static int get_state_idx(const locks_view_type& locks_) {"},
{"lineNum":"  677","line":"#ifdef KOKKOS_ARCH_INTEL_GEN"},
{"lineNum":"  678","line":"    int i = Kokkos::Impl::clock_tic() % locks_.extent(0);"},
{"lineNum":"  679","line":"#else"},
{"lineNum":"  680","line":"    int i = 0;"},
{"lineNum":"  681","line":"#endif"},
{"lineNum":"  682","line":"    while (Kokkos::atomic_compare_exchange(&locks_(i), 0, 1)) {"},
{"lineNum":"  683","line":"      i = (i + 1) % static_cast<int>(locks_.extent(0));"},
{"lineNum":"  684","line":"    }"},
{"lineNum":"  685","line":"    return i;"},
{"lineNum":"  686","line":"  }"},
{"lineNum":"  687","line":"};"},
{"lineNum":"  688","line":"#endif"},
{"lineNum":"  689","line":""},
{"lineNum":"  690","line":"#ifdef KOKKOS_ENABLE_OPENMPTARGET"},
{"lineNum":"  691","line":"template <>"},
{"lineNum":"  692","line":"struct Random_UniqueIndex<Kokkos::Experimental::OpenMPTarget> {"},
{"lineNum":"  693","line":"  using locks_view_type = View<int*, Kokkos::Experimental::OpenMPTarget>;"},
{"lineNum":"  694","line":"  KOKKOS_FUNCTION"},
{"lineNum":"  695","line":"  static int get_state_idx(const locks_view_type& locks) {"},
{"lineNum":"  696","line":"    const int team_size = omp_get_num_threads();"},
{"lineNum":"  697","line":"    int i               = omp_get_team_num() * team_size + omp_get_thread_num();"},
{"lineNum":"  698","line":"    const int lock_size = locks.extent_int(0);"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"    while (Kokkos::atomic_compare_exchange(&locks(i), 0, 1)) {"},
{"lineNum":"  701","line":"      i = (i + 1) % lock_size;"},
{"lineNum":"  702","line":"    }"},
{"lineNum":"  703","line":"    return i;"},
{"lineNum":"  704","line":"  }"},
{"lineNum":"  705","line":"};"},
{"lineNum":"  706","line":"#endif"},
{"lineNum":"  707","line":""},
{"lineNum":"  708","line":"}  // namespace Impl"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"template <class DeviceType>"},
{"lineNum":"  711","line":"class Random_XorShift64_Pool;"},
{"lineNum":"  712","line":""},
{"lineNum":"  713","line":"template <class DeviceType>"},
{"lineNum":"  714","line":"class Random_XorShift64 {"},
{"lineNum":"  715","line":" private:"},
{"lineNum":"  716","line":"  uint64_t state_;"},
{"lineNum":"  717","line":"  const int state_idx_;"},
{"lineNum":"  718","line":"  friend class Random_XorShift64_Pool<DeviceType>;"},
{"lineNum":"  719","line":""},
{"lineNum":"  720","line":" public:"},
{"lineNum":"  721","line":"  using device_type = DeviceType;"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"  constexpr static uint32_t MAX_URAND   = std::numeric_limits<uint32_t>::max();"},
{"lineNum":"  724","line":"  constexpr static uint64_t MAX_URAND64 = std::numeric_limits<uint64_t>::max();"},
{"lineNum":"  725","line":"  constexpr static int32_t MAX_RAND     = std::numeric_limits<int32_t>::max();"},
{"lineNum":"  726","line":"  constexpr static int64_t MAX_RAND64   = std::numeric_limits<int64_t>::max();"},
{"lineNum":"  727","line":""},
{"lineNum":"  728","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  729","line":"  Random_XorShift64(uint64_t state, int state_idx = 0)"},
{"lineNum":"  730","line":"      : state_(state == 0 ? uint64_t(1318319) : state), state_idx_(state_idx) {}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  733","line":"  uint32_t urand() {"},
{"lineNum":"  734","line":"    state_ ^= state_ >> 12;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  735","line":"    state_ ^= state_ << 25;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  736","line":"    state_ ^= state_ >> 27;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  737","line":""},
{"lineNum":"  738","line":"    uint64_t tmp = state_ * 2685821657736338717ULL;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  739","line":"    tmp          = tmp >> 16;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  740","line":"    return static_cast<uint32_t>(tmp & MAX_URAND);"},
{"lineNum":"  741","line":"  }"},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  744","line":"  uint64_t urand64() {"},
{"lineNum":"  745","line":"    state_ ^= state_ >> 12;","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  746","line":"    state_ ^= state_ << 25;","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  747","line":"    state_ ^= state_ >> 27;","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  748","line":"    return (state_ * 2685821657736338717ULL) - 1;","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  749","line":"  }"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  752","line":"  uint32_t urand(const uint32_t& range) {"},
{"lineNum":"  753","line":"    const uint32_t max_val = (MAX_URAND / range) * range;"},
{"lineNum":"  754","line":"    uint32_t tmp           = urand();"},
{"lineNum":"  755","line":"    while (tmp >= max_val) tmp = urand();"},
{"lineNum":"  756","line":"    return tmp % range;"},
{"lineNum":"  757","line":"  }"},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  760","line":"  uint32_t urand(const uint32_t& start, const uint32_t& end) {"},
{"lineNum":"  761","line":"    return urand(end - start) + start;"},
{"lineNum":"  762","line":"  }"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  765","line":"  uint64_t urand64(const uint64_t& range) {"},
{"lineNum":"  766","line":"    const uint64_t max_val = (MAX_URAND64 / range) * range;"},
{"lineNum":"  767","line":"    uint64_t tmp           = urand64();"},
{"lineNum":"  768","line":"    while (tmp >= max_val) tmp = urand64();"},
{"lineNum":"  769","line":"    return tmp % range;"},
{"lineNum":"  770","line":"  }"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  773","line":"  uint64_t urand64(const uint64_t& start, const uint64_t& end) {"},
{"lineNum":"  774","line":"    return urand64(end - start) + start;"},
{"lineNum":"  775","line":"  }"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  778","line":"  int rand() { return static_cast<int>(urand() / 2); }"},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  781","line":"  int rand(const int& range) {"},
{"lineNum":"  782","line":"    const int max_val = (MAX_RAND / range) * range;"},
{"lineNum":"  783","line":"    int tmp           = rand();"},
{"lineNum":"  784","line":"    while (tmp >= max_val) tmp = rand();"},
{"lineNum":"  785","line":"    return tmp % range;"},
{"lineNum":"  786","line":"  }"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  789","line":"  int rand(const int& start, const int& end) {"},
{"lineNum":"  790","line":"    return rand(end - start) + start;"},
{"lineNum":"  791","line":"  }"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  794","line":"  int64_t rand64() { return static_cast<int64_t>(urand64() / 2); }"},
{"lineNum":"  795","line":""},
{"lineNum":"  796","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  797","line":"  int64_t rand64(const int64_t& range) {"},
{"lineNum":"  798","line":"    const int64_t max_val = (MAX_RAND64 / range) * range;"},
{"lineNum":"  799","line":"    int64_t tmp           = rand64();"},
{"lineNum":"  800","line":"    while (tmp >= max_val) tmp = rand64();"},
{"lineNum":"  801","line":"    return tmp % range;"},
{"lineNum":"  802","line":"  }"},
{"lineNum":"  803","line":""},
{"lineNum":"  804","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  805","line":"  int64_t rand64(const int64_t& start, const int64_t& end) {"},
{"lineNum":"  806","line":"    return rand64(end - start) + start;"},
{"lineNum":"  807","line":"  }"},
{"lineNum":"  808","line":""},
{"lineNum":"  809","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  810","line":"  float frand() { return urand64() / static_cast<float>(MAX_URAND64); }"},
{"lineNum":"  811","line":""},
{"lineNum":"  812","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  813","line":"  float frand(const float& range) {"},
{"lineNum":"  814","line":"    return range * urand64() / static_cast<float>(MAX_URAND64);"},
{"lineNum":"  815","line":"  }"},
{"lineNum":"  816","line":""},
{"lineNum":"  817","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  818","line":"  float frand(const float& start, const float& end) {"},
{"lineNum":"  819","line":"    return frand(end - start) + start;"},
{"lineNum":"  820","line":"  }"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  823","line":"  double drand() { return urand64() / static_cast<double>(MAX_URAND64); }","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  824","line":""},
{"lineNum":"  825","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  826","line":"  double drand(const double& range) {"},
{"lineNum":"  827","line":"    return range * urand64() / static_cast<double>(MAX_URAND64);"},
{"lineNum":"  828","line":"  }"},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  831","line":"  double drand(const double& start, const double& end) {"},
{"lineNum":"  832","line":"    return drand(end - start) + start;"},
{"lineNum":"  833","line":"  }"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"  // Marsaglia polar method for drawing a standard normal distributed random"},
{"lineNum":"  836","line":"  // number"},
{"lineNum":"  837","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  838","line":"  double normal() {"},
{"lineNum":"  839","line":"    double S = 2.0;"},
{"lineNum":"  840","line":"    double U;"},
{"lineNum":"  841","line":"    while (S >= 1.0) {"},
{"lineNum":"  842","line":"      U              = 2.0 * drand() - 1.0;"},
{"lineNum":"  843","line":"      const double V = 2.0 * drand() - 1.0;"},
{"lineNum":"  844","line":"      S              = U * U + V * V;"},
{"lineNum":"  845","line":"    }"},
{"lineNum":"  846","line":"    return U * std::sqrt(-2.0 * std::log(S) / S);"},
{"lineNum":"  847","line":"  }"},
{"lineNum":"  848","line":""},
{"lineNum":"  849","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  850","line":"  double normal(const double& mean, const double& std_dev = 1.0) {"},
{"lineNum":"  851","line":"    return mean + normal() * std_dev;"},
{"lineNum":"  852","line":"  }"},
{"lineNum":"  853","line":"};"},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"template <class DeviceType = Kokkos::DefaultExecutionSpace>"},
{"lineNum":"  856","line":"class Random_XorShift64_Pool {"},
{"lineNum":"  857","line":" private:"},
{"lineNum":"  858","line":"  using execution_space = typename DeviceType::execution_space;"},
{"lineNum":"  859","line":"  using locks_type      = View<int*, execution_space>;"},
{"lineNum":"  860","line":"  using state_data_type = View<uint64_t*, DeviceType>;"},
{"lineNum":"  861","line":"  locks_type locks_;"},
{"lineNum":"  862","line":"  state_data_type state_;"},
{"lineNum":"  863","line":"  int num_states_;"},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":" public:"},
{"lineNum":"  866","line":"  using generator_type = Random_XorShift64<DeviceType>;"},
{"lineNum":"  867","line":"  using device_type    = DeviceType;"},
{"lineNum":"  868","line":""},
{"lineNum":"  869","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  870","line":"  Random_XorShift64_Pool() { num_states_ = 0; }"},
{"lineNum":"  871","line":"  Random_XorShift64_Pool(uint64_t seed) {"},
{"lineNum":"  872","line":"    num_states_ = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":"    init(seed, execution_space().concurrency());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  875","line":"  }"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  878","line":"  Random_XorShift64_Pool(const Random_XorShift64_Pool& src)"},
{"lineNum":"  879","line":"      : locks_(src.locks_), state_(src.state_), num_states_(src.num_states_) {}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  882","line":"  Random_XorShift64_Pool operator=(const Random_XorShift64_Pool& src) {"},
{"lineNum":"  883","line":"    locks_      = src.locks_;"},
{"lineNum":"  884","line":"    state_      = src.state_;"},
{"lineNum":"  885","line":"    num_states_ = src.num_states_;"},
{"lineNum":"  886","line":"    return *this;"},
{"lineNum":"  887","line":"  }"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"  void init(uint64_t seed, int num_states) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  890","line":"    if (seed == 0) seed = uint64_t(1318319);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    num_states_ = num_states;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"    locks_ = locks_type(\"Kokkos::Random_XorShift64::locks\", num_states_);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  895","line":"    state_ = state_data_type(\"Kokkos::Random_XorShift64::state\", num_states_);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"    typename state_data_type::HostMirror h_state = create_mirror_view(state_);"},
{"lineNum":"  898","line":"    typename locks_type::HostMirror h_lock       = create_mirror_view(locks_);"},
{"lineNum":"  899","line":""},
{"lineNum":"  900","line":"    // Execute on the HostMirror\'s default execution space."},
{"lineNum":"  901","line":"    Random_XorShift64<typename state_data_type::HostMirror::execution_space>"},
{"lineNum":"  902","line":"        gen(seed, 0);"},
{"lineNum":"  903","line":"    for (int i = 0; i < 17; i++) gen.rand();"},
{"lineNum":"  904","line":"    for (int i = 0; i < num_states_; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  905","line":"      int n1     = gen.rand();"},
{"lineNum":"  906","line":"      int n2     = gen.rand();"},
{"lineNum":"  907","line":"      int n3     = gen.rand();"},
{"lineNum":"  908","line":"      int n4     = gen.rand();"},
{"lineNum":"  909","line":"      h_state(i) = (((static_cast<uint64_t>(n1)) & 0xffff) << 00) |","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  910","line":"                   (((static_cast<uint64_t>(n2)) & 0xffff) << 16) |","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  911","line":"                   (((static_cast<uint64_t>(n3)) & 0xffff) << 32) |","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  912","line":"                   (((static_cast<uint64_t>(n4)) & 0xffff) << 48);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  913","line":"      h_lock(i) = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  914","line":"    }"},
{"lineNum":"  915","line":"    deep_copy(state_, h_state);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  916","line":"    deep_copy(locks_, h_lock);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  917","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  920","line":"  Random_XorShift64<DeviceType> get_state() const {"},
{"lineNum":"  921","line":"    const int i ="},
{"lineNum":"  922","line":"        Impl::Random_UniqueIndex<execution_space>::get_state_idx(locks_);"},
{"lineNum":"  923","line":"    return Random_XorShift64<DeviceType>(state_(i), i);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  924","line":"  }"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"  // NOTE: state_idx MUST be unique and less than num_states"},
{"lineNum":"  927","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  928","line":"  Random_XorShift64<DeviceType> get_state(const int state_idx) const {"},
{"lineNum":"  929","line":"    return Random_XorShift64<DeviceType>(state_(state_idx), state_idx);"},
{"lineNum":"  930","line":"  }"},
{"lineNum":"  931","line":""},
{"lineNum":"  932","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  933","line":"  void free_state(const Random_XorShift64<DeviceType>& state) const {"},
{"lineNum":"  934","line":"    state_(state.state_idx_) = state.state_;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  935","line":"    locks_(state.state_idx_) = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  936","line":"  }"},
{"lineNum":"  937","line":"};"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"template <class DeviceType>"},
{"lineNum":"  940","line":"class Random_XorShift1024 {"},
{"lineNum":"  941","line":"  using execution_space = typename DeviceType::execution_space;"},
{"lineNum":"  942","line":""},
{"lineNum":"  943","line":" private:"},
{"lineNum":"  944","line":"  int p_;"},
{"lineNum":"  945","line":"  const int state_idx_;"},
{"lineNum":"  946","line":"  Impl::Random_XorShift1024_State<"},
{"lineNum":"  947","line":"      Impl::Random_XorShift1024_UseCArrayState<execution_space>::value>"},
{"lineNum":"  948","line":"      state_;"},
{"lineNum":"  949","line":"  friend class Random_XorShift1024_Pool<DeviceType>;"},
{"lineNum":"  950","line":""},
{"lineNum":"  951","line":" public:"},
{"lineNum":"  952","line":"  using pool_type   = Random_XorShift1024_Pool<DeviceType>;"},
{"lineNum":"  953","line":"  using device_type = DeviceType;"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"  constexpr static uint32_t MAX_URAND   = std::numeric_limits<uint32_t>::max();"},
{"lineNum":"  956","line":"  constexpr static uint64_t MAX_URAND64 = std::numeric_limits<uint64_t>::max();"},
{"lineNum":"  957","line":"  constexpr static int32_t MAX_RAND     = std::numeric_limits<int32_t>::max();"},
{"lineNum":"  958","line":"  constexpr static int64_t MAX_RAND64   = std::numeric_limits<int64_t>::max();"},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  961","line":"  Random_XorShift1024(const typename pool_type::state_data_type& state, int p,"},
{"lineNum":"  962","line":"                      int state_idx = 0)"},
{"lineNum":"  963","line":"      : p_(p), state_idx_(state_idx), state_(state, state_idx) {}"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  966","line":"  uint32_t urand() {"},
{"lineNum":"  967","line":"    uint64_t state_0 = state_[p_];"},
{"lineNum":"  968","line":"    uint64_t state_1 = state_[p_ = (p_ + 1) & 15];"},
{"lineNum":"  969","line":"    state_1 ^= state_1 << 31;"},
{"lineNum":"  970","line":"    state_1 ^= state_1 >> 11;"},
{"lineNum":"  971","line":"    state_0 ^= state_0 >> 30;"},
{"lineNum":"  972","line":"    uint64_t tmp = (state_[p_] = state_0 ^ state_1) * 1181783497276652981ULL;"},
{"lineNum":"  973","line":"    tmp          = tmp >> 16;"},
{"lineNum":"  974","line":"    return static_cast<uint32_t>(tmp & MAX_URAND);"},
{"lineNum":"  975","line":"  }"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  978","line":"  uint64_t urand64() {"},
{"lineNum":"  979","line":"    uint64_t state_0 = state_[p_];"},
{"lineNum":"  980","line":"    uint64_t state_1 = state_[p_ = (p_ + 1) & 15];"},
{"lineNum":"  981","line":"    state_1 ^= state_1 << 31;"},
{"lineNum":"  982","line":"    state_1 ^= state_1 >> 11;"},
{"lineNum":"  983","line":"    state_0 ^= state_0 >> 30;"},
{"lineNum":"  984","line":"    return ((state_[p_] = state_0 ^ state_1) * 1181783497276652981LL) - 1;"},
{"lineNum":"  985","line":"  }"},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  988","line":"  uint32_t urand(const uint32_t& range) {"},
{"lineNum":"  989","line":"    const uint32_t max_val = (MAX_URAND / range) * range;"},
{"lineNum":"  990","line":"    uint32_t tmp           = urand();"},
{"lineNum":"  991","line":"    while (tmp >= max_val) tmp = urand();"},
{"lineNum":"  992","line":"    return tmp % range;"},
{"lineNum":"  993","line":"  }"},
{"lineNum":"  994","line":""},
{"lineNum":"  995","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":"  996","line":"  uint32_t urand(const uint32_t& start, const uint32_t& end) {"},
{"lineNum":"  997","line":"    return urand(end - start) + start;"},
{"lineNum":"  998","line":"  }"},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1001","line":"  uint64_t urand64(const uint64_t& range) {"},
{"lineNum":" 1002","line":"    const uint64_t max_val = (MAX_URAND64 / range) * range;"},
{"lineNum":" 1003","line":"    uint64_t tmp           = urand64();"},
{"lineNum":" 1004","line":"    while (tmp >= max_val) tmp = urand64();"},
{"lineNum":" 1005","line":"    return tmp % range;"},
{"lineNum":" 1006","line":"  }"},
{"lineNum":" 1007","line":""},
{"lineNum":" 1008","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1009","line":"  uint64_t urand64(const uint64_t& start, const uint64_t& end) {"},
{"lineNum":" 1010","line":"    return urand64(end - start) + start;"},
{"lineNum":" 1011","line":"  }"},
{"lineNum":" 1012","line":""},
{"lineNum":" 1013","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1014","line":"  int rand() { return static_cast<int>(urand() / 2); }"},
{"lineNum":" 1015","line":""},
{"lineNum":" 1016","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1017","line":"  int rand(const int& range) {"},
{"lineNum":" 1018","line":"    const int max_val = (MAX_RAND / range) * range;"},
{"lineNum":" 1019","line":"    int tmp           = rand();"},
{"lineNum":" 1020","line":"    while (tmp >= max_val) tmp = rand();"},
{"lineNum":" 1021","line":"    return tmp % range;"},
{"lineNum":" 1022","line":"  }"},
{"lineNum":" 1023","line":""},
{"lineNum":" 1024","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1025","line":"  int rand(const int& start, const int& end) {"},
{"lineNum":" 1026","line":"    return rand(end - start) + start;"},
{"lineNum":" 1027","line":"  }"},
{"lineNum":" 1028","line":""},
{"lineNum":" 1029","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1030","line":"  int64_t rand64() { return static_cast<int64_t>(urand64() / 2); }"},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1033","line":"  int64_t rand64(const int64_t& range) {"},
{"lineNum":" 1034","line":"    const int64_t max_val = (MAX_RAND64 / range) * range;"},
{"lineNum":" 1035","line":"    int64_t tmp           = rand64();"},
{"lineNum":" 1036","line":"    while (tmp >= max_val) tmp = rand64();"},
{"lineNum":" 1037","line":"    return tmp % range;"},
{"lineNum":" 1038","line":"  }"},
{"lineNum":" 1039","line":""},
{"lineNum":" 1040","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1041","line":"  int64_t rand64(const int64_t& start, const int64_t& end) {"},
{"lineNum":" 1042","line":"    return rand64(end - start) + start;"},
{"lineNum":" 1043","line":"  }"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1046","line":"  float frand() { return urand64() / static_cast<float>(MAX_URAND64); }"},
{"lineNum":" 1047","line":""},
{"lineNum":" 1048","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1049","line":"  float frand(const float& range) {"},
{"lineNum":" 1050","line":"    return range * urand64() / static_cast<float>(MAX_URAND64);"},
{"lineNum":" 1051","line":"  }"},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1054","line":"  float frand(const float& start, const float& end) {"},
{"lineNum":" 1055","line":"    return frand(end - start) + start;"},
{"lineNum":" 1056","line":"  }"},
{"lineNum":" 1057","line":""},
{"lineNum":" 1058","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1059","line":"  double drand() { return urand64() / static_cast<double>(MAX_URAND64); }"},
{"lineNum":" 1060","line":""},
{"lineNum":" 1061","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1062","line":"  double drand(const double& range) {"},
{"lineNum":" 1063","line":"    return range * urand64() / static_cast<double>(MAX_URAND64);"},
{"lineNum":" 1064","line":"  }"},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1067","line":"  double drand(const double& start, const double& end) {"},
{"lineNum":" 1068","line":"    return drand(end - start) + start;"},
{"lineNum":" 1069","line":"  }"},
{"lineNum":" 1070","line":""},
{"lineNum":" 1071","line":"  // Marsaglia polar method for drawing a standard normal distributed random"},
{"lineNum":" 1072","line":"  // number"},
{"lineNum":" 1073","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1074","line":"  double normal() {"},
{"lineNum":" 1075","line":"    double S = 2.0;"},
{"lineNum":" 1076","line":"    double U;"},
{"lineNum":" 1077","line":"    while (S >= 1.0) {"},
{"lineNum":" 1078","line":"      U              = 2.0 * drand() - 1.0;"},
{"lineNum":" 1079","line":"      const double V = 2.0 * drand() - 1.0;"},
{"lineNum":" 1080","line":"      S              = U * U + V * V;"},
{"lineNum":" 1081","line":"    }"},
{"lineNum":" 1082","line":"    return U * std::sqrt(-2.0 * std::log(S) / S);"},
{"lineNum":" 1083","line":"  }"},
{"lineNum":" 1084","line":""},
{"lineNum":" 1085","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1086","line":"  double normal(const double& mean, const double& std_dev = 1.0) {"},
{"lineNum":" 1087","line":"    return mean + normal() * std_dev;"},
{"lineNum":" 1088","line":"  }"},
{"lineNum":" 1089","line":"};"},
{"lineNum":" 1090","line":""},
{"lineNum":" 1091","line":"template <class DeviceType = Kokkos::DefaultExecutionSpace>"},
{"lineNum":" 1092","line":"class Random_XorShift1024_Pool {"},
{"lineNum":" 1093","line":" private:"},
{"lineNum":" 1094","line":"  using execution_space = typename DeviceType::execution_space;"},
{"lineNum":" 1095","line":"  using locks_type      = View<int*, execution_space>;"},
{"lineNum":" 1096","line":"  using int_view_type   = View<int*, DeviceType>;"},
{"lineNum":" 1097","line":"  using state_data_type = View<uint64_t * [16], DeviceType>;"},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"  locks_type locks_;"},
{"lineNum":" 1100","line":"  state_data_type state_;"},
{"lineNum":" 1101","line":"  int_view_type p_;"},
{"lineNum":" 1102","line":"  int num_states_;"},
{"lineNum":" 1103","line":"  friend class Random_XorShift1024<DeviceType>;"},
{"lineNum":" 1104","line":""},
{"lineNum":" 1105","line":" public:"},
{"lineNum":" 1106","line":"  using generator_type = Random_XorShift1024<DeviceType>;"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"  using device_type = DeviceType;"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1111","line":"  Random_XorShift1024_Pool() { num_states_ = 0; }"},
{"lineNum":" 1112","line":""},
{"lineNum":" 1113","line":"  inline Random_XorShift1024_Pool(uint64_t seed) {"},
{"lineNum":" 1114","line":"    num_states_ = 0;"},
{"lineNum":" 1115","line":""},
{"lineNum":" 1116","line":"    init(seed, execution_space().concurrency());"},
{"lineNum":" 1117","line":"  }"},
{"lineNum":" 1118","line":""},
{"lineNum":" 1119","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1120","line":"  Random_XorShift1024_Pool(const Random_XorShift1024_Pool& src)"},
{"lineNum":" 1121","line":"      : locks_(src.locks_),"},
{"lineNum":" 1122","line":"        state_(src.state_),"},
{"lineNum":" 1123","line":"        p_(src.p_),"},
{"lineNum":" 1124","line":"        num_states_(src.num_states_) {}"},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1127","line":"  Random_XorShift1024_Pool operator=(const Random_XorShift1024_Pool& src) {"},
{"lineNum":" 1128","line":"    locks_      = src.locks_;"},
{"lineNum":" 1129","line":"    state_      = src.state_;"},
{"lineNum":" 1130","line":"    p_          = src.p_;"},
{"lineNum":" 1131","line":"    num_states_ = src.num_states_;"},
{"lineNum":" 1132","line":"    return *this;"},
{"lineNum":" 1133","line":"  }"},
{"lineNum":" 1134","line":""},
{"lineNum":" 1135","line":"  inline void init(uint64_t seed, int num_states) {"},
{"lineNum":" 1136","line":"    if (seed == 0) seed = uint64_t(1318319);"},
{"lineNum":" 1137","line":"    num_states_ = num_states;"},
{"lineNum":" 1138","line":"    locks_      = locks_type(\"Kokkos::Random_XorShift1024::locks\", num_states_);"},
{"lineNum":" 1139","line":"    state_ = state_data_type(\"Kokkos::Random_XorShift1024::state\", num_states_);"},
{"lineNum":" 1140","line":"    p_     = int_view_type(\"Kokkos::Random_XorShift1024::p\", num_states_);"},
{"lineNum":" 1141","line":""},
{"lineNum":" 1142","line":"    typename state_data_type::HostMirror h_state = create_mirror_view(state_);"},
{"lineNum":" 1143","line":"    typename locks_type::HostMirror h_lock       = create_mirror_view(locks_);"},
{"lineNum":" 1144","line":"    typename int_view_type::HostMirror h_p       = create_mirror_view(p_);"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"    // Execute on the HostMirror\'s default execution space."},
{"lineNum":" 1147","line":"    Random_XorShift64<typename state_data_type::HostMirror::execution_space>"},
{"lineNum":" 1148","line":"        gen(seed, 0);"},
{"lineNum":" 1149","line":"    for (int i = 0; i < 17; i++) gen.rand();"},
{"lineNum":" 1150","line":"    for (int i = 0; i < num_states_; i++) {"},
{"lineNum":" 1151","line":"      for (int j = 0; j < 16; j++) {"},
{"lineNum":" 1152","line":"        int n1        = gen.rand();"},
{"lineNum":" 1153","line":"        int n2        = gen.rand();"},
{"lineNum":" 1154","line":"        int n3        = gen.rand();"},
{"lineNum":" 1155","line":"        int n4        = gen.rand();"},
{"lineNum":" 1156","line":"        h_state(i, j) = (((static_cast<uint64_t>(n1)) & 0xffff) << 00) |"},
{"lineNum":" 1157","line":"                        (((static_cast<uint64_t>(n2)) & 0xffff) << 16) |"},
{"lineNum":" 1158","line":"                        (((static_cast<uint64_t>(n3)) & 0xffff) << 32) |"},
{"lineNum":" 1159","line":"                        (((static_cast<uint64_t>(n4)) & 0xffff) << 48);"},
{"lineNum":" 1160","line":"      }"},
{"lineNum":" 1161","line":"      h_p(i)    = 0;"},
{"lineNum":" 1162","line":"      h_lock(i) = 0;"},
{"lineNum":" 1163","line":"    }"},
{"lineNum":" 1164","line":"    deep_copy(state_, h_state);"},
{"lineNum":" 1165","line":"    deep_copy(locks_, h_lock);"},
{"lineNum":" 1166","line":"  }"},
{"lineNum":" 1167","line":""},
{"lineNum":" 1168","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1169","line":"  Random_XorShift1024<DeviceType> get_state() const {"},
{"lineNum":" 1170","line":"    const int i ="},
{"lineNum":" 1171","line":"        Impl::Random_UniqueIndex<execution_space>::get_state_idx(locks_);"},
{"lineNum":" 1172","line":"    return Random_XorShift1024<DeviceType>(state_, p_(i), i);"},
{"lineNum":" 1173","line":"  };"},
{"lineNum":" 1174","line":""},
{"lineNum":" 1175","line":"  // NOTE: state_idx MUST be unique and less than num_states"},
{"lineNum":" 1176","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1177","line":"  Random_XorShift1024<DeviceType> get_state(const int state_idx) const {"},
{"lineNum":" 1178","line":"    return Random_XorShift1024<DeviceType>(state_, p_(state_idx), state_idx);"},
{"lineNum":" 1179","line":"  }"},
{"lineNum":" 1180","line":""},
{"lineNum":" 1181","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1182","line":"  void free_state(const Random_XorShift1024<DeviceType>& state) const {"},
{"lineNum":" 1183","line":"    for (int i = 0; i < 16; i++) state_(state.state_idx_, i) = state.state_[i];"},
{"lineNum":" 1184","line":"    p_(state.state_idx_)     = state.p_;"},
{"lineNum":" 1185","line":"    locks_(state.state_idx_) = 0;"},
{"lineNum":" 1186","line":"  }"},
{"lineNum":" 1187","line":"};"},
{"lineNum":" 1188","line":""},
{"lineNum":" 1189","line":"namespace Impl {"},
{"lineNum":" 1190","line":""},
{"lineNum":" 1191","line":"template <class ViewType, class RandomPool, int loops, int rank,"},
{"lineNum":" 1192","line":"          class IndexType>"},
{"lineNum":" 1193","line":"struct fill_random_functor_range;"},
{"lineNum":" 1194","line":"template <class ViewType, class RandomPool, int loops, int rank,"},
{"lineNum":" 1195","line":"          class IndexType>"},
{"lineNum":" 1196","line":"struct fill_random_functor_begin_end;"},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1199","line":"struct fill_random_functor_range<ViewType, RandomPool, loops, 1, IndexType> {"},
{"lineNum":" 1200","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1201","line":"  ViewType a;"},
{"lineNum":" 1202","line":"  RandomPool rand_pool;"},
{"lineNum":" 1203","line":"  typename ViewType::const_value_type range;"},
{"lineNum":" 1204","line":""},
{"lineNum":" 1205","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1206","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1207","line":""},
{"lineNum":" 1208","line":"  fill_random_functor_range(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1209","line":"                            typename ViewType::const_value_type range_)"},
{"lineNum":" 1210","line":"      : a(a_), rand_pool(rand_pool_), range(range_) {}"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1213","line":"  void operator()(const IndexType& i) const {"},
{"lineNum":" 1214","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1215","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1216","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1217","line":"      if (idx < static_cast<IndexType>(a.extent(0)))"},
{"lineNum":" 1218","line":"        a(idx) = Rand::draw(gen, range);"},
{"lineNum":" 1219","line":"    }"},
{"lineNum":" 1220","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1221","line":"  }"},
{"lineNum":" 1222","line":"};"},
{"lineNum":" 1223","line":""},
{"lineNum":" 1224","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1225","line":"struct fill_random_functor_range<ViewType, RandomPool, loops, 2, IndexType> {"},
{"lineNum":" 1226","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1227","line":"  ViewType a;"},
{"lineNum":" 1228","line":"  RandomPool rand_pool;"},
{"lineNum":" 1229","line":"  typename ViewType::const_value_type range;"},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1232","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1233","line":""},
{"lineNum":" 1234","line":"  fill_random_functor_range(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1235","line":"                            typename ViewType::const_value_type range_)"},
{"lineNum":" 1236","line":"      : a(a_), rand_pool(rand_pool_), range(range_) {}"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1239","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1240","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1241","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1242","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1243","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1244","line":"        for (IndexType k = 0; k < static_cast<IndexType>(a.extent(1)); k++)"},
{"lineNum":" 1245","line":"          a(idx, k) = Rand::draw(gen, range);"},
{"lineNum":" 1246","line":"      }"},
{"lineNum":" 1247","line":"    }"},
{"lineNum":" 1248","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1249","line":"  }"},
{"lineNum":" 1250","line":"};"},
{"lineNum":" 1251","line":""},
{"lineNum":" 1252","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1253","line":"struct fill_random_functor_range<ViewType, RandomPool, loops, 3, IndexType> {"},
{"lineNum":" 1254","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1255","line":"  ViewType a;"},
{"lineNum":" 1256","line":"  RandomPool rand_pool;"},
{"lineNum":" 1257","line":"  typename ViewType::const_value_type range;"},
{"lineNum":" 1258","line":""},
{"lineNum":" 1259","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1260","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1261","line":""},
{"lineNum":" 1262","line":"  fill_random_functor_range(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1263","line":"                            typename ViewType::const_value_type range_)"},
{"lineNum":" 1264","line":"      : a(a_), rand_pool(rand_pool_), range(range_) {}"},
{"lineNum":" 1265","line":""},
{"lineNum":" 1266","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1267","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1268","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1269","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1270","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1271","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1272","line":"        for (IndexType k = 0; k < static_cast<IndexType>(a.extent(1)); k++)"},
{"lineNum":" 1273","line":"          for (IndexType l = 0; l < static_cast<IndexType>(a.extent(2)); l++)"},
{"lineNum":" 1274","line":"            a(idx, k, l) = Rand::draw(gen, range);"},
{"lineNum":" 1275","line":"      }"},
{"lineNum":" 1276","line":"    }"},
{"lineNum":" 1277","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1278","line":"  }"},
{"lineNum":" 1279","line":"};"},
{"lineNum":" 1280","line":""},
{"lineNum":" 1281","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1282","line":"struct fill_random_functor_range<ViewType, RandomPool, loops, 4, IndexType> {"},
{"lineNum":" 1283","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1284","line":"  ViewType a;"},
{"lineNum":" 1285","line":"  RandomPool rand_pool;"},
{"lineNum":" 1286","line":"  typename ViewType::const_value_type range;"},
{"lineNum":" 1287","line":""},
{"lineNum":" 1288","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1289","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1290","line":""},
{"lineNum":" 1291","line":"  fill_random_functor_range(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1292","line":"                            typename ViewType::const_value_type range_)"},
{"lineNum":" 1293","line":"      : a(a_), rand_pool(rand_pool_), range(range_) {}"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1296","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1297","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1298","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1299","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1300","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1301","line":"        for (IndexType k = 0; k < static_cast<IndexType>(a.extent(1)); k++)"},
{"lineNum":" 1302","line":"          for (IndexType l = 0; l < static_cast<IndexType>(a.extent(2)); l++)"},
{"lineNum":" 1303","line":"            for (IndexType m = 0; m < static_cast<IndexType>(a.extent(3)); m++)"},
{"lineNum":" 1304","line":"              a(idx, k, l, m) = Rand::draw(gen, range);"},
{"lineNum":" 1305","line":"      }"},
{"lineNum":" 1306","line":"    }"},
{"lineNum":" 1307","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1308","line":"  }"},
{"lineNum":" 1309","line":"};"},
{"lineNum":" 1310","line":""},
{"lineNum":" 1311","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1312","line":"struct fill_random_functor_range<ViewType, RandomPool, loops, 5, IndexType> {"},
{"lineNum":" 1313","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1314","line":"  ViewType a;"},
{"lineNum":" 1315","line":"  RandomPool rand_pool;"},
{"lineNum":" 1316","line":"  typename ViewType::const_value_type range;"},
{"lineNum":" 1317","line":""},
{"lineNum":" 1318","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1319","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1320","line":""},
{"lineNum":" 1321","line":"  fill_random_functor_range(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1322","line":"                            typename ViewType::const_value_type range_)"},
{"lineNum":" 1323","line":"      : a(a_), rand_pool(rand_pool_), range(range_) {}"},
{"lineNum":" 1324","line":""},
{"lineNum":" 1325","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1326","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1327","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1328","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1329","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1330","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1331","line":"        for (IndexType k = 0; k < static_cast<IndexType>(a.extent(1)); k++)"},
{"lineNum":" 1332","line":"          for (IndexType l = 0; l < static_cast<IndexType>(a.extent(2)); l++)"},
{"lineNum":" 1333","line":"            for (IndexType m = 0; m < static_cast<IndexType>(a.extent(3)); m++)"},
{"lineNum":" 1334","line":"              for (IndexType n = 0; n < static_cast<IndexType>(a.extent(4));"},
{"lineNum":" 1335","line":"                   n++)"},
{"lineNum":" 1336","line":"                a(idx, k, l, m, n) = Rand::draw(gen, range);"},
{"lineNum":" 1337","line":"      }"},
{"lineNum":" 1338","line":"    }"},
{"lineNum":" 1339","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1340","line":"  }"},
{"lineNum":" 1341","line":"};"},
{"lineNum":" 1342","line":""},
{"lineNum":" 1343","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1344","line":"struct fill_random_functor_range<ViewType, RandomPool, loops, 6, IndexType> {"},
{"lineNum":" 1345","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1346","line":"  ViewType a;"},
{"lineNum":" 1347","line":"  RandomPool rand_pool;"},
{"lineNum":" 1348","line":"  typename ViewType::const_value_type range;"},
{"lineNum":" 1349","line":""},
{"lineNum":" 1350","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1351","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1352","line":""},
{"lineNum":" 1353","line":"  fill_random_functor_range(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1354","line":"                            typename ViewType::const_value_type range_)"},
{"lineNum":" 1355","line":"      : a(a_), rand_pool(rand_pool_), range(range_) {}"},
{"lineNum":" 1356","line":""},
{"lineNum":" 1357","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1358","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1359","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1360","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1361","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1362","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1363","line":"        for (IndexType k = 0; k < static_cast<IndexType>(a.extent(1)); k++)"},
{"lineNum":" 1364","line":"          for (IndexType l = 0; l < static_cast<IndexType>(a.extent(2)); l++)"},
{"lineNum":" 1365","line":"            for (IndexType m = 0; m < static_cast<IndexType>(a.extent(3)); m++)"},
{"lineNum":" 1366","line":"              for (IndexType n = 0; n < static_cast<IndexType>(a.extent(4));"},
{"lineNum":" 1367","line":"                   n++)"},
{"lineNum":" 1368","line":"                for (IndexType o = 0; o < static_cast<IndexType>(a.extent(5));"},
{"lineNum":" 1369","line":"                     o++)"},
{"lineNum":" 1370","line":"                  a(idx, k, l, m, n, o) = Rand::draw(gen, range);"},
{"lineNum":" 1371","line":"      }"},
{"lineNum":" 1372","line":"    }"},
{"lineNum":" 1373","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1374","line":"  }"},
{"lineNum":" 1375","line":"};"},
{"lineNum":" 1376","line":""},
{"lineNum":" 1377","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1378","line":"struct fill_random_functor_range<ViewType, RandomPool, loops, 7, IndexType> {"},
{"lineNum":" 1379","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1380","line":"  ViewType a;"},
{"lineNum":" 1381","line":"  RandomPool rand_pool;"},
{"lineNum":" 1382","line":"  typename ViewType::const_value_type range;"},
{"lineNum":" 1383","line":""},
{"lineNum":" 1384","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1385","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1386","line":""},
{"lineNum":" 1387","line":"  fill_random_functor_range(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1388","line":"                            typename ViewType::const_value_type range_)"},
{"lineNum":" 1389","line":"      : a(a_), rand_pool(rand_pool_), range(range_) {}"},
{"lineNum":" 1390","line":""},
{"lineNum":" 1391","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1392","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1393","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1394","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1395","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1396","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1397","line":"        for (IndexType k = 0; k < static_cast<IndexType>(a.extent(1)); k++)"},
{"lineNum":" 1398","line":"          for (IndexType l = 0; l < static_cast<IndexType>(a.extent(2)); l++)"},
{"lineNum":" 1399","line":"            for (IndexType m = 0; m < static_cast<IndexType>(a.extent(3)); m++)"},
{"lineNum":" 1400","line":"              for (IndexType n = 0; n < static_cast<IndexType>(a.extent(4));"},
{"lineNum":" 1401","line":"                   n++)"},
{"lineNum":" 1402","line":"                for (IndexType o = 0; o < static_cast<IndexType>(a.extent(5));"},
{"lineNum":" 1403","line":"                     o++)"},
{"lineNum":" 1404","line":"                  for (IndexType p = 0; p < static_cast<IndexType>(a.extent(6));"},
{"lineNum":" 1405","line":"                       p++)"},
{"lineNum":" 1406","line":"                    a(idx, k, l, m, n, o, p) = Rand::draw(gen, range);"},
{"lineNum":" 1407","line":"      }"},
{"lineNum":" 1408","line":"    }"},
{"lineNum":" 1409","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1410","line":"  }"},
{"lineNum":" 1411","line":"};"},
{"lineNum":" 1412","line":""},
{"lineNum":" 1413","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1414","line":"struct fill_random_functor_range<ViewType, RandomPool, loops, 8, IndexType> {"},
{"lineNum":" 1415","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1416","line":"  ViewType a;"},
{"lineNum":" 1417","line":"  RandomPool rand_pool;"},
{"lineNum":" 1418","line":"  typename ViewType::const_value_type range;"},
{"lineNum":" 1419","line":""},
{"lineNum":" 1420","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1421","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1422","line":""},
{"lineNum":" 1423","line":"  fill_random_functor_range(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1424","line":"                            typename ViewType::const_value_type range_)"},
{"lineNum":" 1425","line":"      : a(a_), rand_pool(rand_pool_), range(range_) {}"},
{"lineNum":" 1426","line":""},
{"lineNum":" 1427","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1428","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1429","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1430","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1431","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1432","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1433","line":"        for (IndexType k = 0; k < static_cast<IndexType>(a.extent(1)); k++)"},
{"lineNum":" 1434","line":"          for (IndexType l = 0; l < static_cast<IndexType>(a.extent(2)); l++)"},
{"lineNum":" 1435","line":"            for (IndexType m = 0; m < static_cast<IndexType>(a.extent(3)); m++)"},
{"lineNum":" 1436","line":"              for (IndexType n = 0; n < static_cast<IndexType>(a.extent(4));"},
{"lineNum":" 1437","line":"                   n++)"},
{"lineNum":" 1438","line":"                for (IndexType o = 0; o < static_cast<IndexType>(a.extent(5));"},
{"lineNum":" 1439","line":"                     o++)"},
{"lineNum":" 1440","line":"                  for (IndexType p = 0; p < static_cast<IndexType>(a.extent(6));"},
{"lineNum":" 1441","line":"                       p++)"},
{"lineNum":" 1442","line":"                    for (IndexType q = 0;"},
{"lineNum":" 1443","line":"                         q < static_cast<IndexType>(a.extent(7)); q++)"},
{"lineNum":" 1444","line":"                      a(idx, k, l, m, n, o, p, q) = Rand::draw(gen, range);"},
{"lineNum":" 1445","line":"      }"},
{"lineNum":" 1446","line":"    }"},
{"lineNum":" 1447","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1448","line":"  }"},
{"lineNum":" 1449","line":"};"},
{"lineNum":" 1450","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1451","line":"struct fill_random_functor_begin_end<ViewType, RandomPool, loops, 1,"},
{"lineNum":" 1452","line":"                                     IndexType> {"},
{"lineNum":" 1453","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1454","line":"  ViewType a;"},
{"lineNum":" 1455","line":"  RandomPool rand_pool;"},
{"lineNum":" 1456","line":"  typename ViewType::const_value_type begin, end;"},
{"lineNum":" 1457","line":""},
{"lineNum":" 1458","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1459","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1460","line":""},
{"lineNum":" 1461","line":"  fill_random_functor_begin_end(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1462","line":"                                typename ViewType::const_value_type begin_,"},
{"lineNum":" 1463","line":"                                typename ViewType::const_value_type end_)"},
{"lineNum":" 1464","line":"      : a(a_), rand_pool(rand_pool_), begin(begin_), end(end_) {}"},
{"lineNum":" 1465","line":""},
{"lineNum":" 1466","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1467","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1468","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1469","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1470","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1471","line":"      if (idx < static_cast<IndexType>(a.extent(0)))"},
{"lineNum":" 1472","line":"        a(idx) = Rand::draw(gen, begin, end);"},
{"lineNum":" 1473","line":"    }"},
{"lineNum":" 1474","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1475","line":"  }"},
{"lineNum":" 1476","line":"};"},
{"lineNum":" 1477","line":""},
{"lineNum":" 1478","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1479","line":"struct fill_random_functor_begin_end<ViewType, RandomPool, loops, 2,"},
{"lineNum":" 1480","line":"                                     IndexType> {"},
{"lineNum":" 1481","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1482","line":"  ViewType a;"},
{"lineNum":" 1483","line":"  RandomPool rand_pool;"},
{"lineNum":" 1484","line":"  typename ViewType::const_value_type begin, end;"},
{"lineNum":" 1485","line":""},
{"lineNum":" 1486","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1487","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1488","line":""},
{"lineNum":" 1489","line":"  fill_random_functor_begin_end(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1490","line":"                                typename ViewType::const_value_type begin_,"},
{"lineNum":" 1491","line":"                                typename ViewType::const_value_type end_)"},
{"lineNum":" 1492","line":"      : a(a_), rand_pool(rand_pool_), begin(begin_), end(end_) {}"},
{"lineNum":" 1493","line":""},
{"lineNum":" 1494","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1495","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1496","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1497","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1498","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1499","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1500","line":"        for (IndexType k = 0; k < static_cast<IndexType>(a.extent(1)); k++)"},
{"lineNum":" 1501","line":"          a(idx, k) = Rand::draw(gen, begin, end);"},
{"lineNum":" 1502","line":"      }"},
{"lineNum":" 1503","line":"    }"},
{"lineNum":" 1504","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1505","line":"  }"},
{"lineNum":" 1506","line":"};"},
{"lineNum":" 1507","line":""},
{"lineNum":" 1508","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1509","line":"struct fill_random_functor_begin_end<ViewType, RandomPool, loops, 3,"},
{"lineNum":" 1510","line":"                                     IndexType> {"},
{"lineNum":" 1511","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1512","line":"  ViewType a;"},
{"lineNum":" 1513","line":"  RandomPool rand_pool;"},
{"lineNum":" 1514","line":"  typename ViewType::const_value_type begin, end;"},
{"lineNum":" 1515","line":""},
{"lineNum":" 1516","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1517","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1518","line":""},
{"lineNum":" 1519","line":"  fill_random_functor_begin_end(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1520","line":"                                typename ViewType::const_value_type begin_,"},
{"lineNum":" 1521","line":"                                typename ViewType::const_value_type end_)"},
{"lineNum":" 1522","line":"      : a(a_), rand_pool(rand_pool_), begin(begin_), end(end_) {}"},
{"lineNum":" 1523","line":""},
{"lineNum":" 1524","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1525","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1526","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1527","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1528","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1529","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1530","line":"        for (IndexType k = 0; k < static_cast<IndexType>(a.extent(1)); k++)"},
{"lineNum":" 1531","line":"          for (IndexType l = 0; l < static_cast<IndexType>(a.extent(2)); l++)"},
{"lineNum":" 1532","line":"            a(idx, k, l) = Rand::draw(gen, begin, end);"},
{"lineNum":" 1533","line":"      }"},
{"lineNum":" 1534","line":"    }"},
{"lineNum":" 1535","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1536","line":"  }"},
{"lineNum":" 1537","line":"};"},
{"lineNum":" 1538","line":""},
{"lineNum":" 1539","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1540","line":"struct fill_random_functor_begin_end<ViewType, RandomPool, loops, 4,"},
{"lineNum":" 1541","line":"                                     IndexType> {"},
{"lineNum":" 1542","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1543","line":"  ViewType a;"},
{"lineNum":" 1544","line":"  RandomPool rand_pool;"},
{"lineNum":" 1545","line":"  typename ViewType::const_value_type begin, end;"},
{"lineNum":" 1546","line":""},
{"lineNum":" 1547","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1548","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1549","line":""},
{"lineNum":" 1550","line":"  fill_random_functor_begin_end(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1551","line":"                                typename ViewType::const_value_type begin_,"},
{"lineNum":" 1552","line":"                                typename ViewType::const_value_type end_)"},
{"lineNum":" 1553","line":"      : a(a_), rand_pool(rand_pool_), begin(begin_), end(end_) {}"},
{"lineNum":" 1554","line":""},
{"lineNum":" 1555","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1556","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1557","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1558","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1559","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1560","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1561","line":"        for (IndexType k = 0; k < static_cast<IndexType>(a.extent(1)); k++)"},
{"lineNum":" 1562","line":"          for (IndexType l = 0; l < static_cast<IndexType>(a.extent(2)); l++)"},
{"lineNum":" 1563","line":"            for (IndexType m = 0; m < static_cast<IndexType>(a.extent(3)); m++)"},
{"lineNum":" 1564","line":"              a(idx, k, l, m) = Rand::draw(gen, begin, end);"},
{"lineNum":" 1565","line":"      }"},
{"lineNum":" 1566","line":"    }"},
{"lineNum":" 1567","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1568","line":"  }"},
{"lineNum":" 1569","line":"};"},
{"lineNum":" 1570","line":""},
{"lineNum":" 1571","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1572","line":"struct fill_random_functor_begin_end<ViewType, RandomPool, loops, 5,"},
{"lineNum":" 1573","line":"                                     IndexType> {"},
{"lineNum":" 1574","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1575","line":"  ViewType a;"},
{"lineNum":" 1576","line":"  RandomPool rand_pool;"},
{"lineNum":" 1577","line":"  typename ViewType::const_value_type begin, end;"},
{"lineNum":" 1578","line":""},
{"lineNum":" 1579","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1580","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1581","line":""},
{"lineNum":" 1582","line":"  fill_random_functor_begin_end(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1583","line":"                                typename ViewType::const_value_type begin_,"},
{"lineNum":" 1584","line":"                                typename ViewType::const_value_type end_)"},
{"lineNum":" 1585","line":"      : a(a_), rand_pool(rand_pool_), begin(begin_), end(end_) {}"},
{"lineNum":" 1586","line":""},
{"lineNum":" 1587","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1588","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1589","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1590","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1591","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1592","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1593","line":"        for (IndexType l = 0; l < static_cast<IndexType>(a.extent(1)); l++)"},
{"lineNum":" 1594","line":"          for (IndexType m = 0; m < static_cast<IndexType>(a.extent(2)); m++)"},
{"lineNum":" 1595","line":"            for (IndexType n = 0; n < static_cast<IndexType>(a.extent(3)); n++)"},
{"lineNum":" 1596","line":"              for (IndexType o = 0; o < static_cast<IndexType>(a.extent(4));"},
{"lineNum":" 1597","line":"                   o++)"},
{"lineNum":" 1598","line":"                a(idx, l, m, n, o) = Rand::draw(gen, begin, end);"},
{"lineNum":" 1599","line":"      }"},
{"lineNum":" 1600","line":"    }"},
{"lineNum":" 1601","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1602","line":"  }"},
{"lineNum":" 1603","line":"};"},
{"lineNum":" 1604","line":""},
{"lineNum":" 1605","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1606","line":"struct fill_random_functor_begin_end<ViewType, RandomPool, loops, 6,"},
{"lineNum":" 1607","line":"                                     IndexType> {"},
{"lineNum":" 1608","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1609","line":"  ViewType a;"},
{"lineNum":" 1610","line":"  RandomPool rand_pool;"},
{"lineNum":" 1611","line":"  typename ViewType::const_value_type begin, end;"},
{"lineNum":" 1612","line":""},
{"lineNum":" 1613","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1614","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1615","line":""},
{"lineNum":" 1616","line":"  fill_random_functor_begin_end(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1617","line":"                                typename ViewType::const_value_type begin_,"},
{"lineNum":" 1618","line":"                                typename ViewType::const_value_type end_)"},
{"lineNum":" 1619","line":"      : a(a_), rand_pool(rand_pool_), begin(begin_), end(end_) {}"},
{"lineNum":" 1620","line":""},
{"lineNum":" 1621","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1622","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1623","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1624","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1625","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1626","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1627","line":"        for (IndexType k = 0; k < static_cast<IndexType>(a.extent(1)); k++)"},
{"lineNum":" 1628","line":"          for (IndexType l = 0; l < static_cast<IndexType>(a.extent(2)); l++)"},
{"lineNum":" 1629","line":"            for (IndexType m = 0; m < static_cast<IndexType>(a.extent(3)); m++)"},
{"lineNum":" 1630","line":"              for (IndexType n = 0; n < static_cast<IndexType>(a.extent(4));"},
{"lineNum":" 1631","line":"                   n++)"},
{"lineNum":" 1632","line":"                for (IndexType o = 0; o < static_cast<IndexType>(a.extent(5));"},
{"lineNum":" 1633","line":"                     o++)"},
{"lineNum":" 1634","line":"                  a(idx, k, l, m, n, o) = Rand::draw(gen, begin, end);"},
{"lineNum":" 1635","line":"      }"},
{"lineNum":" 1636","line":"    }"},
{"lineNum":" 1637","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1638","line":"  }"},
{"lineNum":" 1639","line":"};"},
{"lineNum":" 1640","line":""},
{"lineNum":" 1641","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1642","line":"struct fill_random_functor_begin_end<ViewType, RandomPool, loops, 7,"},
{"lineNum":" 1643","line":"                                     IndexType> {"},
{"lineNum":" 1644","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1645","line":"  ViewType a;"},
{"lineNum":" 1646","line":"  RandomPool rand_pool;"},
{"lineNum":" 1647","line":"  typename ViewType::const_value_type begin, end;"},
{"lineNum":" 1648","line":""},
{"lineNum":" 1649","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1650","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1651","line":""},
{"lineNum":" 1652","line":"  fill_random_functor_begin_end(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1653","line":"                                typename ViewType::const_value_type begin_,"},
{"lineNum":" 1654","line":"                                typename ViewType::const_value_type end_)"},
{"lineNum":" 1655","line":"      : a(a_), rand_pool(rand_pool_), begin(begin_), end(end_) {}"},
{"lineNum":" 1656","line":""},
{"lineNum":" 1657","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1658","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1659","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1660","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1661","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1662","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1663","line":"        for (IndexType k = 0; k < static_cast<IndexType>(a.extent(1)); k++)"},
{"lineNum":" 1664","line":"          for (IndexType l = 0; l < static_cast<IndexType>(a.extent(2)); l++)"},
{"lineNum":" 1665","line":"            for (IndexType m = 0; m < static_cast<IndexType>(a.extent(3)); m++)"},
{"lineNum":" 1666","line":"              for (IndexType n = 0; n < static_cast<IndexType>(a.extent(4));"},
{"lineNum":" 1667","line":"                   n++)"},
{"lineNum":" 1668","line":"                for (IndexType o = 0; o < static_cast<IndexType>(a.extent(5));"},
{"lineNum":" 1669","line":"                     o++)"},
{"lineNum":" 1670","line":"                  for (IndexType p = 0; p < static_cast<IndexType>(a.extent(6));"},
{"lineNum":" 1671","line":"                       p++)"},
{"lineNum":" 1672","line":"                    a(idx, k, l, m, n, o, p) = Rand::draw(gen, begin, end);"},
{"lineNum":" 1673","line":"      }"},
{"lineNum":" 1674","line":"    }"},
{"lineNum":" 1675","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1676","line":"  }"},
{"lineNum":" 1677","line":"};"},
{"lineNum":" 1678","line":""},
{"lineNum":" 1679","line":"template <class ViewType, class RandomPool, int loops, class IndexType>"},
{"lineNum":" 1680","line":"struct fill_random_functor_begin_end<ViewType, RandomPool, loops, 8,"},
{"lineNum":" 1681","line":"                                     IndexType> {"},
{"lineNum":" 1682","line":"  using execution_space = typename ViewType::execution_space;"},
{"lineNum":" 1683","line":"  ViewType a;"},
{"lineNum":" 1684","line":"  RandomPool rand_pool;"},
{"lineNum":" 1685","line":"  typename ViewType::const_value_type begin, end;"},
{"lineNum":" 1686","line":""},
{"lineNum":" 1687","line":"  using Rand = rand<typename RandomPool::generator_type,"},
{"lineNum":" 1688","line":"                    typename ViewType::non_const_value_type>;"},
{"lineNum":" 1689","line":""},
{"lineNum":" 1690","line":"  fill_random_functor_begin_end(ViewType a_, RandomPool rand_pool_,"},
{"lineNum":" 1691","line":"                                typename ViewType::const_value_type begin_,"},
{"lineNum":" 1692","line":"                                typename ViewType::const_value_type end_)"},
{"lineNum":" 1693","line":"      : a(a_), rand_pool(rand_pool_), begin(begin_), end(end_) {}"},
{"lineNum":" 1694","line":""},
{"lineNum":" 1695","line":"  KOKKOS_INLINE_FUNCTION"},
{"lineNum":" 1696","line":"  void operator()(IndexType i) const {"},
{"lineNum":" 1697","line":"    typename RandomPool::generator_type gen = rand_pool.get_state();"},
{"lineNum":" 1698","line":"    for (IndexType j = 0; j < loops; j++) {"},
{"lineNum":" 1699","line":"      const IndexType idx = i * loops + j;"},
{"lineNum":" 1700","line":"      if (idx < static_cast<IndexType>(a.extent(0))) {"},
{"lineNum":" 1701","line":"        for (IndexType k = 0; k < static_cast<IndexType>(a.extent(1)); k++)"},
{"lineNum":" 1702","line":"          for (IndexType l = 0; l < static_cast<IndexType>(a.extent(2)); l++)"},
{"lineNum":" 1703","line":"            for (IndexType m = 0; m < static_cast<IndexType>(a.extent(3)); m++)"},
{"lineNum":" 1704","line":"              for (IndexType n = 0; n < static_cast<IndexType>(a.extent(4));"},
{"lineNum":" 1705","line":"                   n++)"},
{"lineNum":" 1706","line":"                for (IndexType o = 0; o < static_cast<IndexType>(a.extent(5));"},
{"lineNum":" 1707","line":"                     o++)"},
{"lineNum":" 1708","line":"                  for (IndexType p = 0; p < static_cast<IndexType>(a.extent(6));"},
{"lineNum":" 1709","line":"                       p++)"},
{"lineNum":" 1710","line":"                    for (IndexType q = 0;"},
{"lineNum":" 1711","line":"                         q < static_cast<IndexType>(a.extent(7)); q++)"},
{"lineNum":" 1712","line":"                      a(idx, k, l, m, n, o, p, q) = Rand::draw(gen, begin, end);"},
{"lineNum":" 1713","line":"      }"},
{"lineNum":" 1714","line":"    }"},
{"lineNum":" 1715","line":"    rand_pool.free_state(gen);"},
{"lineNum":" 1716","line":"  }"},
{"lineNum":" 1717","line":"};"},
{"lineNum":" 1718","line":""},
{"lineNum":" 1719","line":"}  // namespace Impl"},
{"lineNum":" 1720","line":""},
{"lineNum":" 1721","line":"template <class ViewType, class RandomPool, class IndexType = int64_t>"},
{"lineNum":" 1722","line":"void fill_random(ViewType a, RandomPool g,"},
{"lineNum":" 1723","line":"                 typename ViewType::const_value_type range) {"},
{"lineNum":" 1724","line":"  int64_t LDA = a.extent(0);"},
{"lineNum":" 1725","line":"  if (LDA > 0)"},
{"lineNum":" 1726","line":"    parallel_for(\"Kokkos::fill_random\", (LDA + 127) / 128,"},
{"lineNum":" 1727","line":"                 Impl::fill_random_functor_range<ViewType, RandomPool, 128,"},
{"lineNum":" 1728","line":"                                                 ViewType::Rank, IndexType>("},
{"lineNum":" 1729","line":"                     a, g, range));"},
{"lineNum":" 1730","line":"}"},
{"lineNum":" 1731","line":""},
{"lineNum":" 1732","line":"template <class ViewType, class RandomPool, class IndexType = int64_t>"},
{"lineNum":" 1733","line":"void fill_random(ViewType a, RandomPool g,"},
{"lineNum":" 1734","line":"                 typename ViewType::const_value_type begin,"},
{"lineNum":" 1735","line":"                 typename ViewType::const_value_type end) {"},
{"lineNum":" 1736","line":"  int64_t LDA = a.extent(0);"},
{"lineNum":" 1737","line":"  if (LDA > 0)"},
{"lineNum":" 1738","line":"    parallel_for(\"Kokkos::fill_random\", (LDA + 127) / 128,"},
{"lineNum":" 1739","line":"                 Impl::fill_random_functor_begin_end<ViewType, RandomPool, 128,"},
{"lineNum":" 1740","line":"                                                     ViewType::Rank, IndexType>("},
{"lineNum":" 1741","line":"                     a, g, begin, end));"},
{"lineNum":" 1742","line":"}"},
{"lineNum":" 1743","line":"}  // namespace Kokkos"},
{"lineNum":" 1744","line":""},
{"lineNum":" 1745","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 31, "covered" : 0,};
var merged_data = [];
