var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    5","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    6","line":"==============================================================================*/"},
{"lineNum":"    7","line":"#if !defined(BOOST_SPIRIT_CHAR_PARSER_APR_16_2006_0906AM)"},
{"lineNum":"    8","line":"#define BOOST_SPIRIT_CHAR_PARSER_APR_16_2006_0906AM"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#if defined(_MSC_VER)"},
{"lineNum":"   11","line":"#pragma once"},
{"lineNum":"   12","line":"#endif"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include <boost/spirit/home/qi/domain.hpp>"},
{"lineNum":"   15","line":"#include <boost/spirit/home/qi/parser.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/detail/assign_to.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/qi/meta_compiler.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/home/qi/skip_over.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/support/unused.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/home/support/info.hpp>"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"namespace boost { namespace spirit"},
{"lineNum":"   23","line":"{"},
{"lineNum":"   24","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   25","line":"    // Enablers"},
{"lineNum":"   26","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   27","line":"    template <>"},
{"lineNum":"   28","line":"    struct use_operator<qi::domain, proto::tag::complement> // enables ~"},
{"lineNum":"   29","line":"      : mpl::true_ {};"},
{"lineNum":"   30","line":"}}"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"namespace boost { namespace spirit { namespace traits // classification"},
{"lineNum":"   33","line":"{"},
{"lineNum":"   34","line":"    namespace detail"},
{"lineNum":"   35","line":"    {"},
{"lineNum":"   36","line":"        BOOST_MPL_HAS_XXX_TRAIT_DEF(char_parser_id)"},
{"lineNum":"   37","line":"    }"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    template <typename T>"},
{"lineNum":"   40","line":"    struct is_char_parser : detail::has_char_parser_id<T> {};"},
{"lineNum":"   41","line":"}}}"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   44","line":"{"},
{"lineNum":"   45","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   46","line":"    // The base char_parser"},
{"lineNum":"   47","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   48","line":"    template <typename Derived, typename Char, typename Attr = Char>"},
{"lineNum":"   49","line":"    struct char_parser : primitive_parser<Derived>"},
{"lineNum":"   50","line":"    {"},
{"lineNum":"   51","line":"        typedef Char char_type;"},
{"lineNum":"   52","line":"        struct char_parser_id;"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"        // if Attr is unused_type, Derived must supply its own attribute"},
{"lineNum":"   55","line":"        // metafunction"},
{"lineNum":"   56","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"   57","line":"        struct attribute"},
{"lineNum":"   58","line":"        {"},
{"lineNum":"   59","line":"            typedef Attr type;"},
{"lineNum":"   60","line":"        };"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"        template <typename Iterator, typename Context, typename Skipper, typename Attribute>"},
{"lineNum":"   63","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"   64","line":"          , Context& context, Skipper const& skipper, Attribute& attr_) const"},
{"lineNum":"   65","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"            qi::skip_over(first, last, skipper);"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"            if (first != last && this->derived().test(*first, context))","class":"lineNoCov","hits":"0","possible_hits":"54",},
{"lineNum":"   69","line":"            {"},
{"lineNum":"   70","line":"                spirit::traits::assign_to(*first, attr_);"},
{"lineNum":"   71","line":"                ++first;"},
{"lineNum":"   72","line":"                return true;"},
{"lineNum":"   73","line":"            }"},
{"lineNum":"   74","line":"            return false;"},
{"lineNum":"   75","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"        // Requirement: p.test(ch, context) -> bool"},
{"lineNum":"   78","line":"        //"},
{"lineNum":"   79","line":"        //  ch:         character being parsed"},
{"lineNum":"   80","line":"        //  context:    enclosing rule context"},
{"lineNum":"   81","line":"    };"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   84","line":"    // negated_char_parser handles ~cp expressions (cp is a char_parser)"},
{"lineNum":"   85","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   86","line":"    template <typename Positive>"},
{"lineNum":"   87","line":"    struct negated_char_parser :"},
{"lineNum":"   88","line":"        char_parser<negated_char_parser<Positive>, typename Positive::char_type>"},
{"lineNum":"   89","line":"    {"},
{"lineNum":"   90","line":"        negated_char_parser(Positive const& positive_)"},
{"lineNum":"   91","line":"          : positive(positive_) {}"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"        template <typename CharParam, typename Context>"},
{"lineNum":"   94","line":"        bool test(CharParam ch, Context& context) const"},
{"lineNum":"   95","line":"        {"},
{"lineNum":"   96","line":"            return !positive.test(ch, context);"},
{"lineNum":"   97","line":"        }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"        template <typename Context>"},
{"lineNum":"  100","line":"        info what(Context& context) const"},
{"lineNum":"  101","line":"        {"},
{"lineNum":"  102","line":"            return info(\"not\", positive.what(context));"},
{"lineNum":"  103","line":"        }"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"        Positive positive;"},
{"lineNum":"  106","line":"    };"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  109","line":"    // Parser generators: make_xxx function (objects)"},
{"lineNum":"  110","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  111","line":"    namespace detail"},
{"lineNum":"  112","line":"    {"},
{"lineNum":"  113","line":"        template <typename Positive>"},
{"lineNum":"  114","line":"        struct make_negated_char_parser"},
{"lineNum":"  115","line":"        {"},
{"lineNum":"  116","line":"            typedef negated_char_parser<Positive> result_type;"},
{"lineNum":"  117","line":"            result_type operator()(Positive const& positive) const"},
{"lineNum":"  118","line":"            {"},
{"lineNum":"  119","line":"                return result_type(positive);"},
{"lineNum":"  120","line":"            }"},
{"lineNum":"  121","line":"        };"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"        template <typename Positive>"},
{"lineNum":"  124","line":"        struct make_negated_char_parser<negated_char_parser<Positive> >"},
{"lineNum":"  125","line":"        {"},
{"lineNum":"  126","line":"            typedef Positive result_type;"},
{"lineNum":"  127","line":"            result_type operator()(negated_char_parser<Positive> const& ncp) const"},
{"lineNum":"  128","line":"            {"},
{"lineNum":"  129","line":"                return ncp.positive;"},
{"lineNum":"  130","line":"            }"},
{"lineNum":"  131","line":"        };"},
{"lineNum":"  132","line":"    }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    template <typename Elements, typename Modifiers>"},
{"lineNum":"  135","line":"    struct make_composite<proto::tag::complement, Elements, Modifiers>"},
{"lineNum":"  136","line":"    {"},
{"lineNum":"  137","line":"        typedef typename"},
{"lineNum":"  138","line":"            fusion::result_of::value_at_c<Elements, 0>::type"},
{"lineNum":"  139","line":"        subject;"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"        BOOST_SPIRIT_ASSERT_MSG(("},
{"lineNum":"  142","line":"            traits::is_char_parser<subject>::value"},
{"lineNum":"  143","line":"        ), subject_is_not_negatable, (subject));"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"        typedef typename"},
{"lineNum":"  146","line":"            detail::make_negated_char_parser<subject>::result_type"},
{"lineNum":"  147","line":"        result_type;"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"        result_type operator()(Elements const& elements, unused_type) const"},
{"lineNum":"  150","line":"        {"},
{"lineNum":"  151","line":"            return detail::make_negated_char_parser<subject>()("},
{"lineNum":"  152","line":"                fusion::at_c<0>(elements));"},
{"lineNum":"  153","line":"        }"},
{"lineNum":"  154","line":"    };"},
{"lineNum":"  155","line":"}}}"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
