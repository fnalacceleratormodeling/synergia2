var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___BIT_REFERENCE"},
{"lineNum":"   11","line":"#define _LIBCPP___BIT_REFERENCE"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":"#include <__bits>"},
{"lineNum":"   15","line":"#include <algorithm>"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   18","line":"#pragma GCC system_header"},
{"lineNum":"   19","line":"#endif"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   22","line":"#include <__undef_macros>"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"template <class _Cp, bool _IsConst, typename _Cp::__storage_type = 0> class __bit_iterator;"},
{"lineNum":"   28","line":"template <class _Cp> class __bit_const_reference;"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"template <class _Tp>"},
{"lineNum":"   31","line":"struct __has_storage_type"},
{"lineNum":"   32","line":"{"},
{"lineNum":"   33","line":"    static const bool value = false;"},
{"lineNum":"   34","line":"};"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"template <class _Cp, bool = __has_storage_type<_Cp>::value>"},
{"lineNum":"   37","line":"class __bit_reference"},
{"lineNum":"   38","line":"{"},
{"lineNum":"   39","line":"    typedef typename _Cp::__storage_type    __storage_type;"},
{"lineNum":"   40","line":"    typedef typename _Cp::__storage_pointer __storage_pointer;"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    __storage_pointer __seg_;"},
{"lineNum":"   43","line":"    __storage_type    __mask_;"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    friend typename _Cp::__self;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    friend class __bit_const_reference<_Cp>;"},
{"lineNum":"   48","line":"    friend class __bit_iterator<_Cp, false>;"},
{"lineNum":"   49","line":"public:"},
{"lineNum":"   50","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   51","line":"    __bit_reference(const __bit_reference&) = default;"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    _LIBCPP_INLINE_VISIBILITY operator bool() const _NOEXCEPT"},
{"lineNum":"   54","line":"        {return static_cast<bool>(*__seg_ & __mask_);}","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   55","line":"    _LIBCPP_INLINE_VISIBILITY bool operator ~() const _NOEXCEPT"},
{"lineNum":"   56","line":"        {return !static_cast<bool>(*this);}"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   59","line":"    __bit_reference& operator=(bool __x) _NOEXCEPT"},
{"lineNum":"   60","line":"    {"},
{"lineNum":"   61","line":"        if (__x)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   62","line":"            *__seg_ |= __mask_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   63","line":"        else"},
{"lineNum":"   64","line":"            *__seg_ &= ~__mask_;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   65","line":"        return *this;"},
{"lineNum":"   66","line":"    }"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   69","line":"    __bit_reference& operator=(const __bit_reference& __x) _NOEXCEPT"},
{"lineNum":"   70","line":"        {return operator=(static_cast<bool>(__x));}"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    _LIBCPP_INLINE_VISIBILITY void flip() _NOEXCEPT {*__seg_ ^= __mask_;}"},
{"lineNum":"   73","line":"    _LIBCPP_INLINE_VISIBILITY __bit_iterator<_Cp, false> operator&() const _NOEXCEPT"},
{"lineNum":"   74","line":"        {return __bit_iterator<_Cp, false>(__seg_, static_cast<unsigned>(__libcpp_ctz(__mask_)));}"},
{"lineNum":"   75","line":"private:"},
{"lineNum":"   76","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   77","line":"    __bit_reference(__storage_pointer __s, __storage_type __m) _NOEXCEPT"},
{"lineNum":"   78","line":"        : __seg_(__s), __mask_(__m) {}"},
{"lineNum":"   79","line":"};"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"template <class _Cp>"},
{"lineNum":"   82","line":"class __bit_reference<_Cp, false>"},
{"lineNum":"   83","line":"{"},
{"lineNum":"   84","line":"};"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"template <class _Cp>"},
{"lineNum":"   87","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   88","line":"void"},
{"lineNum":"   89","line":"swap(__bit_reference<_Cp> __x, __bit_reference<_Cp> __y) _NOEXCEPT"},
{"lineNum":"   90","line":"{"},
{"lineNum":"   91","line":"    bool __t = __x;"},
{"lineNum":"   92","line":"    __x = __y;"},
{"lineNum":"   93","line":"    __y = __t;"},
{"lineNum":"   94","line":"}"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"template <class _Cp, class _Dp>"},
{"lineNum":"   97","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"   98","line":"void"},
{"lineNum":"   99","line":"swap(__bit_reference<_Cp> __x, __bit_reference<_Dp> __y) _NOEXCEPT"},
{"lineNum":"  100","line":"{"},
{"lineNum":"  101","line":"    bool __t = __x;"},
{"lineNum":"  102","line":"    __x = __y;"},
{"lineNum":"  103","line":"    __y = __t;"},
{"lineNum":"  104","line":"}"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"template <class _Cp>"},
{"lineNum":"  107","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  108","line":"void"},
{"lineNum":"  109","line":"swap(__bit_reference<_Cp> __x, bool& __y) _NOEXCEPT"},
{"lineNum":"  110","line":"{"},
{"lineNum":"  111","line":"    bool __t = __x;"},
{"lineNum":"  112","line":"    __x = __y;"},
{"lineNum":"  113","line":"    __y = __t;"},
{"lineNum":"  114","line":"}"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"template <class _Cp>"},
{"lineNum":"  117","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  118","line":"void"},
{"lineNum":"  119","line":"swap(bool& __x, __bit_reference<_Cp> __y) _NOEXCEPT"},
{"lineNum":"  120","line":"{"},
{"lineNum":"  121","line":"    bool __t = __x;"},
{"lineNum":"  122","line":"    __x = __y;"},
{"lineNum":"  123","line":"    __y = __t;"},
{"lineNum":"  124","line":"}"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"template <class _Cp>"},
{"lineNum":"  127","line":"class __bit_const_reference"},
{"lineNum":"  128","line":"{"},
{"lineNum":"  129","line":"    typedef typename _Cp::__storage_type          __storage_type;"},
{"lineNum":"  130","line":"    typedef typename _Cp::__const_storage_pointer __storage_pointer;"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    __storage_pointer        __seg_;"},
{"lineNum":"  133","line":"    __storage_type __mask_;"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    friend typename _Cp::__self;"},
{"lineNum":"  136","line":"    friend class __bit_iterator<_Cp, true>;"},
{"lineNum":"  137","line":"public:"},
{"lineNum":"  138","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  139","line":"    __bit_const_reference(const __bit_const_reference&) = default;"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  142","line":"    __bit_const_reference(const __bit_reference<_Cp>& __x) _NOEXCEPT"},
{"lineNum":"  143","line":"        : __seg_(__x.__seg_), __mask_(__x.__mask_) {}"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR operator bool() const _NOEXCEPT"},
{"lineNum":"  146","line":"        {return static_cast<bool>(*__seg_ & __mask_);}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    _LIBCPP_INLINE_VISIBILITY __bit_iterator<_Cp, true> operator&() const _NOEXCEPT"},
{"lineNum":"  149","line":"        {return __bit_iterator<_Cp, true>(__seg_, static_cast<unsigned>(__libcpp_ctz(__mask_)));}"},
{"lineNum":"  150","line":"private:"},
{"lineNum":"  151","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  152","line":"    _LIBCPP_CONSTEXPR"},
{"lineNum":"  153","line":"    __bit_const_reference(__storage_pointer __s, __storage_type __m) _NOEXCEPT"},
{"lineNum":"  154","line":"        : __seg_(__s), __mask_(__m) {}"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    __bit_const_reference& operator=(const __bit_const_reference&) = delete;"},
{"lineNum":"  157","line":"};"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"// find"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"template <class _Cp, bool _IsConst>"},
{"lineNum":"  162","line":"__bit_iterator<_Cp, _IsConst>"},
{"lineNum":"  163","line":"__find_bool_true(__bit_iterator<_Cp, _IsConst> __first, typename _Cp::size_type __n)"},
{"lineNum":"  164","line":"{"},
{"lineNum":"  165","line":"    typedef __bit_iterator<_Cp, _IsConst> _It;"},
{"lineNum":"  166","line":"    typedef typename _It::__storage_type __storage_type;"},
{"lineNum":"  167","line":"    static const int __bits_per_word = _It::__bits_per_word;"},
{"lineNum":"  168","line":"    // do first partial word"},
{"lineNum":"  169","line":"    if (__first.__ctz_ != 0)"},
{"lineNum":"  170","line":"    {"},
{"lineNum":"  171","line":"        __storage_type __clz_f = static_cast<__storage_type>(__bits_per_word - __first.__ctz_);"},
{"lineNum":"  172","line":"        __storage_type __dn = _VSTD::min(__clz_f, __n);"},
{"lineNum":"  173","line":"        __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));"},
{"lineNum":"  174","line":"        __storage_type __b = *__first.__seg_ & __m;"},
{"lineNum":"  175","line":"        if (__b)"},
{"lineNum":"  176","line":"            return _It(__first.__seg_, static_cast<unsigned>(_VSTD::__libcpp_ctz(__b)));"},
{"lineNum":"  177","line":"        if (__n == __dn)"},
{"lineNum":"  178","line":"            return __first + __n;"},
{"lineNum":"  179","line":"        __n -= __dn;"},
{"lineNum":"  180","line":"        ++__first.__seg_;"},
{"lineNum":"  181","line":"    }"},
{"lineNum":"  182","line":"    // do middle whole words"},
{"lineNum":"  183","line":"    for (; __n >= __bits_per_word; ++__first.__seg_, __n -= __bits_per_word)"},
{"lineNum":"  184","line":"        if (*__first.__seg_)"},
{"lineNum":"  185","line":"            return _It(__first.__seg_, static_cast<unsigned>(_VSTD::__libcpp_ctz(*__first.__seg_)));"},
{"lineNum":"  186","line":"    // do last partial word"},
{"lineNum":"  187","line":"    if (__n > 0)"},
{"lineNum":"  188","line":"    {"},
{"lineNum":"  189","line":"        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  190","line":"        __storage_type __b = *__first.__seg_ & __m;"},
{"lineNum":"  191","line":"        if (__b)"},
{"lineNum":"  192","line":"            return _It(__first.__seg_, static_cast<unsigned>(_VSTD::__libcpp_ctz(__b)));"},
{"lineNum":"  193","line":"    }"},
{"lineNum":"  194","line":"    return _It(__first.__seg_, static_cast<unsigned>(__n));"},
{"lineNum":"  195","line":"}"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"template <class _Cp, bool _IsConst>"},
{"lineNum":"  198","line":"__bit_iterator<_Cp, _IsConst>"},
{"lineNum":"  199","line":"__find_bool_false(__bit_iterator<_Cp, _IsConst> __first, typename _Cp::size_type __n)"},
{"lineNum":"  200","line":"{"},
{"lineNum":"  201","line":"    typedef __bit_iterator<_Cp, _IsConst> _It;"},
{"lineNum":"  202","line":"    typedef typename _It::__storage_type __storage_type;"},
{"lineNum":"  203","line":"    const int __bits_per_word = _It::__bits_per_word;"},
{"lineNum":"  204","line":"    // do first partial word"},
{"lineNum":"  205","line":"    if (__first.__ctz_ != 0)"},
{"lineNum":"  206","line":"    {"},
{"lineNum":"  207","line":"        __storage_type __clz_f = static_cast<__storage_type>(__bits_per_word - __first.__ctz_);"},
{"lineNum":"  208","line":"        __storage_type __dn = _VSTD::min(__clz_f, __n);"},
{"lineNum":"  209","line":"        __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));"},
{"lineNum":"  210","line":"        __storage_type __b = ~*__first.__seg_ & __m;"},
{"lineNum":"  211","line":"        if (__b)"},
{"lineNum":"  212","line":"            return _It(__first.__seg_, static_cast<unsigned>(_VSTD::__libcpp_ctz(__b)));"},
{"lineNum":"  213","line":"        if (__n == __dn)"},
{"lineNum":"  214","line":"            return __first + __n;"},
{"lineNum":"  215","line":"        __n -= __dn;"},
{"lineNum":"  216","line":"        ++__first.__seg_;"},
{"lineNum":"  217","line":"    }"},
{"lineNum":"  218","line":"    // do middle whole words"},
{"lineNum":"  219","line":"    for (; __n >= __bits_per_word; ++__first.__seg_, __n -= __bits_per_word)"},
{"lineNum":"  220","line":"    {"},
{"lineNum":"  221","line":"        __storage_type __b = ~*__first.__seg_;"},
{"lineNum":"  222","line":"        if (__b)"},
{"lineNum":"  223","line":"            return _It(__first.__seg_, static_cast<unsigned>(_VSTD::__libcpp_ctz(__b)));"},
{"lineNum":"  224","line":"    }"},
{"lineNum":"  225","line":"    // do last partial word"},
{"lineNum":"  226","line":"    if (__n > 0)"},
{"lineNum":"  227","line":"    {"},
{"lineNum":"  228","line":"        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  229","line":"        __storage_type __b = ~*__first.__seg_ & __m;"},
{"lineNum":"  230","line":"        if (__b)"},
{"lineNum":"  231","line":"            return _It(__first.__seg_, static_cast<unsigned>(_VSTD::__libcpp_ctz(__b)));"},
{"lineNum":"  232","line":"    }"},
{"lineNum":"  233","line":"    return _It(__first.__seg_, static_cast<unsigned>(__n));"},
{"lineNum":"  234","line":"}"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"template <class _Cp, bool _IsConst, class _Tp>"},
{"lineNum":"  237","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  238","line":"__bit_iterator<_Cp, _IsConst>"},
{"lineNum":"  239","line":"find(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, const _Tp& __value_)"},
{"lineNum":"  240","line":"{"},
{"lineNum":"  241","line":"    if (static_cast<bool>(__value_))"},
{"lineNum":"  242","line":"        return _VSTD::__find_bool_true(__first, static_cast<typename _Cp::size_type>(__last - __first));"},
{"lineNum":"  243","line":"    return _VSTD::__find_bool_false(__first, static_cast<typename _Cp::size_type>(__last - __first));"},
{"lineNum":"  244","line":"}"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"// count"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"template <class _Cp, bool _IsConst>"},
{"lineNum":"  249","line":"typename __bit_iterator<_Cp, _IsConst>::difference_type"},
{"lineNum":"  250","line":"__count_bool_true(__bit_iterator<_Cp, _IsConst> __first, typename _Cp::size_type __n)"},
{"lineNum":"  251","line":"{"},
{"lineNum":"  252","line":"    typedef __bit_iterator<_Cp, _IsConst> _It;"},
{"lineNum":"  253","line":"    typedef typename _It::__storage_type __storage_type;"},
{"lineNum":"  254","line":"    typedef typename _It::difference_type difference_type;"},
{"lineNum":"  255","line":"    const int __bits_per_word = _It::__bits_per_word;"},
{"lineNum":"  256","line":"    difference_type __r = 0;"},
{"lineNum":"  257","line":"    // do first partial word"},
{"lineNum":"  258","line":"    if (__first.__ctz_ != 0)"},
{"lineNum":"  259","line":"    {"},
{"lineNum":"  260","line":"        __storage_type __clz_f = static_cast<__storage_type>(__bits_per_word - __first.__ctz_);"},
{"lineNum":"  261","line":"        __storage_type __dn = _VSTD::min(__clz_f, __n);"},
{"lineNum":"  262","line":"        __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));"},
{"lineNum":"  263","line":"        __r = _VSTD::__libcpp_popcount(*__first.__seg_ & __m);"},
{"lineNum":"  264","line":"        __n -= __dn;"},
{"lineNum":"  265","line":"        ++__first.__seg_;"},
{"lineNum":"  266","line":"    }"},
{"lineNum":"  267","line":"    // do middle whole words"},
{"lineNum":"  268","line":"    for (; __n >= __bits_per_word; ++__first.__seg_, __n -= __bits_per_word)"},
{"lineNum":"  269","line":"        __r += _VSTD::__libcpp_popcount(*__first.__seg_);"},
{"lineNum":"  270","line":"    // do last partial word"},
{"lineNum":"  271","line":"    if (__n > 0)"},
{"lineNum":"  272","line":"    {"},
{"lineNum":"  273","line":"        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  274","line":"        __r += _VSTD::__libcpp_popcount(*__first.__seg_ & __m);"},
{"lineNum":"  275","line":"    }"},
{"lineNum":"  276","line":"    return __r;"},
{"lineNum":"  277","line":"}"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"template <class _Cp, bool _IsConst>"},
{"lineNum":"  280","line":"typename __bit_iterator<_Cp, _IsConst>::difference_type"},
{"lineNum":"  281","line":"__count_bool_false(__bit_iterator<_Cp, _IsConst> __first, typename _Cp::size_type __n)"},
{"lineNum":"  282","line":"{"},
{"lineNum":"  283","line":"    typedef __bit_iterator<_Cp, _IsConst> _It;"},
{"lineNum":"  284","line":"    typedef typename _It::__storage_type __storage_type;"},
{"lineNum":"  285","line":"    typedef typename _It::difference_type difference_type;"},
{"lineNum":"  286","line":"    const int __bits_per_word = _It::__bits_per_word;"},
{"lineNum":"  287","line":"    difference_type __r = 0;"},
{"lineNum":"  288","line":"    // do first partial word"},
{"lineNum":"  289","line":"    if (__first.__ctz_ != 0)"},
{"lineNum":"  290","line":"    {"},
{"lineNum":"  291","line":"        __storage_type __clz_f = static_cast<__storage_type>(__bits_per_word - __first.__ctz_);"},
{"lineNum":"  292","line":"        __storage_type __dn = _VSTD::min(__clz_f, __n);"},
{"lineNum":"  293","line":"        __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));"},
{"lineNum":"  294","line":"        __r = _VSTD::__libcpp_popcount(~*__first.__seg_ & __m);"},
{"lineNum":"  295","line":"        __n -= __dn;"},
{"lineNum":"  296","line":"        ++__first.__seg_;"},
{"lineNum":"  297","line":"    }"},
{"lineNum":"  298","line":"    // do middle whole words"},
{"lineNum":"  299","line":"    for (; __n >= __bits_per_word; ++__first.__seg_, __n -= __bits_per_word)"},
{"lineNum":"  300","line":"        __r += _VSTD::__libcpp_popcount(~*__first.__seg_);"},
{"lineNum":"  301","line":"    // do last partial word"},
{"lineNum":"  302","line":"    if (__n > 0)"},
{"lineNum":"  303","line":"    {"},
{"lineNum":"  304","line":"        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  305","line":"        __r += _VSTD::__libcpp_popcount(~*__first.__seg_ & __m);"},
{"lineNum":"  306","line":"    }"},
{"lineNum":"  307","line":"    return __r;"},
{"lineNum":"  308","line":"}"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"template <class _Cp, bool _IsConst, class _Tp>"},
{"lineNum":"  311","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  312","line":"typename __bit_iterator<_Cp, _IsConst>::difference_type"},
{"lineNum":"  313","line":"count(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, const _Tp& __value_)"},
{"lineNum":"  314","line":"{"},
{"lineNum":"  315","line":"    if (static_cast<bool>(__value_))"},
{"lineNum":"  316","line":"        return _VSTD::__count_bool_true(__first, static_cast<typename _Cp::size_type>(__last - __first));"},
{"lineNum":"  317","line":"    return _VSTD::__count_bool_false(__first, static_cast<typename _Cp::size_type>(__last - __first));"},
{"lineNum":"  318","line":"}"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"// fill_n"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"template <class _Cp>"},
{"lineNum":"  323","line":"void"},
{"lineNum":"  324","line":"__fill_n_false(__bit_iterator<_Cp, false> __first, typename _Cp::size_type __n)"},
{"lineNum":"  325","line":"{"},
{"lineNum":"  326","line":"    typedef __bit_iterator<_Cp, false> _It;"},
{"lineNum":"  327","line":"    typedef typename _It::__storage_type __storage_type;"},
{"lineNum":"  328","line":"    const int __bits_per_word = _It::__bits_per_word;"},
{"lineNum":"  329","line":"    // do first partial word"},
{"lineNum":"  330","line":"    if (__first.__ctz_ != 0)"},
{"lineNum":"  331","line":"    {"},
{"lineNum":"  332","line":"        __storage_type __clz_f = static_cast<__storage_type>(__bits_per_word - __first.__ctz_);"},
{"lineNum":"  333","line":"        __storage_type __dn = _VSTD::min(__clz_f, __n);"},
{"lineNum":"  334","line":"        __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));"},
{"lineNum":"  335","line":"        *__first.__seg_ &= ~__m;"},
{"lineNum":"  336","line":"        __n -= __dn;"},
{"lineNum":"  337","line":"        ++__first.__seg_;"},
{"lineNum":"  338","line":"    }"},
{"lineNum":"  339","line":"    // do middle whole words"},
{"lineNum":"  340","line":"    __storage_type __nw = __n / __bits_per_word;"},
{"lineNum":"  341","line":"    _VSTD::memset(_VSTD::__to_address(__first.__seg_), 0, __nw * sizeof(__storage_type));"},
{"lineNum":"  342","line":"    __n -= __nw * __bits_per_word;"},
{"lineNum":"  343","line":"    // do last partial word"},
{"lineNum":"  344","line":"    if (__n > 0)"},
{"lineNum":"  345","line":"    {"},
{"lineNum":"  346","line":"        __first.__seg_ += __nw;"},
{"lineNum":"  347","line":"        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  348","line":"        *__first.__seg_ &= ~__m;"},
{"lineNum":"  349","line":"    }"},
{"lineNum":"  350","line":"}"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"template <class _Cp>"},
{"lineNum":"  353","line":"void"},
{"lineNum":"  354","line":"__fill_n_true(__bit_iterator<_Cp, false> __first, typename _Cp::size_type __n)"},
{"lineNum":"  355","line":"{"},
{"lineNum":"  356","line":"    typedef __bit_iterator<_Cp, false> _It;"},
{"lineNum":"  357","line":"    typedef typename _It::__storage_type __storage_type;"},
{"lineNum":"  358","line":"    const int __bits_per_word = _It::__bits_per_word;"},
{"lineNum":"  359","line":"    // do first partial word"},
{"lineNum":"  360","line":"    if (__first.__ctz_ != 0)"},
{"lineNum":"  361","line":"    {"},
{"lineNum":"  362","line":"        __storage_type __clz_f = static_cast<__storage_type>(__bits_per_word - __first.__ctz_);"},
{"lineNum":"  363","line":"        __storage_type __dn = _VSTD::min(__clz_f, __n);"},
{"lineNum":"  364","line":"        __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));"},
{"lineNum":"  365","line":"        *__first.__seg_ |= __m;"},
{"lineNum":"  366","line":"        __n -= __dn;"},
{"lineNum":"  367","line":"        ++__first.__seg_;"},
{"lineNum":"  368","line":"    }"},
{"lineNum":"  369","line":"    // do middle whole words"},
{"lineNum":"  370","line":"    __storage_type __nw = __n / __bits_per_word;"},
{"lineNum":"  371","line":"    _VSTD::memset(_VSTD::__to_address(__first.__seg_), -1, __nw * sizeof(__storage_type));"},
{"lineNum":"  372","line":"    __n -= __nw * __bits_per_word;"},
{"lineNum":"  373","line":"    // do last partial word"},
{"lineNum":"  374","line":"    if (__n > 0)"},
{"lineNum":"  375","line":"    {"},
{"lineNum":"  376","line":"        __first.__seg_ += __nw;"},
{"lineNum":"  377","line":"        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  378","line":"        *__first.__seg_ |= __m;"},
{"lineNum":"  379","line":"    }"},
{"lineNum":"  380","line":"}"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"template <class _Cp>"},
{"lineNum":"  383","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  384","line":"void"},
{"lineNum":"  385","line":"fill_n(__bit_iterator<_Cp, false> __first, typename _Cp::size_type __n, bool __value_)"},
{"lineNum":"  386","line":"{"},
{"lineNum":"  387","line":"    if (__n > 0)"},
{"lineNum":"  388","line":"    {"},
{"lineNum":"  389","line":"        if (__value_)"},
{"lineNum":"  390","line":"            _VSTD::__fill_n_true(__first, __n);"},
{"lineNum":"  391","line":"        else"},
{"lineNum":"  392","line":"            _VSTD::__fill_n_false(__first, __n);"},
{"lineNum":"  393","line":"    }"},
{"lineNum":"  394","line":"}"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"// fill"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"template <class _Cp>"},
{"lineNum":"  399","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  400","line":"void"},
{"lineNum":"  401","line":"fill(__bit_iterator<_Cp, false> __first, __bit_iterator<_Cp, false> __last, bool __value_)"},
{"lineNum":"  402","line":"{"},
{"lineNum":"  403","line":"    _VSTD::fill_n(__first, static_cast<typename _Cp::size_type>(__last - __first), __value_);"},
{"lineNum":"  404","line":"}"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"// copy"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"template <class _Cp, bool _IsConst>"},
{"lineNum":"  409","line":"__bit_iterator<_Cp, false>"},
{"lineNum":"  410","line":"__copy_aligned(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last,"},
{"lineNum":"  411","line":"                                                     __bit_iterator<_Cp, false> __result)"},
{"lineNum":"  412","line":"{"},
{"lineNum":"  413","line":"    typedef __bit_iterator<_Cp, _IsConst> _In;"},
{"lineNum":"  414","line":"    typedef  typename _In::difference_type difference_type;"},
{"lineNum":"  415","line":"    typedef typename _In::__storage_type __storage_type;"},
{"lineNum":"  416","line":"    const int __bits_per_word = _In::__bits_per_word;"},
{"lineNum":"  417","line":"    difference_type __n = __last - __first;"},
{"lineNum":"  418","line":"    if (__n > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  419","line":"    {"},
{"lineNum":"  420","line":"        // do first word"},
{"lineNum":"  421","line":"        if (__first.__ctz_ != 0)"},
{"lineNum":"  422","line":"        {"},
{"lineNum":"  423","line":"            unsigned __clz = __bits_per_word - __first.__ctz_;"},
{"lineNum":"  424","line":"            difference_type __dn = _VSTD::min(static_cast<difference_type>(__clz), __n);"},
{"lineNum":"  425","line":"            __n -= __dn;"},
{"lineNum":"  426","line":"            __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz - __dn));"},
{"lineNum":"  427","line":"            __storage_type __b = *__first.__seg_ & __m;"},
{"lineNum":"  428","line":"            *__result.__seg_ &= ~__m;"},
{"lineNum":"  429","line":"            *__result.__seg_ |= __b;"},
{"lineNum":"  430","line":"            __result.__seg_ += (__dn + __result.__ctz_) / __bits_per_word;"},
{"lineNum":"  431","line":"            __result.__ctz_ = static_cast<unsigned>((__dn + __result.__ctz_)  % __bits_per_word);"},
{"lineNum":"  432","line":"            ++__first.__seg_;"},
{"lineNum":"  433","line":"            // __first.__ctz_ = 0;"},
{"lineNum":"  434","line":"        }"},
{"lineNum":"  435","line":"        // __first.__ctz_ == 0;"},
{"lineNum":"  436","line":"        // do middle words"},
{"lineNum":"  437","line":"        __storage_type __nw = __n / __bits_per_word;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  438","line":"        _VSTD::memmove(_VSTD::__to_address(__result.__seg_),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":"                       _VSTD::__to_address(__first.__seg_),"},
{"lineNum":"  440","line":"                       __nw * sizeof(__storage_type));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  441","line":"        __n -= __nw * __bits_per_word;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":"        __result.__seg_ += __nw;"},
{"lineNum":"  443","line":"        // do last word"},
{"lineNum":"  444","line":"        if (__n > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  445","line":"        {"},
{"lineNum":"  446","line":"            __first.__seg_ += __nw;"},
{"lineNum":"  447","line":"            __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  448","line":"            __storage_type __b = *__first.__seg_ & __m;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  449","line":"            *__result.__seg_ &= ~__m;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  450","line":"            *__result.__seg_ |= __b;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  451","line":"            __result.__ctz_ = static_cast<unsigned>(__n);"},
{"lineNum":"  452","line":"        }"},
{"lineNum":"  453","line":"    }"},
{"lineNum":"  454","line":"    return __result;"},
{"lineNum":"  455","line":"}"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"template <class _Cp, bool _IsConst>"},
{"lineNum":"  458","line":"__bit_iterator<_Cp, false>"},
{"lineNum":"  459","line":"__copy_unaligned(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last,"},
{"lineNum":"  460","line":"                                                       __bit_iterator<_Cp, false> __result)"},
{"lineNum":"  461","line":"{"},
{"lineNum":"  462","line":"    typedef __bit_iterator<_Cp, _IsConst> _In;"},
{"lineNum":"  463","line":"    typedef  typename _In::difference_type difference_type;"},
{"lineNum":"  464","line":"    typedef typename _In::__storage_type __storage_type;"},
{"lineNum":"  465","line":"    static const int __bits_per_word = _In::__bits_per_word;"},
{"lineNum":"  466","line":"    difference_type __n = __last - __first;"},
{"lineNum":"  467","line":"    if (__n > 0)"},
{"lineNum":"  468","line":"    {"},
{"lineNum":"  469","line":"        // do first word"},
{"lineNum":"  470","line":"        if (__first.__ctz_ != 0)"},
{"lineNum":"  471","line":"        {"},
{"lineNum":"  472","line":"            unsigned __clz_f = __bits_per_word - __first.__ctz_;"},
{"lineNum":"  473","line":"            difference_type __dn = _VSTD::min(static_cast<difference_type>(__clz_f), __n);"},
{"lineNum":"  474","line":"            __n -= __dn;"},
{"lineNum":"  475","line":"            __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));"},
{"lineNum":"  476","line":"            __storage_type __b = *__first.__seg_ & __m;"},
{"lineNum":"  477","line":"            unsigned __clz_r = __bits_per_word - __result.__ctz_;"},
{"lineNum":"  478","line":"            __storage_type __ddn = _VSTD::min<__storage_type>(__dn, __clz_r);"},
{"lineNum":"  479","line":"            __m = (~__storage_type(0) << __result.__ctz_) & (~__storage_type(0) >> (__clz_r - __ddn));"},
{"lineNum":"  480","line":"            *__result.__seg_ &= ~__m;"},
{"lineNum":"  481","line":"            if (__result.__ctz_ > __first.__ctz_)"},
{"lineNum":"  482","line":"                *__result.__seg_ |= __b << (__result.__ctz_ - __first.__ctz_);"},
{"lineNum":"  483","line":"            else"},
{"lineNum":"  484","line":"                *__result.__seg_ |= __b >> (__first.__ctz_ - __result.__ctz_);"},
{"lineNum":"  485","line":"            __result.__seg_ += (__ddn + __result.__ctz_) / __bits_per_word;"},
{"lineNum":"  486","line":"            __result.__ctz_ = static_cast<unsigned>((__ddn + __result.__ctz_)  % __bits_per_word);"},
{"lineNum":"  487","line":"            __dn -= __ddn;"},
{"lineNum":"  488","line":"            if (__dn > 0)"},
{"lineNum":"  489","line":"            {"},
{"lineNum":"  490","line":"                __m = ~__storage_type(0) >> (__bits_per_word - __dn);"},
{"lineNum":"  491","line":"                *__result.__seg_ &= ~__m;"},
{"lineNum":"  492","line":"                *__result.__seg_ |= __b >> (__first.__ctz_ + __ddn);"},
{"lineNum":"  493","line":"                __result.__ctz_ = static_cast<unsigned>(__dn);"},
{"lineNum":"  494","line":"            }"},
{"lineNum":"  495","line":"            ++__first.__seg_;"},
{"lineNum":"  496","line":"            // __first.__ctz_ = 0;"},
{"lineNum":"  497","line":"        }"},
{"lineNum":"  498","line":"        // __first.__ctz_ == 0;"},
{"lineNum":"  499","line":"        // do middle words"},
{"lineNum":"  500","line":"        unsigned __clz_r = __bits_per_word - __result.__ctz_;"},
{"lineNum":"  501","line":"        __storage_type __m = ~__storage_type(0) << __result.__ctz_;"},
{"lineNum":"  502","line":"        for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first.__seg_)"},
{"lineNum":"  503","line":"        {"},
{"lineNum":"  504","line":"            __storage_type __b = *__first.__seg_;"},
{"lineNum":"  505","line":"            *__result.__seg_ &= ~__m;"},
{"lineNum":"  506","line":"            *__result.__seg_ |= __b << __result.__ctz_;"},
{"lineNum":"  507","line":"            ++__result.__seg_;"},
{"lineNum":"  508","line":"            *__result.__seg_ &= __m;"},
{"lineNum":"  509","line":"            *__result.__seg_ |= __b >> __clz_r;"},
{"lineNum":"  510","line":"        }"},
{"lineNum":"  511","line":"        // do last word"},
{"lineNum":"  512","line":"        if (__n > 0)"},
{"lineNum":"  513","line":"        {"},
{"lineNum":"  514","line":"            __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  515","line":"            __storage_type __b = *__first.__seg_ & __m;"},
{"lineNum":"  516","line":"            __storage_type __dn = _VSTD::min(__n, static_cast<difference_type>(__clz_r));"},
{"lineNum":"  517","line":"            __m = (~__storage_type(0) << __result.__ctz_) & (~__storage_type(0) >> (__clz_r - __dn));"},
{"lineNum":"  518","line":"            *__result.__seg_ &= ~__m;"},
{"lineNum":"  519","line":"            *__result.__seg_ |= __b << __result.__ctz_;"},
{"lineNum":"  520","line":"            __result.__seg_ += (__dn + __result.__ctz_) / __bits_per_word;"},
{"lineNum":"  521","line":"            __result.__ctz_ = static_cast<unsigned>((__dn + __result.__ctz_)  % __bits_per_word);"},
{"lineNum":"  522","line":"            __n -= __dn;"},
{"lineNum":"  523","line":"            if (__n > 0)"},
{"lineNum":"  524","line":"            {"},
{"lineNum":"  525","line":"                __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  526","line":"                *__result.__seg_ &= ~__m;"},
{"lineNum":"  527","line":"                *__result.__seg_ |= __b >> __dn;"},
{"lineNum":"  528","line":"                __result.__ctz_ = static_cast<unsigned>(__n);"},
{"lineNum":"  529","line":"            }"},
{"lineNum":"  530","line":"        }"},
{"lineNum":"  531","line":"    }"},
{"lineNum":"  532","line":"    return __result;"},
{"lineNum":"  533","line":"}"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"template <class _Cp, bool _IsConst>"},
{"lineNum":"  536","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  537","line":"__bit_iterator<_Cp, false>"},
{"lineNum":"  538","line":"copy(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result)"},
{"lineNum":"  539","line":"{"},
{"lineNum":"  540","line":"    if (__first.__ctz_ == __result.__ctz_)"},
{"lineNum":"  541","line":"        return _VSTD::__copy_aligned(__first, __last, __result);"},
{"lineNum":"  542","line":"    return _VSTD::__copy_unaligned(__first, __last, __result);"},
{"lineNum":"  543","line":"}"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"// copy_backward"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"template <class _Cp, bool _IsConst>"},
{"lineNum":"  548","line":"__bit_iterator<_Cp, false>"},
{"lineNum":"  549","line":"__copy_backward_aligned(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last,"},
{"lineNum":"  550","line":"                                                     __bit_iterator<_Cp, false> __result)"},
{"lineNum":"  551","line":"{"},
{"lineNum":"  552","line":"    typedef __bit_iterator<_Cp, _IsConst> _In;"},
{"lineNum":"  553","line":"    typedef  typename _In::difference_type difference_type;"},
{"lineNum":"  554","line":"    typedef typename _In::__storage_type __storage_type;"},
{"lineNum":"  555","line":"    const int __bits_per_word = _In::__bits_per_word;"},
{"lineNum":"  556","line":"    difference_type __n = __last - __first;"},
{"lineNum":"  557","line":"    if (__n > 0)"},
{"lineNum":"  558","line":"    {"},
{"lineNum":"  559","line":"        // do first word"},
{"lineNum":"  560","line":"        if (__last.__ctz_ != 0)"},
{"lineNum":"  561","line":"        {"},
{"lineNum":"  562","line":"            difference_type __dn = _VSTD::min(static_cast<difference_type>(__last.__ctz_), __n);"},
{"lineNum":"  563","line":"            __n -= __dn;"},
{"lineNum":"  564","line":"            unsigned __clz = __bits_per_word - __last.__ctz_;"},
{"lineNum":"  565","line":"            __storage_type __m = (~__storage_type(0) << (__last.__ctz_ - __dn)) & (~__storage_type(0) >> __clz);"},
{"lineNum":"  566","line":"            __storage_type __b = *__last.__seg_ & __m;"},
{"lineNum":"  567","line":"            *__result.__seg_ &= ~__m;"},
{"lineNum":"  568","line":"            *__result.__seg_ |= __b;"},
{"lineNum":"  569","line":"            __result.__ctz_ = static_cast<unsigned>(((-__dn & (__bits_per_word - 1)) +"},
{"lineNum":"  570","line":"                                                       __result.__ctz_)  % __bits_per_word);"},
{"lineNum":"  571","line":"            // __last.__ctz_ = 0"},
{"lineNum":"  572","line":"         }"},
{"lineNum":"  573","line":"        // __last.__ctz_ == 0 || __n == 0"},
{"lineNum":"  574","line":"        // __result.__ctz_ == 0 || __n == 0"},
{"lineNum":"  575","line":"        // do middle words"},
{"lineNum":"  576","line":"        __storage_type __nw = __n / __bits_per_word;"},
{"lineNum":"  577","line":"        __result.__seg_ -= __nw;"},
{"lineNum":"  578","line":"        __last.__seg_ -= __nw;"},
{"lineNum":"  579","line":"        _VSTD::memmove(_VSTD::__to_address(__result.__seg_),"},
{"lineNum":"  580","line":"                       _VSTD::__to_address(__last.__seg_),"},
{"lineNum":"  581","line":"                       __nw * sizeof(__storage_type));"},
{"lineNum":"  582","line":"        __n -= __nw * __bits_per_word;"},
{"lineNum":"  583","line":"        // do last word"},
{"lineNum":"  584","line":"        if (__n > 0)"},
{"lineNum":"  585","line":"        {"},
{"lineNum":"  586","line":"            __storage_type __m = ~__storage_type(0) << (__bits_per_word - __n);"},
{"lineNum":"  587","line":"            __storage_type __b = *--__last.__seg_ & __m;"},
{"lineNum":"  588","line":"            *--__result.__seg_ &= ~__m;"},
{"lineNum":"  589","line":"            *__result.__seg_ |= __b;"},
{"lineNum":"  590","line":"            __result.__ctz_ = static_cast<unsigned>(-__n & (__bits_per_word - 1));"},
{"lineNum":"  591","line":"        }"},
{"lineNum":"  592","line":"    }"},
{"lineNum":"  593","line":"    return __result;"},
{"lineNum":"  594","line":"}"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"template <class _Cp, bool _IsConst>"},
{"lineNum":"  597","line":"__bit_iterator<_Cp, false>"},
{"lineNum":"  598","line":"__copy_backward_unaligned(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last,"},
{"lineNum":"  599","line":"                                                       __bit_iterator<_Cp, false> __result)"},
{"lineNum":"  600","line":"{"},
{"lineNum":"  601","line":"    typedef __bit_iterator<_Cp, _IsConst> _In;"},
{"lineNum":"  602","line":"    typedef  typename _In::difference_type difference_type;"},
{"lineNum":"  603","line":"    typedef typename _In::__storage_type __storage_type;"},
{"lineNum":"  604","line":"    const int __bits_per_word = _In::__bits_per_word;"},
{"lineNum":"  605","line":"    difference_type __n = __last - __first;"},
{"lineNum":"  606","line":"    if (__n > 0)"},
{"lineNum":"  607","line":"    {"},
{"lineNum":"  608","line":"        // do first word"},
{"lineNum":"  609","line":"        if (__last.__ctz_ != 0)"},
{"lineNum":"  610","line":"        {"},
{"lineNum":"  611","line":"            difference_type __dn = _VSTD::min(static_cast<difference_type>(__last.__ctz_), __n);"},
{"lineNum":"  612","line":"            __n -= __dn;"},
{"lineNum":"  613","line":"            unsigned __clz_l = __bits_per_word - __last.__ctz_;"},
{"lineNum":"  614","line":"            __storage_type __m = (~__storage_type(0) << (__last.__ctz_ - __dn)) & (~__storage_type(0) >> __clz_l);"},
{"lineNum":"  615","line":"            __storage_type __b = *__last.__seg_ & __m;"},
{"lineNum":"  616","line":"            unsigned __clz_r = __bits_per_word - __result.__ctz_;"},
{"lineNum":"  617","line":"            __storage_type __ddn = _VSTD::min(__dn, static_cast<difference_type>(__result.__ctz_));"},
{"lineNum":"  618","line":"            if (__ddn > 0)"},
{"lineNum":"  619","line":"            {"},
{"lineNum":"  620","line":"                __m = (~__storage_type(0) << (__result.__ctz_ - __ddn)) & (~__storage_type(0) >> __clz_r);"},
{"lineNum":"  621","line":"                *__result.__seg_ &= ~__m;"},
{"lineNum":"  622","line":"                if (__result.__ctz_ > __last.__ctz_)"},
{"lineNum":"  623","line":"                    *__result.__seg_ |= __b << (__result.__ctz_ - __last.__ctz_);"},
{"lineNum":"  624","line":"                else"},
{"lineNum":"  625","line":"                    *__result.__seg_ |= __b >> (__last.__ctz_ - __result.__ctz_);"},
{"lineNum":"  626","line":"                __result.__ctz_ = static_cast<unsigned>(((-__ddn & (__bits_per_word - 1)) +"},
{"lineNum":"  627","line":"                                                         __result.__ctz_)  % __bits_per_word);"},
{"lineNum":"  628","line":"                __dn -= __ddn;"},
{"lineNum":"  629","line":"            }"},
{"lineNum":"  630","line":"            if (__dn > 0)"},
{"lineNum":"  631","line":"            {"},
{"lineNum":"  632","line":"                // __result.__ctz_ == 0"},
{"lineNum":"  633","line":"                --__result.__seg_;"},
{"lineNum":"  634","line":"                __result.__ctz_ = static_cast<unsigned>(-__dn & (__bits_per_word - 1));"},
{"lineNum":"  635","line":"                __m = ~__storage_type(0) << __result.__ctz_;"},
{"lineNum":"  636","line":"                *__result.__seg_ &= ~__m;"},
{"lineNum":"  637","line":"                __last.__ctz_ -= __dn + __ddn;"},
{"lineNum":"  638","line":"                *__result.__seg_ |= __b << (__result.__ctz_ - __last.__ctz_);"},
{"lineNum":"  639","line":"            }"},
{"lineNum":"  640","line":"            // __last.__ctz_ = 0"},
{"lineNum":"  641","line":"         }"},
{"lineNum":"  642","line":"        // __last.__ctz_ == 0 || __n == 0"},
{"lineNum":"  643","line":"        // __result.__ctz_ != 0 || __n == 0"},
{"lineNum":"  644","line":"        // do middle words"},
{"lineNum":"  645","line":"        unsigned __clz_r = __bits_per_word - __result.__ctz_;"},
{"lineNum":"  646","line":"        __storage_type __m = ~__storage_type(0) >> __clz_r;"},
{"lineNum":"  647","line":"        for (; __n >= __bits_per_word; __n -= __bits_per_word)"},
{"lineNum":"  648","line":"        {"},
{"lineNum":"  649","line":"            __storage_type __b = *--__last.__seg_;"},
{"lineNum":"  650","line":"            *__result.__seg_ &= ~__m;"},
{"lineNum":"  651","line":"            *__result.__seg_ |= __b >> __clz_r;"},
{"lineNum":"  652","line":"            *--__result.__seg_ &= __m;"},
{"lineNum":"  653","line":"            *__result.__seg_ |= __b << __result.__ctz_;"},
{"lineNum":"  654","line":"        }"},
{"lineNum":"  655","line":"        // do last word"},
{"lineNum":"  656","line":"        if (__n > 0)"},
{"lineNum":"  657","line":"        {"},
{"lineNum":"  658","line":"            __m = ~__storage_type(0) << (__bits_per_word - __n);"},
{"lineNum":"  659","line":"            __storage_type __b = *--__last.__seg_ & __m;"},
{"lineNum":"  660","line":"            __clz_r = __bits_per_word - __result.__ctz_;"},
{"lineNum":"  661","line":"            __storage_type __dn = _VSTD::min(__n, static_cast<difference_type>(__result.__ctz_));"},
{"lineNum":"  662","line":"            __m = (~__storage_type(0) << (__result.__ctz_ - __dn)) & (~__storage_type(0) >> __clz_r);"},
{"lineNum":"  663","line":"            *__result.__seg_ &= ~__m;"},
{"lineNum":"  664","line":"            *__result.__seg_ |= __b >> (__bits_per_word - __result.__ctz_);"},
{"lineNum":"  665","line":"            __result.__ctz_ = static_cast<unsigned>(((-__dn & (__bits_per_word - 1)) +"},
{"lineNum":"  666","line":"                                                     __result.__ctz_)  % __bits_per_word);"},
{"lineNum":"  667","line":"            __n -= __dn;"},
{"lineNum":"  668","line":"            if (__n > 0)"},
{"lineNum":"  669","line":"            {"},
{"lineNum":"  670","line":"                // __result.__ctz_ == 0"},
{"lineNum":"  671","line":"                --__result.__seg_;"},
{"lineNum":"  672","line":"                __result.__ctz_ = static_cast<unsigned>(-__n & (__bits_per_word - 1));"},
{"lineNum":"  673","line":"                __m = ~__storage_type(0) << __result.__ctz_;"},
{"lineNum":"  674","line":"                *__result.__seg_ &= ~__m;"},
{"lineNum":"  675","line":"                *__result.__seg_ |= __b << (__result.__ctz_ - (__bits_per_word - __n - __dn));"},
{"lineNum":"  676","line":"            }"},
{"lineNum":"  677","line":"        }"},
{"lineNum":"  678","line":"    }"},
{"lineNum":"  679","line":"    return __result;"},
{"lineNum":"  680","line":"}"},
{"lineNum":"  681","line":""},
{"lineNum":"  682","line":"template <class _Cp, bool _IsConst>"},
{"lineNum":"  683","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  684","line":"__bit_iterator<_Cp, false>"},
{"lineNum":"  685","line":"copy_backward(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result)"},
{"lineNum":"  686","line":"{"},
{"lineNum":"  687","line":"    if (__last.__ctz_ == __result.__ctz_)"},
{"lineNum":"  688","line":"        return _VSTD::__copy_backward_aligned(__first, __last, __result);"},
{"lineNum":"  689","line":"    return _VSTD::__copy_backward_unaligned(__first, __last, __result);"},
{"lineNum":"  690","line":"}"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"// move"},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"template <class _Cp, bool _IsConst>"},
{"lineNum":"  695","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  696","line":"__bit_iterator<_Cp, false>"},
{"lineNum":"  697","line":"move(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result)"},
{"lineNum":"  698","line":"{"},
{"lineNum":"  699","line":"    return _VSTD::copy(__first, __last, __result);"},
{"lineNum":"  700","line":"}"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"// move_backward"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"template <class _Cp, bool _IsConst>"},
{"lineNum":"  705","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  706","line":"__bit_iterator<_Cp, false>"},
{"lineNum":"  707","line":"move_backward(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result)"},
{"lineNum":"  708","line":"{"},
{"lineNum":"  709","line":"    return _VSTD::copy_backward(__first, __last, __result);"},
{"lineNum":"  710","line":"}"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"// swap_ranges"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"template <class __C1, class __C2>"},
{"lineNum":"  715","line":"__bit_iterator<__C2, false>"},
{"lineNum":"  716","line":"__swap_ranges_aligned(__bit_iterator<__C1, false> __first, __bit_iterator<__C1, false> __last,"},
{"lineNum":"  717","line":"                      __bit_iterator<__C2, false> __result)"},
{"lineNum":"  718","line":"{"},
{"lineNum":"  719","line":"    typedef __bit_iterator<__C1, false> _I1;"},
{"lineNum":"  720","line":"    typedef  typename _I1::difference_type difference_type;"},
{"lineNum":"  721","line":"    typedef typename _I1::__storage_type __storage_type;"},
{"lineNum":"  722","line":"    const int __bits_per_word = _I1::__bits_per_word;"},
{"lineNum":"  723","line":"    difference_type __n = __last - __first;"},
{"lineNum":"  724","line":"    if (__n > 0)"},
{"lineNum":"  725","line":"    {"},
{"lineNum":"  726","line":"        // do first word"},
{"lineNum":"  727","line":"        if (__first.__ctz_ != 0)"},
{"lineNum":"  728","line":"        {"},
{"lineNum":"  729","line":"            unsigned __clz = __bits_per_word - __first.__ctz_;"},
{"lineNum":"  730","line":"            difference_type __dn = _VSTD::min(static_cast<difference_type>(__clz), __n);"},
{"lineNum":"  731","line":"            __n -= __dn;"},
{"lineNum":"  732","line":"            __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz - __dn));"},
{"lineNum":"  733","line":"            __storage_type __b1 = *__first.__seg_ & __m;"},
{"lineNum":"  734","line":"            *__first.__seg_ &= ~__m;"},
{"lineNum":"  735","line":"            __storage_type __b2 = *__result.__seg_ & __m;"},
{"lineNum":"  736","line":"            *__result.__seg_ &= ~__m;"},
{"lineNum":"  737","line":"            *__result.__seg_ |= __b1;"},
{"lineNum":"  738","line":"            *__first.__seg_  |= __b2;"},
{"lineNum":"  739","line":"            __result.__seg_ += (__dn + __result.__ctz_) / __bits_per_word;"},
{"lineNum":"  740","line":"            __result.__ctz_ = static_cast<unsigned>((__dn + __result.__ctz_)  % __bits_per_word);"},
{"lineNum":"  741","line":"            ++__first.__seg_;"},
{"lineNum":"  742","line":"            // __first.__ctz_ = 0;"},
{"lineNum":"  743","line":"        }"},
{"lineNum":"  744","line":"        // __first.__ctz_ == 0;"},
{"lineNum":"  745","line":"        // do middle words"},
{"lineNum":"  746","line":"        for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first.__seg_, ++__result.__seg_)"},
{"lineNum":"  747","line":"            swap(*__first.__seg_, *__result.__seg_);"},
{"lineNum":"  748","line":"        // do last word"},
{"lineNum":"  749","line":"        if (__n > 0)"},
{"lineNum":"  750","line":"        {"},
{"lineNum":"  751","line":"            __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  752","line":"            __storage_type __b1 = *__first.__seg_ & __m;"},
{"lineNum":"  753","line":"            *__first.__seg_ &= ~__m;"},
{"lineNum":"  754","line":"            __storage_type __b2 = *__result.__seg_ & __m;"},
{"lineNum":"  755","line":"            *__result.__seg_ &= ~__m;"},
{"lineNum":"  756","line":"            *__result.__seg_ |= __b1;"},
{"lineNum":"  757","line":"            *__first.__seg_  |= __b2;"},
{"lineNum":"  758","line":"            __result.__ctz_ = static_cast<unsigned>(__n);"},
{"lineNum":"  759","line":"        }"},
{"lineNum":"  760","line":"    }"},
{"lineNum":"  761","line":"    return __result;"},
{"lineNum":"  762","line":"}"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"template <class __C1, class __C2>"},
{"lineNum":"  765","line":"__bit_iterator<__C2, false>"},
{"lineNum":"  766","line":"__swap_ranges_unaligned(__bit_iterator<__C1, false> __first, __bit_iterator<__C1, false> __last,"},
{"lineNum":"  767","line":"                        __bit_iterator<__C2, false> __result)"},
{"lineNum":"  768","line":"{"},
{"lineNum":"  769","line":"    typedef __bit_iterator<__C1, false> _I1;"},
{"lineNum":"  770","line":"    typedef  typename _I1::difference_type difference_type;"},
{"lineNum":"  771","line":"    typedef typename _I1::__storage_type __storage_type;"},
{"lineNum":"  772","line":"    const int __bits_per_word = _I1::__bits_per_word;"},
{"lineNum":"  773","line":"    difference_type __n = __last - __first;"},
{"lineNum":"  774","line":"    if (__n > 0)"},
{"lineNum":"  775","line":"    {"},
{"lineNum":"  776","line":"        // do first word"},
{"lineNum":"  777","line":"        if (__first.__ctz_ != 0)"},
{"lineNum":"  778","line":"        {"},
{"lineNum":"  779","line":"            unsigned __clz_f = __bits_per_word - __first.__ctz_;"},
{"lineNum":"  780","line":"            difference_type __dn = _VSTD::min(static_cast<difference_type>(__clz_f), __n);"},
{"lineNum":"  781","line":"            __n -= __dn;"},
{"lineNum":"  782","line":"            __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));"},
{"lineNum":"  783","line":"            __storage_type __b1 = *__first.__seg_ & __m;"},
{"lineNum":"  784","line":"            *__first.__seg_ &= ~__m;"},
{"lineNum":"  785","line":"            unsigned __clz_r = __bits_per_word - __result.__ctz_;"},
{"lineNum":"  786","line":"            __storage_type __ddn = _VSTD::min<__storage_type>(__dn, __clz_r);"},
{"lineNum":"  787","line":"            __m = (~__storage_type(0) << __result.__ctz_) & (~__storage_type(0) >> (__clz_r - __ddn));"},
{"lineNum":"  788","line":"            __storage_type __b2 = *__result.__seg_ & __m;"},
{"lineNum":"  789","line":"            *__result.__seg_ &= ~__m;"},
{"lineNum":"  790","line":"            if (__result.__ctz_ > __first.__ctz_)"},
{"lineNum":"  791","line":"            {"},
{"lineNum":"  792","line":"                unsigned __s = __result.__ctz_ - __first.__ctz_;"},
{"lineNum":"  793","line":"                *__result.__seg_ |= __b1 << __s;"},
{"lineNum":"  794","line":"                *__first.__seg_  |= __b2 >> __s;"},
{"lineNum":"  795","line":"            }"},
{"lineNum":"  796","line":"            else"},
{"lineNum":"  797","line":"            {"},
{"lineNum":"  798","line":"                unsigned __s = __first.__ctz_ - __result.__ctz_;"},
{"lineNum":"  799","line":"                *__result.__seg_ |= __b1 >> __s;"},
{"lineNum":"  800","line":"                *__first.__seg_  |= __b2 << __s;"},
{"lineNum":"  801","line":"            }"},
{"lineNum":"  802","line":"            __result.__seg_ += (__ddn + __result.__ctz_) / __bits_per_word;"},
{"lineNum":"  803","line":"            __result.__ctz_ = static_cast<unsigned>((__ddn + __result.__ctz_)  % __bits_per_word);"},
{"lineNum":"  804","line":"            __dn -= __ddn;"},
{"lineNum":"  805","line":"            if (__dn > 0)"},
{"lineNum":"  806","line":"            {"},
{"lineNum":"  807","line":"                __m = ~__storage_type(0) >> (__bits_per_word - __dn);"},
{"lineNum":"  808","line":"                __b2 = *__result.__seg_ & __m;"},
{"lineNum":"  809","line":"                *__result.__seg_ &= ~__m;"},
{"lineNum":"  810","line":"                unsigned __s = __first.__ctz_ + __ddn;"},
{"lineNum":"  811","line":"                *__result.__seg_ |= __b1 >> __s;"},
{"lineNum":"  812","line":"                *__first.__seg_  |= __b2 << __s;"},
{"lineNum":"  813","line":"                __result.__ctz_ = static_cast<unsigned>(__dn);"},
{"lineNum":"  814","line":"            }"},
{"lineNum":"  815","line":"            ++__first.__seg_;"},
{"lineNum":"  816","line":"            // __first.__ctz_ = 0;"},
{"lineNum":"  817","line":"        }"},
{"lineNum":"  818","line":"        // __first.__ctz_ == 0;"},
{"lineNum":"  819","line":"        // do middle words"},
{"lineNum":"  820","line":"        __storage_type __m = ~__storage_type(0) << __result.__ctz_;"},
{"lineNum":"  821","line":"        unsigned __clz_r = __bits_per_word - __result.__ctz_;"},
{"lineNum":"  822","line":"        for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first.__seg_)"},
{"lineNum":"  823","line":"        {"},
{"lineNum":"  824","line":"            __storage_type __b1 = *__first.__seg_;"},
{"lineNum":"  825","line":"            __storage_type __b2 = *__result.__seg_ & __m;"},
{"lineNum":"  826","line":"            *__result.__seg_ &= ~__m;"},
{"lineNum":"  827","line":"            *__result.__seg_ |= __b1 << __result.__ctz_;"},
{"lineNum":"  828","line":"            *__first.__seg_  = __b2 >> __result.__ctz_;"},
{"lineNum":"  829","line":"            ++__result.__seg_;"},
{"lineNum":"  830","line":"            __b2 = *__result.__seg_ & ~__m;"},
{"lineNum":"  831","line":"            *__result.__seg_ &= __m;"},
{"lineNum":"  832","line":"            *__result.__seg_ |= __b1 >> __clz_r;"},
{"lineNum":"  833","line":"            *__first.__seg_  |= __b2 << __clz_r;"},
{"lineNum":"  834","line":"        }"},
{"lineNum":"  835","line":"        // do last word"},
{"lineNum":"  836","line":"        if (__n > 0)"},
{"lineNum":"  837","line":"        {"},
{"lineNum":"  838","line":"            __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  839","line":"            __storage_type __b1 = *__first.__seg_ & __m;"},
{"lineNum":"  840","line":"            *__first.__seg_ &= ~__m;"},
{"lineNum":"  841","line":"            __storage_type __dn = _VSTD::min<__storage_type>(__n, __clz_r);"},
{"lineNum":"  842","line":"            __m = (~__storage_type(0) << __result.__ctz_) & (~__storage_type(0) >> (__clz_r - __dn));"},
{"lineNum":"  843","line":"            __storage_type __b2 = *__result.__seg_ & __m;"},
{"lineNum":"  844","line":"            *__result.__seg_ &= ~__m;"},
{"lineNum":"  845","line":"            *__result.__seg_ |= __b1 << __result.__ctz_;"},
{"lineNum":"  846","line":"            *__first.__seg_  |= __b2 >> __result.__ctz_;"},
{"lineNum":"  847","line":"            __result.__seg_ += (__dn + __result.__ctz_) / __bits_per_word;"},
{"lineNum":"  848","line":"            __result.__ctz_ = static_cast<unsigned>((__dn + __result.__ctz_)  % __bits_per_word);"},
{"lineNum":"  849","line":"            __n -= __dn;"},
{"lineNum":"  850","line":"            if (__n > 0)"},
{"lineNum":"  851","line":"            {"},
{"lineNum":"  852","line":"                __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":"  853","line":"                __b2 = *__result.__seg_ & __m;"},
{"lineNum":"  854","line":"                *__result.__seg_ &= ~__m;"},
{"lineNum":"  855","line":"                *__result.__seg_ |= __b1 >> __dn;"},
{"lineNum":"  856","line":"                *__first.__seg_  |= __b2 << __dn;"},
{"lineNum":"  857","line":"                __result.__ctz_ = static_cast<unsigned>(__n);"},
{"lineNum":"  858","line":"            }"},
{"lineNum":"  859","line":"        }"},
{"lineNum":"  860","line":"    }"},
{"lineNum":"  861","line":"    return __result;"},
{"lineNum":"  862","line":"}"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"template <class __C1, class __C2>"},
{"lineNum":"  865","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  866","line":"__bit_iterator<__C2, false>"},
{"lineNum":"  867","line":"swap_ranges(__bit_iterator<__C1, false> __first1, __bit_iterator<__C1, false> __last1,"},
{"lineNum":"  868","line":"            __bit_iterator<__C2, false> __first2)"},
{"lineNum":"  869","line":"{"},
{"lineNum":"  870","line":"    if (__first1.__ctz_ == __first2.__ctz_)"},
{"lineNum":"  871","line":"        return _VSTD::__swap_ranges_aligned(__first1, __last1, __first2);"},
{"lineNum":"  872","line":"    return _VSTD::__swap_ranges_unaligned(__first1, __last1, __first2);"},
{"lineNum":"  873","line":"}"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"// rotate"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"template <class _Cp>"},
{"lineNum":"  878","line":"struct __bit_array"},
{"lineNum":"  879","line":"{"},
{"lineNum":"  880","line":"    typedef typename _Cp::difference_type difference_type;"},
{"lineNum":"  881","line":"    typedef typename _Cp::__storage_type  __storage_type;"},
{"lineNum":"  882","line":"    typedef typename _Cp::__storage_pointer __storage_pointer;"},
{"lineNum":"  883","line":"    typedef typename _Cp::iterator        iterator;"},
{"lineNum":"  884","line":"    static const unsigned __bits_per_word = _Cp::__bits_per_word;"},
{"lineNum":"  885","line":"    static const unsigned _Np = 4;"},
{"lineNum":"  886","line":""},
{"lineNum":"  887","line":"    difference_type __size_;"},
{"lineNum":"  888","line":"    __storage_type __word_[_Np];"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"    _LIBCPP_INLINE_VISIBILITY static difference_type capacity()"},
{"lineNum":"  891","line":"        {return static_cast<difference_type>(_Np * __bits_per_word);}"},
{"lineNum":"  892","line":"    _LIBCPP_INLINE_VISIBILITY explicit __bit_array(difference_type __s) : __size_(__s) {}"},
{"lineNum":"  893","line":"    _LIBCPP_INLINE_VISIBILITY iterator begin()"},
{"lineNum":"  894","line":"    {"},
{"lineNum":"  895","line":"        return iterator(pointer_traits<__storage_pointer>::pointer_to(__word_[0]), 0);"},
{"lineNum":"  896","line":"    }"},
{"lineNum":"  897","line":"    _LIBCPP_INLINE_VISIBILITY iterator end()"},
{"lineNum":"  898","line":"    {"},
{"lineNum":"  899","line":"        return iterator(pointer_traits<__storage_pointer>::pointer_to(__word_[0]) + __size_ / __bits_per_word,"},
{"lineNum":"  900","line":"                                                  static_cast<unsigned>(__size_ % __bits_per_word));"},
{"lineNum":"  901","line":"    }"},
{"lineNum":"  902","line":"};"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"template <class _Cp>"},
{"lineNum":"  905","line":"__bit_iterator<_Cp, false>"},
{"lineNum":"  906","line":"rotate(__bit_iterator<_Cp, false> __first, __bit_iterator<_Cp, false> __middle, __bit_iterator<_Cp, false> __last)"},
{"lineNum":"  907","line":"{"},
{"lineNum":"  908","line":"    typedef __bit_iterator<_Cp, false> _I1;"},
{"lineNum":"  909","line":"    typedef  typename _I1::difference_type difference_type;"},
{"lineNum":"  910","line":"    difference_type __d1 = __middle - __first;"},
{"lineNum":"  911","line":"    difference_type __d2 = __last - __middle;"},
{"lineNum":"  912","line":"    _I1 __r = __first + __d2;"},
{"lineNum":"  913","line":"    while (__d1 != 0 && __d2 != 0)"},
{"lineNum":"  914","line":"    {"},
{"lineNum":"  915","line":"        if (__d1 <= __d2)"},
{"lineNum":"  916","line":"        {"},
{"lineNum":"  917","line":"            if (__d1 <= __bit_array<_Cp>::capacity())"},
{"lineNum":"  918","line":"            {"},
{"lineNum":"  919","line":"                __bit_array<_Cp> __b(__d1);"},
{"lineNum":"  920","line":"                _VSTD::copy(__first, __middle, __b.begin());"},
{"lineNum":"  921","line":"                _VSTD::copy(__b.begin(), __b.end(), _VSTD::copy(__middle, __last, __first));"},
{"lineNum":"  922","line":"                break;"},
{"lineNum":"  923","line":"            }"},
{"lineNum":"  924","line":"            else"},
{"lineNum":"  925","line":"            {"},
{"lineNum":"  926","line":"                __bit_iterator<_Cp, false> __mp = _VSTD::swap_ranges(__first, __middle, __middle);"},
{"lineNum":"  927","line":"                __first = __middle;"},
{"lineNum":"  928","line":"                __middle = __mp;"},
{"lineNum":"  929","line":"                __d2 -= __d1;"},
{"lineNum":"  930","line":"            }"},
{"lineNum":"  931","line":"        }"},
{"lineNum":"  932","line":"        else"},
{"lineNum":"  933","line":"        {"},
{"lineNum":"  934","line":"            if (__d2 <= __bit_array<_Cp>::capacity())"},
{"lineNum":"  935","line":"            {"},
{"lineNum":"  936","line":"                __bit_array<_Cp> __b(__d2);"},
{"lineNum":"  937","line":"                _VSTD::copy(__middle, __last, __b.begin());"},
{"lineNum":"  938","line":"                _VSTD::copy_backward(__b.begin(), __b.end(), _VSTD::copy_backward(__first, __middle, __last));"},
{"lineNum":"  939","line":"                break;"},
{"lineNum":"  940","line":"            }"},
{"lineNum":"  941","line":"            else"},
{"lineNum":"  942","line":"            {"},
{"lineNum":"  943","line":"                __bit_iterator<_Cp, false> __mp = __first + __d2;"},
{"lineNum":"  944","line":"                _VSTD::swap_ranges(__first, __mp, __middle);"},
{"lineNum":"  945","line":"                __first = __mp;"},
{"lineNum":"  946","line":"                __d1 -= __d2;"},
{"lineNum":"  947","line":"            }"},
{"lineNum":"  948","line":"        }"},
{"lineNum":"  949","line":"    }"},
{"lineNum":"  950","line":"    return __r;"},
{"lineNum":"  951","line":"}"},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"// equal"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"template <class _Cp, bool _IC1, bool _IC2>"},
{"lineNum":"  956","line":"bool"},
{"lineNum":"  957","line":"__equal_unaligned(__bit_iterator<_Cp, _IC1> __first1, __bit_iterator<_Cp, _IC1> __last1,"},
{"lineNum":"  958","line":"                  __bit_iterator<_Cp, _IC2> __first2)"},
{"lineNum":"  959","line":"{"},
{"lineNum":"  960","line":"    typedef __bit_iterator<_Cp, _IC1> _It;"},
{"lineNum":"  961","line":"    typedef  typename _It::difference_type difference_type;"},
{"lineNum":"  962","line":"    typedef typename _It::__storage_type __storage_type;"},
{"lineNum":"  963","line":"    static const int __bits_per_word = _It::__bits_per_word;"},
{"lineNum":"  964","line":"    difference_type __n = __last1 - __first1;"},
{"lineNum":"  965","line":"    if (__n > 0)"},
{"lineNum":"  966","line":"    {"},
{"lineNum":"  967","line":"        // do first word"},
{"lineNum":"  968","line":"        if (__first1.__ctz_ != 0)"},
{"lineNum":"  969","line":"        {"},
{"lineNum":"  970","line":"            unsigned __clz_f = __bits_per_word - __first1.__ctz_;"},
{"lineNum":"  971","line":"            difference_type __dn = _VSTD::min(static_cast<difference_type>(__clz_f), __n);"},
{"lineNum":"  972","line":"            __n -= __dn;"},
{"lineNum":"  973","line":"            __storage_type __m = (~__storage_type(0) << __first1.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));"},
{"lineNum":"  974","line":"            __storage_type __b = *__first1.__seg_ & __m;"},
{"lineNum":"  975","line":"            unsigned __clz_r = __bits_per_word - __first2.__ctz_;"},
{"lineNum":"  976","line":"            __storage_type __ddn = _VSTD::min<__storage_type>(__dn, __clz_r);"},
{"lineNum":"  977","line":"            __m = (~__storage_type(0) << __first2.__ctz_) & (~__storage_type(0) >> (__clz_r - __ddn));"},
{"lineNum":"  978","line":"            if (__first2.__ctz_ > __first1.__ctz_)"},
{"lineNum":"  979","line":"            {"},
{"lineNum":"  980","line":"                if ((*__first2.__seg_ & __m) != (__b << (__first2.__ctz_ - __first1.__ctz_)))"},
{"lineNum":"  981","line":"                    return false;"},
{"lineNum":"  982","line":"            }"},
{"lineNum":"  983","line":"            else"},
{"lineNum":"  984","line":"            {"},
{"lineNum":"  985","line":"                if ((*__first2.__seg_ & __m) != (__b >> (__first1.__ctz_ - __first2.__ctz_)))"},
{"lineNum":"  986","line":"                    return false;"},
{"lineNum":"  987","line":"            }"},
{"lineNum":"  988","line":"            __first2.__seg_ += (__ddn + __first2.__ctz_) / __bits_per_word;"},
{"lineNum":"  989","line":"            __first2.__ctz_ = static_cast<unsigned>((__ddn + __first2.__ctz_)  % __bits_per_word);"},
{"lineNum":"  990","line":"            __dn -= __ddn;"},
{"lineNum":"  991","line":"            if (__dn > 0)"},
{"lineNum":"  992","line":"            {"},
{"lineNum":"  993","line":"                __m = ~__storage_type(0) >> (__bits_per_word - __dn);"},
{"lineNum":"  994","line":"                if ((*__first2.__seg_ & __m) != (__b >> (__first1.__ctz_ + __ddn)))"},
{"lineNum":"  995","line":"                    return false;"},
{"lineNum":"  996","line":"                __first2.__ctz_ = static_cast<unsigned>(__dn);"},
{"lineNum":"  997","line":"            }"},
{"lineNum":"  998","line":"            ++__first1.__seg_;"},
{"lineNum":"  999","line":"            // __first1.__ctz_ = 0;"},
{"lineNum":" 1000","line":"        }"},
{"lineNum":" 1001","line":"        // __first1.__ctz_ == 0;"},
{"lineNum":" 1002","line":"        // do middle words"},
{"lineNum":" 1003","line":"        unsigned __clz_r = __bits_per_word - __first2.__ctz_;"},
{"lineNum":" 1004","line":"        __storage_type __m = ~__storage_type(0) << __first2.__ctz_;"},
{"lineNum":" 1005","line":"        for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first1.__seg_)"},
{"lineNum":" 1006","line":"        {"},
{"lineNum":" 1007","line":"            __storage_type __b = *__first1.__seg_;"},
{"lineNum":" 1008","line":"            if ((*__first2.__seg_ & __m) != (__b << __first2.__ctz_))"},
{"lineNum":" 1009","line":"                return false;"},
{"lineNum":" 1010","line":"            ++__first2.__seg_;"},
{"lineNum":" 1011","line":"            if ((*__first2.__seg_ & ~__m) != (__b >> __clz_r))"},
{"lineNum":" 1012","line":"                return false;"},
{"lineNum":" 1013","line":"        }"},
{"lineNum":" 1014","line":"        // do last word"},
{"lineNum":" 1015","line":"        if (__n > 0)"},
{"lineNum":" 1016","line":"        {"},
{"lineNum":" 1017","line":"            __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":" 1018","line":"            __storage_type __b = *__first1.__seg_ & __m;"},
{"lineNum":" 1019","line":"            __storage_type __dn = _VSTD::min(__n, static_cast<difference_type>(__clz_r));"},
{"lineNum":" 1020","line":"            __m = (~__storage_type(0) << __first2.__ctz_) & (~__storage_type(0) >> (__clz_r - __dn));"},
{"lineNum":" 1021","line":"            if ((*__first2.__seg_ & __m) != (__b << __first2.__ctz_))"},
{"lineNum":" 1022","line":"                return false;"},
{"lineNum":" 1023","line":"            __first2.__seg_ += (__dn + __first2.__ctz_) / __bits_per_word;"},
{"lineNum":" 1024","line":"            __first2.__ctz_ = static_cast<unsigned>((__dn + __first2.__ctz_)  % __bits_per_word);"},
{"lineNum":" 1025","line":"            __n -= __dn;"},
{"lineNum":" 1026","line":"            if (__n > 0)"},
{"lineNum":" 1027","line":"            {"},
{"lineNum":" 1028","line":"                __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":" 1029","line":"                if ((*__first2.__seg_ & __m) != (__b >> __dn))"},
{"lineNum":" 1030","line":"                    return false;"},
{"lineNum":" 1031","line":"            }"},
{"lineNum":" 1032","line":"        }"},
{"lineNum":" 1033","line":"    }"},
{"lineNum":" 1034","line":"    return true;"},
{"lineNum":" 1035","line":"}"},
{"lineNum":" 1036","line":""},
{"lineNum":" 1037","line":"template <class _Cp, bool _IC1, bool _IC2>"},
{"lineNum":" 1038","line":"bool"},
{"lineNum":" 1039","line":"__equal_aligned(__bit_iterator<_Cp, _IC1> __first1, __bit_iterator<_Cp, _IC1> __last1,"},
{"lineNum":" 1040","line":"                __bit_iterator<_Cp, _IC2> __first2)"},
{"lineNum":" 1041","line":"{"},
{"lineNum":" 1042","line":"    typedef __bit_iterator<_Cp, _IC1> _It;"},
{"lineNum":" 1043","line":"    typedef  typename _It::difference_type difference_type;"},
{"lineNum":" 1044","line":"    typedef typename _It::__storage_type __storage_type;"},
{"lineNum":" 1045","line":"    static const int __bits_per_word = _It::__bits_per_word;"},
{"lineNum":" 1046","line":"    difference_type __n = __last1 - __first1;"},
{"lineNum":" 1047","line":"    if (__n > 0)"},
{"lineNum":" 1048","line":"    {"},
{"lineNum":" 1049","line":"        // do first word"},
{"lineNum":" 1050","line":"        if (__first1.__ctz_ != 0)"},
{"lineNum":" 1051","line":"        {"},
{"lineNum":" 1052","line":"            unsigned __clz = __bits_per_word - __first1.__ctz_;"},
{"lineNum":" 1053","line":"            difference_type __dn = _VSTD::min(static_cast<difference_type>(__clz), __n);"},
{"lineNum":" 1054","line":"            __n -= __dn;"},
{"lineNum":" 1055","line":"            __storage_type __m = (~__storage_type(0) << __first1.__ctz_) & (~__storage_type(0) >> (__clz - __dn));"},
{"lineNum":" 1056","line":"            if ((*__first2.__seg_ & __m) != (*__first1.__seg_ & __m))"},
{"lineNum":" 1057","line":"                return false;"},
{"lineNum":" 1058","line":"            ++__first2.__seg_;"},
{"lineNum":" 1059","line":"            ++__first1.__seg_;"},
{"lineNum":" 1060","line":"            // __first1.__ctz_ = 0;"},
{"lineNum":" 1061","line":"            // __first2.__ctz_ = 0;"},
{"lineNum":" 1062","line":"        }"},
{"lineNum":" 1063","line":"        // __first1.__ctz_ == 0;"},
{"lineNum":" 1064","line":"        // __first2.__ctz_ == 0;"},
{"lineNum":" 1065","line":"        // do middle words"},
{"lineNum":" 1066","line":"        for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first1.__seg_, ++__first2.__seg_)"},
{"lineNum":" 1067","line":"            if (*__first2.__seg_ != *__first1.__seg_)"},
{"lineNum":" 1068","line":"                return false;"},
{"lineNum":" 1069","line":"        // do last word"},
{"lineNum":" 1070","line":"        if (__n > 0)"},
{"lineNum":" 1071","line":"        {"},
{"lineNum":" 1072","line":"            __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);"},
{"lineNum":" 1073","line":"            if ((*__first2.__seg_ & __m) != (*__first1.__seg_ & __m))"},
{"lineNum":" 1074","line":"                return false;"},
{"lineNum":" 1075","line":"        }"},
{"lineNum":" 1076","line":"    }"},
{"lineNum":" 1077","line":"    return true;"},
{"lineNum":" 1078","line":"}"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"template <class _Cp, bool _IC1, bool _IC2>"},
{"lineNum":" 1081","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1082","line":"bool"},
{"lineNum":" 1083","line":"equal(__bit_iterator<_Cp, _IC1> __first1, __bit_iterator<_Cp, _IC1> __last1, __bit_iterator<_Cp, _IC2> __first2)"},
{"lineNum":" 1084","line":"{"},
{"lineNum":" 1085","line":"    if (__first1.__ctz_ == __first2.__ctz_)"},
{"lineNum":" 1086","line":"        return _VSTD::__equal_aligned(__first1, __last1, __first2);"},
{"lineNum":" 1087","line":"    return _VSTD::__equal_unaligned(__first1, __last1, __first2);"},
{"lineNum":" 1088","line":"}"},
{"lineNum":" 1089","line":""},
{"lineNum":" 1090","line":"template <class _Cp, bool _IsConst,"},
{"lineNum":" 1091","line":"          typename _Cp::__storage_type>"},
{"lineNum":" 1092","line":"class __bit_iterator"},
{"lineNum":" 1093","line":"{"},
{"lineNum":" 1094","line":"public:"},
{"lineNum":" 1095","line":"    typedef typename _Cp::difference_type                                                          difference_type;"},
{"lineNum":" 1096","line":"    typedef bool                                                                                  value_type;"},
{"lineNum":" 1097","line":"    typedef __bit_iterator                                                                        pointer;"},
{"lineNum":" 1098","line":"    typedef typename conditional<_IsConst, __bit_const_reference<_Cp>, __bit_reference<_Cp> >::type reference;"},
{"lineNum":" 1099","line":"    typedef random_access_iterator_tag                                                            iterator_category;"},
{"lineNum":" 1100","line":""},
{"lineNum":" 1101","line":"private:"},
{"lineNum":" 1102","line":"    typedef typename _Cp::__storage_type                                           __storage_type;"},
{"lineNum":" 1103","line":"    typedef typename conditional<_IsConst, typename _Cp::__const_storage_pointer,"},
{"lineNum":" 1104","line":"                                           typename _Cp::__storage_pointer>::type  __storage_pointer;"},
{"lineNum":" 1105","line":"    static const unsigned __bits_per_word = _Cp::__bits_per_word;"},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"    __storage_pointer __seg_;"},
{"lineNum":" 1108","line":"    unsigned          __ctz_;"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"public:"},
{"lineNum":" 1111","line":"    _LIBCPP_INLINE_VISIBILITY __bit_iterator() _NOEXCEPT"},
{"lineNum":" 1112","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1113","line":"    : __seg_(nullptr), __ctz_(0)"},
{"lineNum":" 1114","line":"#endif"},
{"lineNum":" 1115","line":"    {}"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"    // When _IsConst=false, this is the copy constructor."},
{"lineNum":" 1118","line":"    // It is non-trivial. Making it trivial would break ABI."},
{"lineNum":" 1119","line":"    // When _IsConst=true, this is a converting constructor;"},
{"lineNum":" 1120","line":"    // the copy and move constructors are implicitly generated"},
{"lineNum":" 1121","line":"    // and trivial."},
{"lineNum":" 1122","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1123","line":"    __bit_iterator(const __bit_iterator<_Cp, false>& __it) _NOEXCEPT"},
{"lineNum":" 1124","line":"        : __seg_(__it.__seg_), __ctz_(__it.__ctz_) {}"},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"    // When _IsConst=false, we have a user-provided copy constructor,"},
{"lineNum":" 1127","line":"    // so we must also provide a copy assignment operator because"},
{"lineNum":" 1128","line":"    // the implicit generation of a defaulted one is deprecated."},
{"lineNum":" 1129","line":"    // When _IsConst=true, the assignment operators are"},
{"lineNum":" 1130","line":"    // implicitly generated and trivial."},
{"lineNum":" 1131","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1132","line":"    __bit_iterator& operator=(const _If<_IsConst, struct __private_nat, __bit_iterator>& __it) {"},
{"lineNum":" 1133","line":"        __seg_ = __it.__seg_;"},
{"lineNum":" 1134","line":"        __ctz_ = __it.__ctz_;"},
{"lineNum":" 1135","line":"        return *this;"},
{"lineNum":" 1136","line":"    }"},
{"lineNum":" 1137","line":""},
{"lineNum":" 1138","line":"    _LIBCPP_INLINE_VISIBILITY reference operator*() const _NOEXCEPT"},
{"lineNum":" 1139","line":"        {return reference(__seg_, __storage_type(1) << __ctz_);}"},
{"lineNum":" 1140","line":""},
{"lineNum":" 1141","line":"    _LIBCPP_INLINE_VISIBILITY __bit_iterator& operator++()"},
{"lineNum":" 1142","line":"    {"},
{"lineNum":" 1143","line":"        if (__ctz_ != __bits_per_word-1)"},
{"lineNum":" 1144","line":"            ++__ctz_;"},
{"lineNum":" 1145","line":"        else"},
{"lineNum":" 1146","line":"        {"},
{"lineNum":" 1147","line":"            __ctz_ = 0;"},
{"lineNum":" 1148","line":"            ++__seg_;"},
{"lineNum":" 1149","line":"        }"},
{"lineNum":" 1150","line":"        return *this;"},
{"lineNum":" 1151","line":"    }"},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"    _LIBCPP_INLINE_VISIBILITY __bit_iterator operator++(int)"},
{"lineNum":" 1154","line":"    {"},
{"lineNum":" 1155","line":"        __bit_iterator __tmp = *this;"},
{"lineNum":" 1156","line":"        ++(*this);"},
{"lineNum":" 1157","line":"        return __tmp;"},
{"lineNum":" 1158","line":"    }"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"    _LIBCPP_INLINE_VISIBILITY __bit_iterator& operator--()"},
{"lineNum":" 1161","line":"    {"},
{"lineNum":" 1162","line":"        if (__ctz_ != 0)"},
{"lineNum":" 1163","line":"            --__ctz_;"},
{"lineNum":" 1164","line":"        else"},
{"lineNum":" 1165","line":"        {"},
{"lineNum":" 1166","line":"            __ctz_ = __bits_per_word - 1;"},
{"lineNum":" 1167","line":"            --__seg_;"},
{"lineNum":" 1168","line":"        }"},
{"lineNum":" 1169","line":"        return *this;"},
{"lineNum":" 1170","line":"    }"},
{"lineNum":" 1171","line":""},
{"lineNum":" 1172","line":"    _LIBCPP_INLINE_VISIBILITY __bit_iterator operator--(int)"},
{"lineNum":" 1173","line":"    {"},
{"lineNum":" 1174","line":"        __bit_iterator __tmp = *this;"},
{"lineNum":" 1175","line":"        --(*this);"},
{"lineNum":" 1176","line":"        return __tmp;"},
{"lineNum":" 1177","line":"    }"},
{"lineNum":" 1178","line":""},
{"lineNum":" 1179","line":"    _LIBCPP_INLINE_VISIBILITY __bit_iterator& operator+=(difference_type __n)"},
{"lineNum":" 1180","line":"    {"},
{"lineNum":" 1181","line":"        if (__n >= 0)"},
{"lineNum":" 1182","line":"            __seg_ += (__n + __ctz_) / __bits_per_word;"},
{"lineNum":" 1183","line":"        else"},
{"lineNum":" 1184","line":"            __seg_ += static_cast<difference_type>(__n - __bits_per_word + __ctz_ + 1)"},
{"lineNum":" 1185","line":"                    / static_cast<difference_type>(__bits_per_word);"},
{"lineNum":" 1186","line":"        __n &= (__bits_per_word - 1);"},
{"lineNum":" 1187","line":"        __ctz_ = static_cast<unsigned>((__n + __ctz_)  % __bits_per_word);"},
{"lineNum":" 1188","line":"        return *this;"},
{"lineNum":" 1189","line":"    }"},
{"lineNum":" 1190","line":""},
{"lineNum":" 1191","line":"    _LIBCPP_INLINE_VISIBILITY __bit_iterator& operator-=(difference_type __n)"},
{"lineNum":" 1192","line":"    {"},
{"lineNum":" 1193","line":"        return *this += -__n;"},
{"lineNum":" 1194","line":"    }"},
{"lineNum":" 1195","line":""},
{"lineNum":" 1196","line":"    _LIBCPP_INLINE_VISIBILITY __bit_iterator operator+(difference_type __n) const"},
{"lineNum":" 1197","line":"    {"},
{"lineNum":" 1198","line":"        __bit_iterator __t(*this);"},
{"lineNum":" 1199","line":"        __t += __n;"},
{"lineNum":" 1200","line":"        return __t;"},
{"lineNum":" 1201","line":"    }"},
{"lineNum":" 1202","line":""},
{"lineNum":" 1203","line":"    _LIBCPP_INLINE_VISIBILITY __bit_iterator operator-(difference_type __n) const"},
{"lineNum":" 1204","line":"    {"},
{"lineNum":" 1205","line":"        __bit_iterator __t(*this);"},
{"lineNum":" 1206","line":"        __t -= __n;"},
{"lineNum":" 1207","line":"        return __t;"},
{"lineNum":" 1208","line":"    }"},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1211","line":"    friend __bit_iterator operator+(difference_type __n, const __bit_iterator& __it) {return __it + __n;}"},
{"lineNum":" 1212","line":""},
{"lineNum":" 1213","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1214","line":"    friend difference_type operator-(const __bit_iterator& __x, const __bit_iterator& __y)"},
{"lineNum":" 1215","line":"        {return (__x.__seg_ - __y.__seg_) * __bits_per_word + __x.__ctz_ - __y.__ctz_;}"},
{"lineNum":" 1216","line":""},
{"lineNum":" 1217","line":"    _LIBCPP_INLINE_VISIBILITY reference operator[](difference_type __n) const {return *(*this + __n);}"},
{"lineNum":" 1218","line":""},
{"lineNum":" 1219","line":"    _LIBCPP_INLINE_VISIBILITY friend bool operator==(const __bit_iterator& __x, const __bit_iterator& __y)"},
{"lineNum":" 1220","line":"        {return __x.__seg_ == __y.__seg_ && __x.__ctz_ == __y.__ctz_;}"},
{"lineNum":" 1221","line":""},
{"lineNum":" 1222","line":"    _LIBCPP_INLINE_VISIBILITY friend bool operator!=(const __bit_iterator& __x, const __bit_iterator& __y)"},
{"lineNum":" 1223","line":"        {return !(__x == __y);}"},
{"lineNum":" 1224","line":""},
{"lineNum":" 1225","line":"    _LIBCPP_INLINE_VISIBILITY friend bool operator<(const __bit_iterator& __x, const __bit_iterator& __y)"},
{"lineNum":" 1226","line":"        {return __x.__seg_ < __y.__seg_ || (__x.__seg_ == __y.__seg_ && __x.__ctz_ < __y.__ctz_);}"},
{"lineNum":" 1227","line":""},
{"lineNum":" 1228","line":"    _LIBCPP_INLINE_VISIBILITY friend bool operator>(const __bit_iterator& __x, const __bit_iterator& __y)"},
{"lineNum":" 1229","line":"        {return __y < __x;}"},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"    _LIBCPP_INLINE_VISIBILITY friend bool operator<=(const __bit_iterator& __x, const __bit_iterator& __y)"},
{"lineNum":" 1232","line":"        {return !(__y < __x);}"},
{"lineNum":" 1233","line":""},
{"lineNum":" 1234","line":"    _LIBCPP_INLINE_VISIBILITY friend bool operator>=(const __bit_iterator& __x, const __bit_iterator& __y)"},
{"lineNum":" 1235","line":"        {return !(__x < __y);}"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"private:"},
{"lineNum":" 1238","line":"    _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 1239","line":"    __bit_iterator(__storage_pointer __s, unsigned __ctz) _NOEXCEPT"},
{"lineNum":" 1240","line":"        : __seg_(__s), __ctz_(__ctz) {}"},
{"lineNum":" 1241","line":""},
{"lineNum":" 1242","line":"    friend typename _Cp::__self;"},
{"lineNum":" 1243","line":""},
{"lineNum":" 1244","line":"    friend class __bit_reference<_Cp>;"},
{"lineNum":" 1245","line":"    friend class __bit_const_reference<_Cp>;"},
{"lineNum":" 1246","line":"    friend class __bit_iterator<_Cp, true>;"},
{"lineNum":" 1247","line":"    template <class _Dp> friend struct __bit_array;"},
{"lineNum":" 1248","line":"    template <class _Dp> friend void __fill_n_false(__bit_iterator<_Dp, false> __first, typename _Dp::size_type __n);"},
{"lineNum":" 1249","line":"    template <class _Dp> friend void __fill_n_true(__bit_iterator<_Dp, false> __first, typename _Dp::size_type __n);"},
{"lineNum":" 1250","line":"    template <class _Dp, bool _IC> friend __bit_iterator<_Dp, false> __copy_aligned(__bit_iterator<_Dp, _IC> __first,"},
{"lineNum":" 1251","line":"                                                                                  __bit_iterator<_Dp, _IC> __last,"},
{"lineNum":" 1252","line":"                                                                                  __bit_iterator<_Dp, false> __result);"},
{"lineNum":" 1253","line":"    template <class _Dp, bool _IC> friend __bit_iterator<_Dp, false> __copy_unaligned(__bit_iterator<_Dp, _IC> __first,"},
{"lineNum":" 1254","line":"                                                                                    __bit_iterator<_Dp, _IC> __last,"},
{"lineNum":" 1255","line":"                                                                                    __bit_iterator<_Dp, false> __result);"},
{"lineNum":" 1256","line":"    template <class _Dp, bool _IC> friend __bit_iterator<_Dp, false> copy(__bit_iterator<_Dp, _IC> __first,"},
{"lineNum":" 1257","line":"                                                                        __bit_iterator<_Dp, _IC> __last,"},
{"lineNum":" 1258","line":"                                                                        __bit_iterator<_Dp, false> __result);"},
{"lineNum":" 1259","line":"    template <class _Dp, bool _IC> friend __bit_iterator<_Dp, false> __copy_backward_aligned(__bit_iterator<_Dp, _IC> __first,"},
{"lineNum":" 1260","line":"                                                                                           __bit_iterator<_Dp, _IC> __last,"},
{"lineNum":" 1261","line":"                                                                                           __bit_iterator<_Dp, false> __result);"},
{"lineNum":" 1262","line":"    template <class _Dp, bool _IC> friend __bit_iterator<_Dp, false> __copy_backward_unaligned(__bit_iterator<_Dp, _IC> __first,"},
{"lineNum":" 1263","line":"                                                                                             __bit_iterator<_Dp, _IC> __last,"},
{"lineNum":" 1264","line":"                                                                                             __bit_iterator<_Dp, false> __result);"},
{"lineNum":" 1265","line":"    template <class _Dp, bool _IC> friend __bit_iterator<_Dp, false> copy_backward(__bit_iterator<_Dp, _IC> __first,"},
{"lineNum":" 1266","line":"                                                                                 __bit_iterator<_Dp, _IC> __last,"},
{"lineNum":" 1267","line":"                                                                                 __bit_iterator<_Dp, false> __result);"},
{"lineNum":" 1268","line":"    template <class __C1, class __C2>friend __bit_iterator<__C2, false> __swap_ranges_aligned(__bit_iterator<__C1, false>,"},
{"lineNum":" 1269","line":"                                                                                           __bit_iterator<__C1, false>,"},
{"lineNum":" 1270","line":"                                                                                           __bit_iterator<__C2, false>);"},
{"lineNum":" 1271","line":"    template <class __C1, class __C2>friend __bit_iterator<__C2, false> __swap_ranges_unaligned(__bit_iterator<__C1, false>,"},
{"lineNum":" 1272","line":"                                                                                             __bit_iterator<__C1, false>,"},
{"lineNum":" 1273","line":"                                                                                             __bit_iterator<__C2, false>);"},
{"lineNum":" 1274","line":"    template <class __C1, class __C2>friend __bit_iterator<__C2, false> swap_ranges(__bit_iterator<__C1, false>,"},
{"lineNum":" 1275","line":"                                                                                 __bit_iterator<__C1, false>,"},
{"lineNum":" 1276","line":"                                                                                 __bit_iterator<__C2, false>);"},
{"lineNum":" 1277","line":"    template <class _Dp> friend __bit_iterator<_Dp, false> rotate(__bit_iterator<_Dp, false>,"},
{"lineNum":" 1278","line":"                                                                __bit_iterator<_Dp, false>,"},
{"lineNum":" 1279","line":"                                                                __bit_iterator<_Dp, false>);"},
{"lineNum":" 1280","line":"    template <class _Dp, bool _IC1, bool _IC2> friend bool __equal_aligned(__bit_iterator<_Dp, _IC1>,"},
{"lineNum":" 1281","line":"                                                    __bit_iterator<_Dp, _IC1>,"},
{"lineNum":" 1282","line":"                                                    __bit_iterator<_Dp, _IC2>);"},
{"lineNum":" 1283","line":"    template <class _Dp, bool _IC1, bool _IC2> friend bool __equal_unaligned(__bit_iterator<_Dp, _IC1>,"},
{"lineNum":" 1284","line":"                                                      __bit_iterator<_Dp, _IC1>,"},
{"lineNum":" 1285","line":"                                                      __bit_iterator<_Dp, _IC2>);"},
{"lineNum":" 1286","line":"    template <class _Dp, bool _IC1, bool _IC2> friend bool equal(__bit_iterator<_Dp, _IC1>,"},
{"lineNum":" 1287","line":"                                                                __bit_iterator<_Dp, _IC1>,"},
{"lineNum":" 1288","line":"                                                                __bit_iterator<_Dp, _IC2>);"},
{"lineNum":" 1289","line":"    template <class _Dp, bool _IC> friend __bit_iterator<_Dp, _IC> __find_bool_true(__bit_iterator<_Dp, _IC>,"},
{"lineNum":" 1290","line":"                                                                          typename _Dp::size_type);"},
{"lineNum":" 1291","line":"    template <class _Dp, bool _IC> friend __bit_iterator<_Dp, _IC> __find_bool_false(__bit_iterator<_Dp, _IC>,"},
{"lineNum":" 1292","line":"                                                                           typename _Dp::size_type);"},
{"lineNum":" 1293","line":"    template <class _Dp, bool _IC> friend typename __bit_iterator<_Dp, _IC>::difference_type"},
{"lineNum":" 1294","line":"                   __count_bool_true(__bit_iterator<_Dp, _IC>, typename _Dp::size_type);"},
{"lineNum":" 1295","line":"    template <class _Dp, bool _IC> friend typename __bit_iterator<_Dp, _IC>::difference_type"},
{"lineNum":" 1296","line":"                   __count_bool_false(__bit_iterator<_Dp, _IC>, typename _Dp::size_type);"},
{"lineNum":" 1297","line":"};"},
{"lineNum":" 1298","line":""},
{"lineNum":" 1299","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 1300","line":""},
{"lineNum":" 1301","line":"_LIBCPP_POP_MACROS"},
{"lineNum":" 1302","line":""},
{"lineNum":" 1303","line":"#endif // _LIBCPP___BIT_REFERENCE"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 15, "covered" : 0,};
var merged_data = [];
