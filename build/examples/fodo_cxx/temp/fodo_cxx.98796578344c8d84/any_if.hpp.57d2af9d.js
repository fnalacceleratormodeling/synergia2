var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"==============================================================================*/"},
{"lineNum":"    8","line":"#if !defined(BOOST_SPIRIT_ANY_IF_MARCH_30_2007_1220PM)"},
{"lineNum":"    9","line":"#define BOOST_SPIRIT_ANY_IF_MARCH_30_2007_1220PM"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#if defined(_MSC_VER)"},
{"lineNum":"   12","line":"#pragma once"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/fusion/include/equal_to.hpp>"},
{"lineNum":"   16","line":"#include <boost/fusion/include/next.hpp>"},
{"lineNum":"   17","line":"#include <boost/fusion/include/deref.hpp>"},
{"lineNum":"   18","line":"#include <boost/fusion/include/value_of.hpp>"},
{"lineNum":"   19","line":"#include <boost/fusion/include/begin.hpp>"},
{"lineNum":"   20","line":"#include <boost/fusion/include/end.hpp>"},
{"lineNum":"   21","line":"#include <boost/fusion/include/is_sequence.hpp>"},
{"lineNum":"   22","line":"#include <boost/fusion/include/any.hpp>"},
{"lineNum":"   23","line":"#include <boost/spirit/home/support/unused.hpp>"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#include <boost/mpl/bool.hpp>"},
{"lineNum":"   26","line":"#include <boost/mpl/apply.hpp>"},
{"lineNum":"   27","line":"#include <boost/mpl/if.hpp>"},
{"lineNum":"   28","line":"#include <boost/mpl/identity.hpp>"},
{"lineNum":"   29","line":"#include <boost/mpl/and.hpp>"},
{"lineNum":"   30","line":"#include <boost/mpl/not.hpp>"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"namespace boost { namespace spirit"},
{"lineNum":"   33","line":"{"},
{"lineNum":"   34","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   35","line":"    //  This is a special version for a binary fusion::any. The predicate"},
{"lineNum":"   36","line":"    //  is used to decide whether to advance the second iterator or not."},
{"lineNum":"   37","line":"    //  This is needed for sequences containing components with unused"},
{"lineNum":"   38","line":"    //  attributes. The second iterator is advanced only if the attribute"},
{"lineNum":"   39","line":"    //  of the corresponding component iterator is not unused."},
{"lineNum":"   40","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   41","line":"    namespace detail"},
{"lineNum":"   42","line":"    {"},
{"lineNum":"   43","line":"        ///////////////////////////////////////////////////////////////////////"},
{"lineNum":"   44","line":"        template <typename Iterator, typename Pred>"},
{"lineNum":"   45","line":"        struct apply_predicate"},
{"lineNum":"   46","line":"          : mpl::apply1<Pred, typename fusion::result_of::value_of<Iterator>::type>"},
{"lineNum":"   47","line":"        {};"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"        ///////////////////////////////////////////////////////////////////////"},
{"lineNum":"   50","line":"        //  if the predicate is true, attribute_next returns next(Iterator2),"},
{"lineNum":"   51","line":"        //  otherwise Iterator2"},
{"lineNum":"   52","line":"        namespace result_of"},
{"lineNum":"   53","line":"        {"},
{"lineNum":"   54","line":"            template <"},
{"lineNum":"   55","line":"                typename Iterator1, typename Iterator2, typename Last2"},
{"lineNum":"   56","line":"              , typename Pred>"},
{"lineNum":"   57","line":"            struct attribute_next"},
{"lineNum":"   58","line":"            {"},
{"lineNum":"   59","line":"                typedef mpl::and_<"},
{"lineNum":"   60","line":"                    apply_predicate<Iterator1, Pred>"},
{"lineNum":"   61","line":"                  , mpl::not_<fusion::result_of::equal_to<Iterator2, Last2> >"},
{"lineNum":"   62","line":"                > pred;"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"                typedef typename"},
{"lineNum":"   65","line":"                    mpl::eval_if<"},
{"lineNum":"   66","line":"                        pred"},
{"lineNum":"   67","line":"                      , fusion::result_of::next<Iterator2>"},
{"lineNum":"   68","line":"                      , mpl::identity<Iterator2>"},
{"lineNum":"   69","line":"                    >::type"},
{"lineNum":"   70","line":"                type;"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"                template <typename Iterator>"},
{"lineNum":"   73","line":"                static type"},
{"lineNum":"   74","line":"                call(Iterator const& i, mpl::true_)"},
{"lineNum":"   75","line":"                {"},
{"lineNum":"   76","line":"                    return fusion::next(i);"},
{"lineNum":"   77","line":"                }"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"                template <typename Iterator>"},
{"lineNum":"   80","line":"                static type"},
{"lineNum":"   81","line":"                call(Iterator const& i, mpl::false_)"},
{"lineNum":"   82","line":"                {"},
{"lineNum":"   83","line":"                    return i;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"                }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"                template <typename Iterator>"},
{"lineNum":"   87","line":"                static type"},
{"lineNum":"   88","line":"                call(Iterator const& i)"},
{"lineNum":"   89","line":"                {"},
{"lineNum":"   90","line":"                    return call(i, pred());"},
{"lineNum":"   91","line":"                }"},
{"lineNum":"   92","line":"            };"},
{"lineNum":"   93","line":"        }"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"        template <"},
{"lineNum":"   96","line":"            typename Pred, typename Iterator1, typename Last2"},
{"lineNum":"   97","line":"          , typename Iterator2>"},
{"lineNum":"   98","line":"        inline typename"},
{"lineNum":"   99","line":"            result_of::attribute_next<Iterator1, Iterator2, Last2, Pred"},
{"lineNum":"  100","line":"        >::type const"},
{"lineNum":"  101","line":"        attribute_next(Iterator2 const& i)"},
{"lineNum":"  102","line":"        {"},
{"lineNum":"  103","line":"            return result_of::attribute_next<"},
{"lineNum":"  104","line":"                Iterator1, Iterator2, Last2, Pred>::call(i);"},
{"lineNum":"  105","line":"        }"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"        ///////////////////////////////////////////////////////////////////////"},
{"lineNum":"  108","line":"        //  if the predicate is true, attribute_value returns deref(Iterator2),"},
{"lineNum":"  109","line":"        //  otherwise unused"},
{"lineNum":"  110","line":"        namespace result_of"},
{"lineNum":"  111","line":"        {"},
{"lineNum":"  112","line":"            template <"},
{"lineNum":"  113","line":"                typename Iterator1, typename Iterator2, typename Last2"},
{"lineNum":"  114","line":"              , typename Pred>"},
{"lineNum":"  115","line":"            struct attribute_value"},
{"lineNum":"  116","line":"            {"},
{"lineNum":"  117","line":"                typedef mpl::and_<"},
{"lineNum":"  118","line":"                    apply_predicate<Iterator1, Pred>"},
{"lineNum":"  119","line":"                  , mpl::not_<fusion::result_of::equal_to<Iterator2, Last2> >"},
{"lineNum":"  120","line":"                > pred;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"                typedef typename"},
{"lineNum":"  123","line":"                    mpl::eval_if<"},
{"lineNum":"  124","line":"                        pred"},
{"lineNum":"  125","line":"                      , fusion::result_of::deref<Iterator2>"},
{"lineNum":"  126","line":"                      , mpl::identity<unused_type const>"},
{"lineNum":"  127","line":"                    >::type"},
{"lineNum":"  128","line":"                type;"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"                template <typename Iterator>"},
{"lineNum":"  131","line":"                static type"},
{"lineNum":"  132","line":"                call(Iterator const& i, mpl::true_)"},
{"lineNum":"  133","line":"                {"},
{"lineNum":"  134","line":"                    return fusion::deref(i);"},
{"lineNum":"  135","line":"                }"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"                template <typename Iterator>"},
{"lineNum":"  138","line":"                static type"},
{"lineNum":"  139","line":"                call(Iterator const&, mpl::false_)"},
{"lineNum":"  140","line":"                {"},
{"lineNum":"  141","line":"                    return unused;"},
{"lineNum":"  142","line":"                }"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"                template <typename Iterator>"},
{"lineNum":"  145","line":"                static type"},
{"lineNum":"  146","line":"                call(Iterator const& i)"},
{"lineNum":"  147","line":"                {"},
{"lineNum":"  148","line":"                    return call(i, pred());"},
{"lineNum":"  149","line":"                }"},
{"lineNum":"  150","line":"            };"},
{"lineNum":"  151","line":"        }"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"        template <"},
{"lineNum":"  154","line":"            typename Pred, typename Iterator1, typename Last2"},
{"lineNum":"  155","line":"          , typename Iterator2>"},
{"lineNum":"  156","line":"        inline typename"},
{"lineNum":"  157","line":"            result_of::attribute_value<Iterator1, Iterator2, Last2, Pred"},
{"lineNum":"  158","line":"        >::type"},
{"lineNum":"  159","line":"        attribute_value(Iterator2 const& i)"},
{"lineNum":"  160","line":"        {"},
{"lineNum":"  161","line":"            return result_of::attribute_value<"},
{"lineNum":"  162","line":"                Iterator1, Iterator2, Last2, Pred>::call(i);"},
{"lineNum":"  163","line":"        }"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"        ///////////////////////////////////////////////////////////////////////"},
{"lineNum":"  166","line":"        template <"},
{"lineNum":"  167","line":"            typename Pred, typename First1, typename Last1, typename First2"},
{"lineNum":"  168","line":"          , typename Last2, typename F>"},
{"lineNum":"  169","line":"        inline bool"},
{"lineNum":"  170","line":"        any_if (First1 const&, First2 const&, Last1 const&, Last2 const&"},
{"lineNum":"  171","line":"          , F const&, mpl::true_)"},
{"lineNum":"  172","line":"        {"},
{"lineNum":"  173","line":"            return false;"},
{"lineNum":"  174","line":"        }"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"        template <"},
{"lineNum":"  177","line":"            typename Pred, typename First1, typename Last1, typename First2"},
{"lineNum":"  178","line":"          , typename Last2, typename F>"},
{"lineNum":"  179","line":"        inline bool"},
{"lineNum":"  180","line":"        any_if (First1 const& first1, First2 const& first2, Last1 const& last1"},
{"lineNum":"  181","line":"          , Last2 const& last2, F& f, mpl::false_)"},
{"lineNum":"  182","line":"        {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  183","line":"            typename result_of::attribute_value<First1, First2, Last2, Pred>::type"},
{"lineNum":"  184","line":"                attribute = spirit::detail::attribute_value<Pred, First1, Last2>(first2);"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"            return f(*first1, attribute) ||","class":"lineNoCov","hits":"0","possible_hits":"52",},
{"lineNum":"  187","line":"                detail::any_if<Pred>(","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  188","line":"                    fusion::next(first1)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  189","line":"                  , attribute_next<Pred, First1, Last2>(first2)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  190","line":"                  , last1, last2"},
{"lineNum":"  191","line":"                  , f"},
{"lineNum":"  192","line":"                  , fusion::result_of::equal_to<"},
{"lineNum":"  193","line":"                        typename fusion::result_of::next<First1>::type, Last1>());"},
{"lineNum":"  194","line":"        }"},
{"lineNum":"  195","line":"    }"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    template <typename Pred, typename Sequence1, typename Sequence2, typename F>"},
{"lineNum":"  198","line":"    inline bool"},
{"lineNum":"  199","line":"    any_if(Sequence1 const& seq1, Sequence2& seq2, F f, Pred)"},
{"lineNum":"  200","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  201","line":"        return detail::any_if<Pred>(","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  202","line":"                fusion::begin(seq1), fusion::begin(seq2)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  203","line":"              , fusion::end(seq1), fusion::end(seq2)","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  204","line":"              , f"},
{"lineNum":"  205","line":"              , fusion::result_of::equal_to<"},
{"lineNum":"  206","line":"                    typename fusion::result_of::begin<Sequence1>::type"},
{"lineNum":"  207","line":"                  , typename fusion::result_of::end<Sequence1>::type>());"},
{"lineNum":"  208","line":"    }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    template <typename Pred, typename Sequence, typename F>"},
{"lineNum":"  211","line":"    inline bool"},
{"lineNum":"  212","line":"    any_if(Sequence const& seq, unused_type const, F f, Pred)"},
{"lineNum":"  213","line":"    {"},
{"lineNum":"  214","line":"        return fusion::any(seq, f);"},
{"lineNum":"  215","line":"    }"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"}}"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"#endif"},
{"lineNum":"  220","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 10, "covered" : 0,};
var merged_data = [];
