var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    5","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    6","line":"==============================================================================*/"},
{"lineNum":"    7","line":"#if !defined(BOOST_SPIRIT_PARSER_BINDER_DECEMBER_05_2008_0516_PM)"},
{"lineNum":"    8","line":"#define BOOST_SPIRIT_PARSER_BINDER_DECEMBER_05_2008_0516_PM"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#if defined(_MSC_VER)"},
{"lineNum":"   11","line":"#pragma once"},
{"lineNum":"   12","line":"#endif"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include <boost/fusion/include/at.hpp>"},
{"lineNum":"   15","line":"#include <boost/mpl/bool.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/support/has_semantic_action.hpp>"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"namespace boost { namespace spirit { namespace qi { namespace detail"},
{"lineNum":"   19","line":"{"},
{"lineNum":"   20","line":"    // parser_binder for plain rules"},
{"lineNum":"   21","line":"    template <typename Parser, typename Auto>"},
{"lineNum":"   22","line":"    struct parser_binder","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"   23","line":"    {"},
{"lineNum":"   24","line":"        parser_binder(Parser const& p_)"},
{"lineNum":"   25","line":"          : p(p_) {}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"        template <typename Iterator, typename Skipper, typename Context>"},
{"lineNum":"   28","line":"        bool call(Iterator& first, Iterator const& last"},
{"lineNum":"   29","line":"          , Context& context, Skipper const& skipper, mpl::true_) const"},
{"lineNum":"   30","line":"        {"},
{"lineNum":"   31","line":"            // If DeducedAuto is false (semantic actions is present), the"},
{"lineNum":"   32","line":"            // component\'s attribute is unused."},
{"lineNum":"   33","line":"            return p.parse(first, last, context, skipper, unused);","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   34","line":"        }"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"        template <typename Iterator, typename Skipper, typename Context>"},
{"lineNum":"   37","line":"        bool call(Iterator& first, Iterator const& last"},
{"lineNum":"   38","line":"          , Context& context, Skipper const& skipper, mpl::false_) const"},
{"lineNum":"   39","line":"        {"},
{"lineNum":"   40","line":"            // If DeducedAuto is true (no semantic action), we pass the rule\'s"},
{"lineNum":"   41","line":"            // attribute on to the component."},
{"lineNum":"   42","line":"            return p.parse(first, last, context, skipper","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   43","line":"                , fusion::at_c<0>(context.attributes));"},
{"lineNum":"   44","line":"        }"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        template <typename Iterator, typename Skipper, typename Context>"},
{"lineNum":"   47","line":"        bool operator()("},
{"lineNum":"   48","line":"            Iterator& first, Iterator const& last"},
{"lineNum":"   49","line":"          , Context& context, Skipper const& skipper) const"},
{"lineNum":"   50","line":"        {"},
{"lineNum":"   51","line":"            // If Auto is false, we need to deduce whether to apply auto rule"},
{"lineNum":"   52","line":"            typedef typename traits::has_semantic_action<Parser>::type auto_rule;"},
{"lineNum":"   53","line":"            return call(first, last, context, skipper, auto_rule());"},
{"lineNum":"   54","line":"        }"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"        Parser p;"},
{"lineNum":"   57","line":"    };"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    // parser_binder for auto rules"},
{"lineNum":"   60","line":"    template <typename Parser>"},
{"lineNum":"   61","line":"    struct parser_binder<Parser, mpl::true_>"},
{"lineNum":"   62","line":"    {"},
{"lineNum":"   63","line":"        parser_binder(Parser const& p_)"},
{"lineNum":"   64","line":"          : p(p_) {}"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        template <typename Iterator, typename Skipper, typename Context>"},
{"lineNum":"   67","line":"        bool operator()("},
{"lineNum":"   68","line":"            Iterator& first, Iterator const& last"},
{"lineNum":"   69","line":"          , Context& context, Skipper const& skipper) const"},
{"lineNum":"   70","line":"        {"},
{"lineNum":"   71","line":"            // If Auto is true, we pass the rule\'s attribute on to the component."},
{"lineNum":"   72","line":"            return p.parse(first, last, context, skipper"},
{"lineNum":"   73","line":"                , fusion::at_c<0>(context.attributes));"},
{"lineNum":"   74","line":"        }"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"        Parser p;"},
{"lineNum":"   77","line":"    };"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    template <typename Auto, typename Parser>"},
{"lineNum":"   80","line":"    inline parser_binder<Parser, Auto>"},
{"lineNum":"   81","line":"    bind_parser(Parser const& p)"},
{"lineNum":"   82","line":"    {"},
{"lineNum":"   83","line":"        return parser_binder<Parser, Auto>(p);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":"}}}}"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 5, "covered" : 0,};
var merged_data = [];
