var data = {lines:[
{"lineNum":"    1","line":"#ifndef IMPEDANCE_H_"},
{"lineNum":"    2","line":"#define IMPEDANCE_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include \"wake_field.h\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#include \"synergia/simulation/operator.h\""},
{"lineNum":"    7","line":"#include \"synergia/simulation/collective_operator_options.h\""},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"class Impedance;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"struct Impedance_options","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   12","line":"    : public CO_base_options<Impedance_options, Impedance>"},
{"lineNum":"   13","line":"{"},
{"lineNum":"   14","line":"    std::string wake_file;"},
{"lineNum":"   15","line":"    std::string wake_type;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    int z_grid;"},
{"lineNum":"   18","line":"    bool full_machine;"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    int nstored_turns;"},
{"lineNum":"   21","line":"    int num_buckets;"},
{"lineNum":"   22","line":"    double orbit_length;"},
{"lineNum":"   23","line":"    double bunch_spacing;"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"    std::array<int, 3> wn;"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    Impedance_options("},
{"lineNum":"   28","line":"            std::string const& wake_file = \"\","},
{"lineNum":"   29","line":"            std::string const& wake_type = \"\","},
{"lineNum":"   30","line":"            int z_grid = 1000 )"},
{"lineNum":"   31","line":"        : wake_file(wake_file)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"        , wake_type(wake_type)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"        , z_grid(z_grid)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"        , full_machine(false)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   35","line":"        , nstored_turns(15)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   36","line":"        , num_buckets(1)"},
{"lineNum":"   37","line":"        , orbit_length(1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   38","line":"        , bunch_spacing(1)"},
{"lineNum":"   39","line":"    { }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    template<class Archive>"},
{"lineNum":"   42","line":"    void serialize(Archive & ar)"},
{"lineNum":"   43","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   44","line":"        ar(cereal::base_class<CO_base_options>(this));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   45","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   46","line":"};"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"CEREAL_REGISTER_TYPE(Impedance_options)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"struct Bunch_props","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   52","line":"{"},
{"lineNum":"   53","line":"    Bunch_props(int num_bunches, int max_turns)"},
{"lineNum":"   54","line":"        : num_bunches(num_bunches)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"        , max_turns(max_turns)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"        , registered_turns(0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"        , write_pos(0)"},
{"lineNum":"   58","line":"        , xmean(\"xmean\", num_bunches*max_turns)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"        , ymean(\"ymean\", num_bunches*max_turns)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"        , zmean(\"zmean\", num_bunches*max_turns)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":"        , realnum(\"realnum\", num_bunches*max_turns)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   62","line":"        , bucket_index(\"bucket\", num_bunches*max_turns)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"    { }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    // done writing a turn. increment the pointers"},
{"lineNum":"   66","line":"    void increment_registered_turns()"},
{"lineNum":"   67","line":"    {"},
{"lineNum":"   68","line":"        if (++registered_turns >= max_turns) registered_turns = max_turns;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"        if (++write_pos >= max_turns) write_pos = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":"    }"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    // write position for current turn and the specified bunch"},
{"lineNum":"   73","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   74","line":"    int get_write_index(int bunch) const"},
{"lineNum":"   75","line":"    { return write_pos*num_bunches + bunch; }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    // turn: 0 is current, -1 is prev, -2 ..."},
{"lineNum":"   78","line":"    KOKKOS_INLINE_FUNCTION"},
{"lineNum":"   79","line":"    int get_read_index(int turn, int bunch) const"},
{"lineNum":"   80","line":"    {"},
{"lineNum":"   81","line":"        // read_pos is one behind the write_pos"},
{"lineNum":"   82","line":"        int pos = write_pos + turn - 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   83","line":"        if (pos < 0) pos += max_turns;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   84","line":"        return pos*num_bunches + bunch;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   85","line":"    }"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    int num_bunches;"},
{"lineNum":"   88","line":"    int max_turns;"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    int registered_turns;"},
{"lineNum":"   91","line":"    int write_pos;"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    karray1d_dev xmean;"},
{"lineNum":"   94","line":"    karray1d_dev ymean;"},
{"lineNum":"   95","line":"    karray1d_dev zmean;"},
{"lineNum":"   96","line":"    karray1d_dev realnum;"},
{"lineNum":"   97","line":"    Kokkos::View<int*> bucket_index;"},
{"lineNum":"   98","line":"};"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"struct Bunch_params"},
{"lineNum":"  101","line":"{"},
{"lineNum":"  102","line":"    double z_mean;"},
{"lineNum":"  103","line":"    double z_left;"},
{"lineNum":"  104","line":"    double cell_size_z;"},
{"lineNum":"  105","line":"    double N_factor;"},
{"lineNum":"  106","line":"    int bucket;"},
{"lineNum":"  107","line":"};"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"class Impedance : public Collective_operator","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  110","line":"{"},
{"lineNum":"  111","line":"private:"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    const Impedance_options opts;"},
{"lineNum":"  114","line":"    std::string bunch_sim_id;"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"    // bunch properties over turns"},
{"lineNum":"  117","line":"    Bunch_props bps;"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    // z_grid*3, in the fortran order for"},
{"lineNum":"  120","line":"    // zdensity, xmom, ymom"},
{"lineNum":"  121","line":"    karray1d_dev zbinning;"},
{"lineNum":"  122","line":"    karray1d_hst h_zbinning;"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    // buffer for wake fields"},
{"lineNum":"  125","line":"    // z_grid*5, in the fortran order for"},
{"lineNum":"  126","line":"    // xwake_leading, xwake_trailing,"},
{"lineNum":"  127","line":"    // ywake_leading, ywake_trailing,"},
{"lineNum":"  128","line":"    // zwake0"},
{"lineNum":"  129","line":"    karray1d_dev wakes;"},
{"lineNum":"  130","line":"    karray1d_hst h_wakes;"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    Wake_field wake_field;"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"private:"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    void apply_impl("},
{"lineNum":"  137","line":"            Bunch_simulator& simulator,"},
{"lineNum":"  138","line":"            double time_step,"},
{"lineNum":"  139","line":"            Logger& logger) override;"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    void apply_bunch("},
{"lineNum":"  142","line":"            Bunch& bunch,"},
{"lineNum":"  143","line":"            double time_step,"},
{"lineNum":"  144","line":"            Logger& logger);"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    void construct_workspaces("},
{"lineNum":"  147","line":"            Bunch_simulator const& sim);"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    void store_bunches_data("},
{"lineNum":"  150","line":"            Bunch_simulator const& sim);"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    Bunch_params"},
{"lineNum":"  153","line":"    calculate_moments_and_partitions("},
{"lineNum":"  154","line":"            Bunch const& bunch);"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    void calculate_kicks("},
{"lineNum":"  157","line":"            Bunch const& bunch,"},
{"lineNum":"  158","line":"            Bunch_params const& bp);"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    void apply_impedance_kick("},
{"lineNum":"  161","line":"            Bunch& bunch,"},
{"lineNum":"  162","line":"            Bunch_params const& bp,"},
{"lineNum":"  163","line":"            double wake_factor);"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"public:"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    Impedance(Impedance_options const& ops);"},
{"lineNum":"  168","line":"};"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"#if 0"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"class Impedance : public Collective_operator"},
{"lineNum":"  174","line":"{"},
{"lineNum":"  175","line":"private:"},
{"lineNum":"  176","line":"    Wake_field_sptr wake_field_sptr;"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    int z_grid;"},
{"lineNum":"  179","line":"    int nstored_turns;"},
{"lineNum":"  180","line":"    int num_buckets;"},
{"lineNum":"  181","line":"    double orbit_length;"},
{"lineNum":"  182","line":"    double wake_factor;"},
{"lineNum":"  183","line":"    double bunch_spacing;"},
{"lineNum":"  184","line":"    bool full_machine;"},
{"lineNum":"  185","line":"    std::vector<int > wn;"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    /// a list which contains informations about prevoius turns, the last element is the last (the earliest) turn stored"},
{"lineNum":"  188","line":"    /// it is updated at every step where impedance kick is applied"},
{"lineNum":"  189","line":"    /// the element is a vector of size num_bunches. The vector elements correspund to different bunches"},
{"lineNum":"  190","line":"    std::list< std::vector<Bunch_properties> > stored_vbunches;"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    //boost::shared_ptr<Raw_MArray1d >  xmom_sptr;"},
{"lineNum":"  193","line":"    boost::shared_ptr<MArray1d >  xmom_sptr;"},
{"lineNum":"  194","line":"    boost::shared_ptr<MArray1d >  ymom_sptr;"},
{"lineNum":"  195","line":"    boost::shared_ptr<MArray1d >  zdensity_sptr;"},
{"lineNum":"  196","line":"    boost::shared_ptr<MArray1i > bin_partition_sptr;"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    boost::shared_ptr<MArray1d > xwake_leading_sptr;"},
{"lineNum":"  200","line":"    boost::shared_ptr<MArray1d > xwake_trailing_sptr;"},
{"lineNum":"  201","line":"    boost::shared_ptr<MArray1d > ywake_leading_sptr;"},
{"lineNum":"  202","line":"    boost::shared_ptr<MArray1d > ywake_trailing_sptr;"},
{"lineNum":"  203","line":"    boost::shared_ptr<MArray1d > zwake0_sptr;"},
{"lineNum":"  204","line":"    /// xwake_leading=sum (wake_field_sptr->xw_lead)*xmom"},
{"lineNum":"  205","line":"    /// ywake_leading=sum (wake_field_sptr->yw_lead)*ymom"},
{"lineNum":"  206","line":"    /// xwake_trailingl =sum (wake_field_sptr->xw_trail)"},
{"lineNum":"  207","line":"    /// zwake0= sum (wake_field_sptr->z_wake)"},
{"lineNum":"  208","line":"    /// Dpx=wake_factor*(xwake_leading+ xwake_trailingl*x)*time_step/(gamma*beta)"},
{"lineNum":"  209","line":"    /// Dpy=wake_factor*(ywake_leading+ ywake_trailingl*y)*time_step/(gamma*beta)"},
{"lineNum":"  210","line":"    /// Dpz=wake_factor*zwake0*time_step/(gamma*beta);"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    double N_factor;"},
{"lineNum":"  214","line":"    double cell_size_z;"},
{"lineNum":"  215","line":"    double bunch_z_mean;"},
{"lineNum":"  216","line":"    double bunch_z_left;"},
{"lineNum":"  217","line":"    int bunch_bucket;"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"    void construct();"},
{"lineNum":"  221","line":"    void store_bunches_data(Bunch_train & bunch_train);"},
{"lineNum":"  222","line":"    void calculate_moments_and_partitions(Bunch & bunch);"},
{"lineNum":"  223","line":"    void calculate_kicks(Commxx_sptr const & comm_sptr);"},
{"lineNum":"  224","line":"    void  apply_impedance_kick(Bunch & bunch, double wake_factor);"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"  public:"},
{"lineNum":"  228","line":"    Impedance();"},
{"lineNum":"  229","line":"    Impedance(std::string const & wake_file, std::string const & wake_type, int const  & zgrid,"},
{"lineNum":"  230","line":"\t\t  double const & orbit_length, double const & bunchsp, int const nstored_turns,"},
{"lineNum":"  231","line":"\t\t\t  bool full_machine=false,std::vector<int > wn=std::vector<int >());"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    Impedance(std::string const & wake_file, std::string const & wake_type, int const  & zgrid,"},
{"lineNum":"  234","line":"\t\t  double const & orbit_length, int const & num_buckets, int const nstored_turns,"},
{"lineNum":"  235","line":"\t\t\t  bool full_machine=false, std::vector<int > wn=std::vector<int >());"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    Impedance(Impedance const& impedance);"},
{"lineNum":"  238","line":"    virtual Impedance *"},
{"lineNum":"  239","line":"    clone();"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    void set_z_grid(int const  & zgrid);"},
{"lineNum":"  242","line":"    int get_z_grid() const;"},
{"lineNum":"  243","line":"    Wake_field_sptr"},
{"lineNum":"  244","line":"    get_wake_field_sptr() const;"},
{"lineNum":"  245","line":"    double get_orbit_length() const;"},
{"lineNum":"  246","line":"    double get_wake_factor() const;"},
{"lineNum":"  247","line":"    double get_bunch_spacing() const;"},
{"lineNum":"  248","line":"    int get_num_buckets() const;"},
{"lineNum":"  249","line":"    std::vector<int >  get_train_wave() const;"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    MArray1d_ref &  get_xmom();"},
{"lineNum":"  253","line":"    MArray1d_ref &  get_ymom();"},
{"lineNum":"  254","line":"    MArray1d_ref & get_zdensity();"},
{"lineNum":"  255","line":"    MArray1i_ref &  get_bin_partition();"},
{"lineNum":"  256","line":"    MArray1d_ref const &  get_xmom() const;"},
{"lineNum":"  257","line":"    MArray1d_ref const &  get_ymom() const;"},
{"lineNum":"  258","line":"    MArray1d_ref const & get_zdensity() const;"},
{"lineNum":"  259","line":"    MArray1i_ref const &  get_bin_partition() const;"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    MArray1d_ref &  get_xwake_leading();"},
{"lineNum":"  262","line":"    MArray1d_ref const & get_xwake_leading() const;"},
{"lineNum":"  263","line":"    MArray1d_ref &  get_xwake_trailing();"},
{"lineNum":"  264","line":"    MArray1d_ref const & get_xwake_trailing() const;"},
{"lineNum":"  265","line":"    MArray1d_ref &  get_ywake_leading();"},
{"lineNum":"  266","line":"    MArray1d_ref const & get_ywake_leading() const;"},
{"lineNum":"  267","line":"    MArray1d_ref &  get_ywake_trailing();"},
{"lineNum":"  268","line":"    MArray1d_ref const &  get_ywake_trailing() const;"},
{"lineNum":"  269","line":"    MArray1d_ref &  get_zwake0();"},
{"lineNum":"  270","line":"    MArray1d_ref const &  get_zwake0() const;"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"    std::list< std::vector<Bunch_properties> > &"},
{"lineNum":"  273","line":"    get_stored_vbunches();"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"    virtual bool"},
{"lineNum":"  276","line":"    is_full_machine() const;"},
{"lineNum":"  277","line":"    virtual int"},
{"lineNum":"  278","line":"    get_nstored_turns() const;"},
{"lineNum":"  279","line":"    using Collective_operator::apply;"},
{"lineNum":"  280","line":"    virtual"},
{"lineNum":"  281","line":"    void  apply(Bunch & bunch, double time_step, Step & step, int verbosity, Logger & logger);"},
{"lineNum":"  282","line":"    virtual void"},
{"lineNum":"  283","line":"    apply(Bunch_train & bunch_train, double time_step, Step & step, int verbosity,"},
{"lineNum":"  284","line":"            Train_diagnosticss const& per_operation_train_diagnosticss, Logger & logger);"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"\tvirtual void"},
{"lineNum":"  287","line":"    apply(Bunch_train & bunch_train, double time_step, Step & step, int verbosity,"},
{"lineNum":"  288","line":"            Train_diagnosticss const& per_operation_train_diagnosticss,"},
{"lineNum":"  289","line":"            Propagate_actions * propagate_actions_ptr, Stepper & stepper, int step_count,  int turn,"},
{"lineNum":"  290","line":"            Logger & logger);"},
{"lineNum":"  291","line":"};"},
{"lineNum":"  292","line":"#endif"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"#endif /* IMPEDANCE_H_ */"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 29, "covered" : 0,};
var merged_data = [];
