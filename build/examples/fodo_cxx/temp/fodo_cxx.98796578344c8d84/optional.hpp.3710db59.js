var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"=============================================================================*/"},
{"lineNum":"    8","line":"#if !defined(SPIRIT_OPTIONAL_MARCH_23_2007_1117PM)"},
{"lineNum":"    9","line":"#define SPIRIT_OPTIONAL_MARCH_23_2007_1117PM"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#if defined(_MSC_VER)"},
{"lineNum":"   12","line":"#pragma once"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/spirit/home/support/unused.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/detail/attributes.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/support/has_semantic_action.hpp>"},
{"lineNum":"   18","line":"#include <boost/spirit/home/support/handles_container.hpp>"},
{"lineNum":"   19","line":"#include <boost/spirit/home/support/info.hpp>"},
{"lineNum":"   20","line":"#include <boost/spirit/home/support/container.hpp>"},
{"lineNum":"   21","line":"#include <boost/spirit/home/qi/parser.hpp>"},
{"lineNum":"   22","line":"#include <boost/spirit/home/qi/meta_compiler.hpp>"},
{"lineNum":"   23","line":"#include <boost/spirit/home/qi/detail/assign_to.hpp>"},
{"lineNum":"   24","line":"#include <boost/optional.hpp>"},
{"lineNum":"   25","line":"#include <vector>"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"namespace boost { namespace spirit"},
{"lineNum":"   28","line":"{"},
{"lineNum":"   29","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   30","line":"    // Enablers"},
{"lineNum":"   31","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   32","line":"    template <>"},
{"lineNum":"   33","line":"    struct use_operator<qi::domain, proto::tag::negate> // enables -p"},
{"lineNum":"   34","line":"      : mpl::true_ {};"},
{"lineNum":"   35","line":"}}"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   38","line":"{"},
{"lineNum":"   39","line":"    template <typename Subject>"},
{"lineNum":"   40","line":"    struct optional : unary_parser<optional<Subject> >"},
{"lineNum":"   41","line":"    {"},
{"lineNum":"   42","line":"        typedef Subject subject_type;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"        template <typename Context, typename Iterator>"},
{"lineNum":"   45","line":"        struct attribute"},
{"lineNum":"   46","line":"        {"},
{"lineNum":"   47","line":"            // Build a boost::optional from the subject\'s attribute. Note"},
{"lineNum":"   48","line":"            // that boost::optional may return unused_type if the"},
{"lineNum":"   49","line":"            // subject\'s attribute is an unused_type."},
{"lineNum":"   50","line":"            typedef typename"},
{"lineNum":"   51","line":"                traits::build_optional<"},
{"lineNum":"   52","line":"                    typename traits::"},
{"lineNum":"   53","line":"                        attribute_of<Subject, Context, Iterator>::type"},
{"lineNum":"   54","line":"                >::type"},
{"lineNum":"   55","line":"            type;"},
{"lineNum":"   56","line":"        };"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"        optional(Subject const& subject_)"},
{"lineNum":"   59","line":"          : subject(subject_) {}"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        template <typename Iterator, typename Context"},
{"lineNum":"   62","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"   63","line":"        bool parse_impl(Iterator& first, Iterator const& last"},
{"lineNum":"   64","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"   65","line":"          , Attribute& attr_, mpl::false_) const"},
{"lineNum":"   66","line":"        {"},
{"lineNum":"   67","line":"            // create a local value if Attribute is not unused_type"},
{"lineNum":"   68","line":"            typename spirit::result_of::optional_value<Attribute>::type val =","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"                typename spirit::result_of::optional_value<Attribute>::type();"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"            if (subject.parse(first, last, context, skipper, val))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   72","line":"            {"},
{"lineNum":"   73","line":"                // assign the parsed value into our attribute"},
{"lineNum":"   74","line":"                spirit::traits::assign_to(val, attr_);"},
{"lineNum":"   75","line":"            }"},
{"lineNum":"   76","line":"            return true;"},
{"lineNum":"   77","line":"        }"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        template <typename Iterator, typename Context"},
{"lineNum":"   80","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"   81","line":"        bool parse_impl(Iterator& first, Iterator const& last"},
{"lineNum":"   82","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"   83","line":"          , Attribute& attr_, mpl::true_) const"},
{"lineNum":"   84","line":"        {"},
{"lineNum":"   85","line":"            subject.parse(first, last, context, skipper, attr_);"},
{"lineNum":"   86","line":"            return true;"},
{"lineNum":"   87","line":"        }"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"        template <typename Iterator, typename Context"},
{"lineNum":"   90","line":"          , typename Skipper, typename Attribute>"},
{"lineNum":"   91","line":"        bool parse(Iterator& first, Iterator const& last"},
{"lineNum":"   92","line":"          , Context& context, Skipper const& skipper"},
{"lineNum":"   93","line":"          , Attribute& attr_) const"},
{"lineNum":"   94","line":"        {"},
{"lineNum":"   95","line":"            typedef typename spirit::result_of::optional_value<Attribute>::type"},
{"lineNum":"   96","line":"                attribute_type;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"            return parse_impl(first, last, context, skipper, attr_"},
{"lineNum":"   99","line":"              , traits::is_container<attribute_type>());"},
{"lineNum":"  100","line":"        }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"        template <typename Context>"},
{"lineNum":"  103","line":"        info what(Context& context) const"},
{"lineNum":"  104","line":"        {"},
{"lineNum":"  105","line":"            return info(\"optional\", subject.what(context));"},
{"lineNum":"  106","line":"        }"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"        Subject subject;"},
{"lineNum":"  109","line":"    };"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  112","line":"    // Parser generators: make_xxx function (objects)"},
{"lineNum":"  113","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  114","line":"    template <typename Elements, typename Modifiers>"},
{"lineNum":"  115","line":"    struct make_composite<proto::tag::negate, Elements, Modifiers>"},
{"lineNum":"  116","line":"      : make_unary_composite<Elements, optional>"},
{"lineNum":"  117","line":"    {};"},
{"lineNum":"  118","line":"}}}"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"namespace boost { namespace spirit { namespace traits"},
{"lineNum":"  121","line":"{"},
{"lineNum":"  122","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  123","line":"    template <typename Subject>"},
{"lineNum":"  124","line":"    struct has_semantic_action<qi::optional<Subject> >"},
{"lineNum":"  125","line":"      : unary_has_semantic_action<Subject> {};"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"  128","line":"    template <typename Subject, typename Attribute, typename Context"},
{"lineNum":"  129","line":"        , typename Iterator>"},
{"lineNum":"  130","line":"    struct handles_container<qi::optional<Subject>, Attribute"},
{"lineNum":"  131","line":"          , Context, Iterator>"},
{"lineNum":"  132","line":"      : mpl::true_ {};"},
{"lineNum":"  133","line":"}}}"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:41", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
