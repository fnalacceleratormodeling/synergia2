var data = {lines:[
{"lineNum":"    1","line":"#ifndef BUNCH_H_"},
{"lineNum":"    2","line":"#define BUNCH_H_"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#include <sstream>"},
{"lineNum":"    5","line":"#include <vector>"},
{"lineNum":"    6","line":"#include <memory>"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"#include \"synergia/foundation/reference_particle.h\""},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#include \"synergia/bunch/bunch_particles.h\""},
{"lineNum":"   11","line":"#include \"synergia/bunch/diagnostics_worker.h\""},
{"lineNum":"   12","line":"#include \"synergia/bunch/diagnostics_loss.h\""},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include \"synergia/utils/commxx.h\""},
{"lineNum":"   15","line":"#include \"synergia/utils/hdf5_file.h\""},
{"lineNum":"   16","line":"#include \"synergia/utils/restrict_extension.h\""},
{"lineNum":"   17","line":"#include \"synergia/utils/logger.h\""},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"#include <cereal/types/array.hpp>"},
{"lineNum":"   20","line":"#include <cereal/types/map.hpp>"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"enum class LongitudinalBoundary"},
{"lineNum":"   23","line":"{"},
{"lineNum":"   24","line":"    open = 0,"},
{"lineNum":"   25","line":"    periodic = 1,"},
{"lineNum":"   26","line":"    aperture = 2,"},
{"lineNum":"   27","line":"    bucket_barrier = 3"},
{"lineNum":"   28","line":"};"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"/// Represents a macroparticle bunch distributed across the processors"},
{"lineNum":"   31","line":"/// in a comm_sptrunicator."},
{"lineNum":"   32","line":"template<class PART>"},
{"lineNum":"   33","line":"class bunch_t","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   34","line":"{"},
{"lineNum":"   35","line":"public:"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    using PG = ParticleGroup;"},
{"lineNum":"   38","line":"    using LB = LongitudinalBoundary;"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    using part_t = PART;"},
{"lineNum":"   41","line":"    using bp_t = bunch_particles_t<PART>;"},
{"lineNum":"   42","line":"    using gsv_t = typename bp_t::gsv_t;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    using parts_t = typename bp_t::parts_t;"},
{"lineNum":"   45","line":"    using masks_t = typename bp_t::masks_t;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    using const_parts_t = typename bp_t::const_parts_t;"},
{"lineNum":"   48","line":"    using const_masks_t = typename bp_t::const_masks_t;"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    using host_parts_t = typename bp_t::host_parts_t;"},
{"lineNum":"   51","line":"    using host_masks_t = typename bp_t::host_masks_t;"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    using const_host_parts_t = typename bp_t::const_host_parts_t;"},
{"lineNum":"   54","line":"    using const_host_masks_t = typename bp_t::const_host_masks_t;"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    using exec_space = typename bp_t::exec_space;"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"public:"},
{"lineNum":"   59","line":"    /*! \\enum State The state of the bunch is captured at a fixed  s (or z, longitudinal coordinate)"},
{"lineNum":"   60","line":"     or at a fixed time.  In the former case, particles are found within a range of different time"},
{"lineNum":"   61","line":"     coordinates while in the later case particles position along the beam axis do vary."},
{"lineNum":"   62","line":"     A change of state is accomplish via the fixed_t_z_converter class."},
{"lineNum":"   63","line":"     */"},
{"lineNum":"   64","line":"    constexpr static const int x    = 0;"},
{"lineNum":"   65","line":"    constexpr static const int xp   = 1;"},
{"lineNum":"   66","line":"    constexpr static const int y    = 2;"},
{"lineNum":"   67","line":"    constexpr static const int yp   = 3;"},
{"lineNum":"   68","line":"    constexpr static const int z    = 4;"},
{"lineNum":"   69","line":"    constexpr static const int zp   = 5;"},
{"lineNum":"   70","line":"    constexpr static const int cdt  = 4;"},
{"lineNum":"   71","line":"    constexpr static const int dpop = 5;"},
{"lineNum":"   72","line":"    constexpr static const int id   = 6;"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    constexpr static const int particle_index_null ="},
{"lineNum":"   75","line":"        bunch_particles_t<PART>::particle_index_null;"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"private:"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    std::shared_ptr<Commxx> comm;"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    // meaning of bounary_param for each boundary condition:"},
{"lineNum":"   82","line":"    // open (N/A), periodic (z-period), z-cut (longitudinal_extent),"},
{"lineNum":"   83","line":"    // bucket_barrier (bucket_length)"},
{"lineNum":"   84","line":"    LongitudinalBoundary boundary;"},
{"lineNum":"   85","line":"    double boundary_param;"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    // reference particle and design reference particle"},
{"lineNum":"   88","line":"    Reference_particle ref_part;"},
{"lineNum":"   89","line":"    Reference_particle design_ref_part;"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    int particle_charge;"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    double real_num;"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    // parts[0]: PG::regular particles"},
{"lineNum":"   96","line":"    // parts[1]: spectator particles"},
{"lineNum":"   97","line":"    std::array<bp_t, 2> parts;"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    // diagnostics"},
{"lineNum":"  100","line":"    std::vector<Diagnostics_worker> diags;"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    // diagnostics for particle losses"},
{"lineNum":"  103","line":"    std::unique_ptr<Diagnostics_worker> diag_aperture;"},
{"lineNum":"  104","line":"    std::unique_ptr<Diagnostics_worker> diag_zcut;"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    // bunch indicies"},
{"lineNum":"  107","line":"    int bunch_index;   // index in the train"},
{"lineNum":"  108","line":"    int bucket_index;  // which bucket its occupying"},
{"lineNum":"  109","line":"    int array_index;   // array index in the train\'s bunch array"},
{"lineNum":"  110","line":"    int train_index;   // the index of the containing tain"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"public:"},
{"lineNum":"  113","line":"    //!"},
{"lineNum":"  114","line":"    //! Constructor:"},
{"lineNum":"  115","line":"    //! Allocates memory for the particles and assigns particle ID\'s,"},
{"lineNum":"  116","line":"    //!    but does not fill the phase space values in any way."},
{"lineNum":"  117","line":"    //!"},
{"lineNum":"  118","line":"    //! To fill the bunch with particles, use the populate methods."},
{"lineNum":"  119","line":"    /// @param reference_particle the reference particle for the bunch."},
{"lineNum":"  120","line":"    /// @param total_num the total number of macroparticles in the bunch"},
{"lineNum":"  121","line":"    /// @param real_num the number of real particles represented by the bunch."},
{"lineNum":"  122","line":"    /// @param bucket_index the bucket number the bunch occupies, used for"},
{"lineNum":"  123","line":"    ///        multi-bunch simulations"},
{"lineNum":"  124","line":"    /// @param comm_sptr the comm_sptrunicator."},
{"lineNum":"  125","line":"    bunch_t(  Reference_particle const& reference_particle,"},
{"lineNum":"  126","line":"              int total_num,"},
{"lineNum":"  127","line":"              double real_num,"},
{"lineNum":"  128","line":"              Commxx comm = Commxx(),"},
{"lineNum":"  129","line":"              int total_spectator_num = 0,"},
{"lineNum":"  130","line":"              int bunch_index = 0,"},
{"lineNum":"  131","line":"              int bucket_index = 0,"},
{"lineNum":"  132","line":"              int array_index = 0,"},
{"lineNum":"  133","line":"              int train_index = 0 );"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    // to construct a bunch with trigon particles"},
{"lineNum":"  136","line":"    template<typename U = PART>"},
{"lineNum":"  137","line":"    bunch_t(  Reference_particle const& reference_particle,"},
{"lineNum":"  138","line":"              int total_num = 1,"},
{"lineNum":"  139","line":"              Commxx comm = Commxx(),"},
{"lineNum":"  140","line":"              typename std::enable_if<is_trigon<U>::value>::type* = 0);"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    // default ctor for serialization only"},
{"lineNum":"  143","line":"    bunch_t();"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"    // non-copyable but moveable"},
{"lineNum":"  146","line":"    bunch_t(bunch_t const&) = delete;"},
{"lineNum":"  147","line":"    bunch_t(bunch_t &&) = default;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    // indicies"},
{"lineNum":"  150","line":"    int get_array_index()  const { return array_index; }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  151","line":"    int get_bunch_index()  const { return bunch_index; }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"    int get_train_index()  const { return train_index; }"},
{"lineNum":"  153","line":"    int get_bucket_index() const { return bucket_index; }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"    ///"},
{"lineNum":"  156","line":"    /// Set the particle charge"},
{"lineNum":"  157","line":"    /// @param particle_charge in units of e."},
{"lineNum":"  158","line":"    void set_particle_charge(int charge)"},
{"lineNum":"  159","line":"    { particle_charge = charge; }"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    ///"},
{"lineNum":"  162","line":"    /// Set the number of real particles represented by the bunch."},
{"lineNum":"  163","line":"    /// @param real_num the new real number of particles"},
{"lineNum":"  164","line":"    void set_real_num(double num)"},
{"lineNum":"  165","line":"    { real_num = num; }"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    /// Return the reference particle"},
{"lineNum":"  168","line":"    Reference_particle&"},
{"lineNum":"  169","line":"    get_reference_particle()"},
{"lineNum":"  170","line":"    { return ref_part; }","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    Reference_particle const&"},
{"lineNum":"  173","line":"    get_reference_particle() const"},
{"lineNum":"  174","line":"    { return ref_part; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    Reference_particle&"},
{"lineNum":"  177","line":"    get_design_reference_particle()"},
{"lineNum":"  178","line":"    { return design_ref_part; }","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    Reference_particle const&"},
{"lineNum":"  181","line":"    get_design_reference_particle() const"},
{"lineNum":"  182","line":"    { return design_ref_part; }"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"    void"},
{"lineNum":"  185","line":"    set_design_reference_particle(Reference_particle const& ref_part)"},
{"lineNum":"  186","line":"    { design_ref_part = ref_part; }","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"    // bunch particles"},
{"lineNum":"  189","line":"    bunch_particles_t<PART> &"},
{"lineNum":"  190","line":"    get_bunch_particles(ParticleGroup pg = PG::regular)"},
{"lineNum":"  191","line":"    { return parts[(int)pg]; }","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    bunch_particles_t<PART> const&"},
{"lineNum":"  194","line":"    get_bunch_particles(ParticleGroup pg = PG::regular) const"},
{"lineNum":"  195","line":"    { return parts[(int)pg]; }","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    /// Get the array containing the macroparticles on this processor."},
{"lineNum":"  198","line":"    /// The array has length (length,7), where length of the array may be"},
{"lineNum":"  199","line":"    /// larger local_num. The macroparticle state vectors are stored in"},
{"lineNum":"  200","line":"    /// array[0:reserved,0:6] and the macroparticle IDs are stored in"},
{"lineNum":"  201","line":"    /// array[0:reserved,6]. Use capacity() to obtain reserved num."},
{"lineNum":"  202","line":"    typename bunch_particles_t<PART>::parts_t"},
{"lineNum":"  203","line":"    get_local_particles(ParticleGroup pg = PG::regular)"},
{"lineNum":"  204","line":"    { return get_bunch_particles(pg).parts; }"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    typename bunch_particles_t<PART>::const_parts_t"},
{"lineNum":"  207","line":"    get_local_particles(ParticleGroup pg = PG::regular) const"},
{"lineNum":"  208","line":"    { return get_bunch_particles(pg).parts; }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    masks_t"},
{"lineNum":"  211","line":"    get_local_particle_masks(ParticleGroup pg = PG::regular)"},
{"lineNum":"  212","line":"    { return get_bunch_particles(pg).masks; }"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    const_masks_t"},
{"lineNum":"  215","line":"    get_local_particle_masks(ParticleGroup pg = PG::regular) const"},
{"lineNum":"  216","line":"    { return get_bunch_particles(pg).masks; }"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    // get the host particle arrays and masks arrays"},
{"lineNum":"  219","line":"    host_parts_t"},
{"lineNum":"  220","line":"    get_host_particles(ParticleGroup pg = PG::regular)"},
{"lineNum":"  221","line":"    { return get_bunch_particles(pg).hparts; }"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    const_host_parts_t"},
{"lineNum":"  224","line":"    get_host_particles(ParticleGroup pg = PG::regular) const"},
{"lineNum":"  225","line":"    { return get_bunch_particles(pg).hparts; }"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    host_masks_t"},
{"lineNum":"  228","line":"    get_host_particle_masks(ParticleGroup pg = PG::regular)"},
{"lineNum":"  229","line":"    { return get_bunch_particles(pg).hmasks; }"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"    const_host_masks_t"},
{"lineNum":"  232","line":"    get_host_particle_masks(ParticleGroup pg = PG::regular) const"},
{"lineNum":"  233","line":"    { return get_bunch_particles(pg).hmasks; }"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    // get the number of valid/total/reserved particles"},
{"lineNum":"  236","line":"    int get_total_num(ParticleGroup pg = PG::regular) const"},
{"lineNum":"  237","line":"    { return get_bunch_particles(pg).num_total(); }"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    int get_local_num(ParticleGroup pg = PG::regular) const"},
{"lineNum":"  240","line":"    { return get_bunch_particles(pg).num_valid(); }"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    int size(ParticleGroup pg = PG::regular) const"},
{"lineNum":"  243","line":"    { return get_bunch_particles(pg).size(); }"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    int size_in_gsv(ParticleGroup pg = PG::regular) const"},
{"lineNum":"  246","line":"    { return get_bunch_particles(pg).size_in_gsv(); }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    int capacity(ParticleGroup pg = PG::regular) const"},
{"lineNum":"  249","line":"    { return get_bunch_particles(pg).capacity(); }"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"    // set the reserved particles"},
{"lineNum":"  252","line":"    void reserve(int n, ParticleGroup pg = PG::regular)"},
{"lineNum":"  253","line":"    { get_bunch_particles(pg).reserve(n, *comm); }"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"    void reserve_local(int n, ParticleGroup pg = PG::regular)"},
{"lineNum":"  256","line":"    { get_bunch_particles(pg).reserve_local(n); }"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    ///"},
{"lineNum":"  259","line":"    /// Update the total number and real number of particles after the local"},
{"lineNum":"  260","line":"    /// number has been changed. Requires comm_sptrunication."},
{"lineNum":"  261","line":"    int update_total_num()"},
{"lineNum":"  262","line":"    {"},
{"lineNum":"  263","line":"        get_bunch_particles(PG::spectator).update_total_num(*comm);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"        auto & bp = get_bunch_particles(PG::regular);"},
{"lineNum":"  266","line":"        int old_total = bp.update_total_num(*comm);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  267","line":"        real_num = old_total ? bp.num_total() * real_num / old_total : 0.0;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"        return old_total;"},
{"lineNum":"  270","line":"    }"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"    // assign particle ids for bunch particles"},
{"lineNum":"  273","line":"    void assign_particle_ids(int train_idx)"},
{"lineNum":"  274","line":"    {"},
{"lineNum":"  275","line":"        get_bunch_particles(PG::regular).assign_ids(train_idx, bunch_index);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":"        get_bunch_particles(PG::spectator).assign_ids(train_idx, bunch_index);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  277","line":"    }"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"    // aperture operation"},
{"lineNum":"  280","line":"    // discard the particles (by moving them to the tail of the array) filtered out"},
{"lineNum":"  281","line":"    // by the aperture, returns the number of particles discarded"},
{"lineNum":"  282","line":"    template<typename AP>"},
{"lineNum":"  283","line":"    int apply_aperture(AP const& ap, ParticleGroup pg = PG::regular);"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"    template<typename AP>"},
{"lineNum":"  286","line":"    int apply_zcut(AP const& ap, ParticleGroup pg = PG::regular);"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"    // retrieve the array holding lost particles from last aperture operation"},
{"lineNum":"  289","line":"    karray2d_row"},
{"lineNum":"  290","line":"    get_particles_last_discarded(ParticleGroup pg = PG::regular) const"},
{"lineNum":"  291","line":"    { return get_bunch_particles(pg).get_particles_last_discarded(); }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"    // checkout (deep_copy) the entire particle array from device"},
{"lineNum":"  294","line":"    // memory to the host memory for user to access the latest"},
{"lineNum":"  295","line":"    // particle data"},
{"lineNum":"  296","line":"    void checkout_particles(ParticleGroup pg = PG::regular)"},
{"lineNum":"  297","line":"    { get_bunch_particles(pg).checkout_particles(); }"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"    void checkin_particles (ParticleGroup pg = PG::regular)"},
{"lineNum":"  300","line":"    { get_bunch_particles(pg).checkin_particles(); }"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"    // checkout (deep_copy) num particles starting from idx, and"},
{"lineNum":"  303","line":"    // store them in a host array"},
{"lineNum":"  304","line":"    // TODO: when compiled for host, it returns a subview to the original"},
{"lineNum":"  305","line":"    // particle data -- overhead for the operation should be minimal"},
{"lineNum":"  306","line":"    karray2d_row"},
{"lineNum":"  307","line":"    get_particles_in_range(int idx, int num, ParticleGroup pg = PG::regular) const"},
{"lineNum":"  308","line":"    { return get_bunch_particles(pg).get_particles_in_range(idx, num).first; }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"    karray1d_row"},
{"lineNum":"  311","line":"    get_particle(int idx, ParticleGroup pg = PG::regular) const"},
{"lineNum":"  312","line":"    { return get_bunch_particles(pg).get_particle(idx).first; }"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"    // find the index of the given particle_id (pid)"},
{"lineNum":"  315","line":"    // if last_idx is provided, it does the search form the last_idx first"},
{"lineNum":"  316","line":"    // returns particle_index_null if the given particle_id is not found"},
{"lineNum":"  317","line":"    int search_particle(int pid, int last_idx = particle_index_null,"},
{"lineNum":"  318","line":"            ParticleGroup pg = PG::regular) const"},
{"lineNum":"  319","line":"    { return get_bunch_particles(pg).search_particle(pid, last_idx); }"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    void print_particle(size_t idx, Logger& logger,"},
{"lineNum":"  322","line":"            ParticleGroup pg = PG::regular) const"},
{"lineNum":"  323","line":"    { get_bunch_particles(pg).print_particle(idx, logger); }"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"    // print statistics"},
{"lineNum":"  326","line":"    // spectator particles are not included"},
{"lineNum":"  327","line":"    void print_statistics(Logger& logger) const;"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    /// Get the particle charge in units of e."},
{"lineNum":"  330","line":"    int get_particle_charge() const { return particle_charge; }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"    /// Get the particle mass in units GeV/c^2."},
{"lineNum":"  333","line":"    double get_mass() const { return ref_part.get_four_momentum().get_mass(); }","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"    /// Get the real number of particles represented by the bunch."},
{"lineNum":"  336","line":"    double get_real_num() const { return real_num; }","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"    /// longitudinal boundary conditions"},
{"lineNum":"  339","line":"    void set_longitudinal_boundary(LB lb, double param = 0.0)"},
{"lineNum":"  340","line":"    { boundary = lb; boundary_param = param; }"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"    std::pair<LB, double> get_longitudinal_boundary() const"},
{"lineNum":"  343","line":"    { return std::make_pair(boundary, boundary_param); }"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"    // bucket index"},
{"lineNum":"  346","line":"    void set_bucket_index(int index)      { bucket_index = index; }"},
{"lineNum":"  347","line":"    bool is_bucket_index_assigned() const { return bucket_index >= 0; }"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"    /// Get the communicator"},
{"lineNum":"  350","line":"    Commxx const& get_comm() const { return *comm; }"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    // Diagnostics"},
{"lineNum":"  353","line":"    template<class Diag>"},
{"lineNum":"  354","line":"    std::pair<Diagnostics_handler, int>"},
{"lineNum":"  355","line":"    add_diagnostics(Diag const& diag)"},
{"lineNum":"  356","line":"    {"},
{"lineNum":"  357","line":"        diags.emplace_back(diag, comm);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  358","line":"        return std::make_pair("},
{"lineNum":"  359","line":"                Diagnostics_handler(diags.back(), *this),"},
{"lineNum":"  360","line":"                diags.size() - 1);"},
{"lineNum":"  361","line":"    }"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"    Diagnostics_handler get_diag(int id)"},
{"lineNum":"  364","line":"    { return Diagnostics_handler(diags[id], *this); }"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"    std::string diag_type(int id) const"},
{"lineNum":"  367","line":"    { return diags[id].type(); }"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    void diag_update(int id)"},
{"lineNum":"  370","line":"    { get_diag(id).update(); }"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"    void diag_update_and_write(int id)"},
{"lineNum":"  373","line":"    { get_diag(id).update_and_write(); }"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"    void set_diag_loss_aperture(std::string const& filename)"},
{"lineNum":"  376","line":"    { diag_aperture.reset( new Diagnostics_worker("},
{"lineNum":"  377","line":"                Diagnostics_loss(filename), comm)); }"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    void set_diag_loss_zcut(std::string const& filename)"},
{"lineNum":"  380","line":"    { diag_zcut.reset( new Diagnostics_worker("},
{"lineNum":"  381","line":"                Diagnostics_loss(filename), comm)); }"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    /// Add a copy of the particles in bunch to the current bunch. The"},
{"lineNum":"  384","line":"    /// injected bunch must have the same macroparticle weight, i.e.,"},
{"lineNum":"  385","line":"    /// real_num/total_num. If the state vectors of the reference particles"},
{"lineNum":"  386","line":"    /// of the two bunches differ, the particles will be shifted accordingly."},
{"lineNum":"  387","line":"    void inject(bunch_t const& bunch);"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"    void convert_to_fixed_t_lab()"},
{"lineNum":"  390","line":"    {"},
{"lineNum":"  391","line":"        double pref = ref_part.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  392","line":"        double beta = ref_part.get_beta();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  393","line":"        get_bunch_particles(PG::regular).convert_to_fixed_t_lab(pref, beta);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  394","line":"        get_bunch_particles(PG::spectator).convert_to_fixed_t_lab(pref, beta);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  395","line":"    }"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"    void convert_to_fixed_z_lab()"},
{"lineNum":"  398","line":"    {"},
{"lineNum":"  399","line":"        double pref = ref_part.get_momentum();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  400","line":"        double beta = ref_part.get_beta();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  401","line":"        get_bunch_particles(PG::regular).convert_to_fixed_z_lab(pref, beta);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  402","line":"        get_bunch_particles(PG::spectator).convert_to_fixed_z_lab(pref, beta);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":"    }"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"    void check_pz2_positive()"},
{"lineNum":"  406","line":"    {"},
{"lineNum":"  407","line":"        get_bunch_particles(PG::regular).check_pz2_positive();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  408","line":"        get_bunch_particles(PG::spectator).check_pz2_positive();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  409","line":"    }"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"    // read/write particles"},
{"lineNum":"  412","line":"    void read_file_legacy(std::string const& filename)"},
{"lineNum":"  413","line":"    {"},
{"lineNum":"  414","line":"        Hdf5_file file(filename, Hdf5_file::read_only, comm);"},
{"lineNum":"  415","line":"        get_bunch_particles(PG::regular).read_file_legacy(file, *comm);"},
{"lineNum":"  416","line":"    }"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    void read_file(std::string const& filename)"},
{"lineNum":"  419","line":"    {"},
{"lineNum":"  420","line":"        Hdf5_file file(filename, Hdf5_file::read_only, comm);"},
{"lineNum":"  421","line":"        get_bunch_particles(PG::regular).read_file(file, *comm);"},
{"lineNum":"  422","line":"    }"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"    // num_part = -1 means write all particles"},
{"lineNum":"  425","line":"    void write_file(std::string const& filename,"},
{"lineNum":"  426","line":"            int num_part = -1, int offset = 0,"},
{"lineNum":"  427","line":"            int num_part_spec = 0, int offset_spec = 0 ) const"},
{"lineNum":"  428","line":"    {"},
{"lineNum":"  429","line":"        Hdf5_file file(filename, Hdf5_file::truncate, comm);"},
{"lineNum":"  430","line":"        write_file(file, num_part, offset, num_part_spec, offset_spec);"},
{"lineNum":"  431","line":"    }"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"    void write_file(Hdf5_file const& file,"},
{"lineNum":"  434","line":"            int num_part, int offset,"},
{"lineNum":"  435","line":"            int num_part_spec, int offset_spec) const"},
{"lineNum":"  436","line":"    {"},
{"lineNum":"  437","line":"        get_bunch_particles(PG::regular).write_file(file, num_part, offset, *comm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  438","line":"        get_bunch_particles(PG::spectator).write_file(file, num_part_spec, offset_spec, *comm);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":"    }"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"    // checkpoint state"},
{"lineNum":"  442","line":"    std::string dump() const"},
{"lineNum":"  443","line":"    {"},
{"lineNum":"  444","line":"        std::stringstream ss;"},
{"lineNum":"  445","line":"        {"},
{"lineNum":"  446","line":"            cereal::JSONOutputArchive ar(ss);"},
{"lineNum":"  447","line":"            ar(*this);"},
{"lineNum":"  448","line":"        }"},
{"lineNum":"  449","line":"        return ss.str();"},
{"lineNum":"  450","line":"    }"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"    void load(std::string const& str)"},
{"lineNum":"  453","line":"    {"},
{"lineNum":"  454","line":"        std::stringstream ss(str);"},
{"lineNum":"  455","line":"        cereal::JSONInputArchive ar(ss);"},
{"lineNum":"  456","line":"        ar(*this);"},
{"lineNum":"  457","line":"    }"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"    // checkpoint partiles"},
{"lineNum":"  460","line":"    void save_checkpoint_particles(Hdf5_file & file, int idx) const"},
{"lineNum":"  461","line":"    {"},
{"lineNum":"  462","line":"        get_bunch_particles(PG::regular).save_checkpoint_particles(file, idx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  463","line":"        get_bunch_particles(PG::spectator).save_checkpoint_particles(file, idx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  464","line":"    }"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"    void load_checkpoint_particles(Hdf5_file & file, int idx)"},
{"lineNum":"  467","line":"    {"},
{"lineNum":"  468","line":"        get_bunch_particles(PG::regular).load_checkpoint_particles(file, idx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  469","line":"        get_bunch_particles(PG::spectator).load_checkpoint_particles(file, idx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  470","line":"    }"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"    // only for trigon bunches"},
{"lineNum":"  473","line":"    template<class U = PART>"},
{"lineNum":"  474","line":"    std::enable_if_t<is_trigon<U>::value, karray2d_row>"},
{"lineNum":"  475","line":"    get_jacobian(int idx, PG pg = PG::regular) const"},
{"lineNum":"  476","line":"    { return get_bunch_particles(pg).get_jacobian(idx); }"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"private:"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"    friend class cereal::access;"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"    template<class Archive>"},
{"lineNum":"  483","line":"    void serialize(Archive & ar)"},
{"lineNum":"  484","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  485","line":"        ar(CEREAL_NVP(comm));"},
{"lineNum":"  486","line":"        ar(CEREAL_NVP(boundary));"},
{"lineNum":"  487","line":"        ar(CEREAL_NVP(boundary_param));"},
{"lineNum":"  488","line":"        ar(CEREAL_NVP(ref_part));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  489","line":"        ar(CEREAL_NVP(design_ref_part));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  490","line":"        ar(CEREAL_NVP(particle_charge));"},
{"lineNum":"  491","line":"        ar(CEREAL_NVP(real_num));"},
{"lineNum":"  492","line":"        ar(CEREAL_NVP(parts));"},
{"lineNum":"  493","line":"        ar(CEREAL_NVP(diags));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  494","line":"        ar(CEREAL_NVP(diag_aperture));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  495","line":"        ar(CEREAL_NVP(diag_zcut));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  496","line":"        ar(CEREAL_NVP(bunch_index));"},
{"lineNum":"  497","line":"        ar(CEREAL_NVP(bucket_index));"},
{"lineNum":"  498","line":"        ar(CEREAL_NVP(array_index));"},
{"lineNum":"  499","line":"        ar(CEREAL_NVP(train_index));"},
{"lineNum":"  500","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  501","line":"};"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"using Bunch = bunch_t<double>;"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"template<>"},
{"lineNum":"  506","line":"template<typename AP>"},
{"lineNum":"  507","line":"inline int bunch_t<double>::apply_aperture(AP const& ap, ParticleGroup pg)"},
{"lineNum":"  508","line":"{"},
{"lineNum":"  509","line":"    // Particles might get lost here. The update of total particle number is"},
{"lineNum":"  510","line":"    // performed at the end of each independent operator on a per-bunch basis."},
{"lineNum":"  511","line":"    // So there will be a short period of time the total_num isnt consistent"},
{"lineNum":"  512","line":"    // with the sum of all local_num. It should be OK since the total_num is"},
{"lineNum":"  513","line":"    // only important to the space charge solvers"},
{"lineNum":"  514","line":"    int ndiscarded = get_bunch_particles(pg).apply_aperture(ap);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"    // diagnostics"},
{"lineNum":"  517","line":"    if (ndiscarded && diag_aperture)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  518","line":"        diag_aperture->update_and_write(*this);"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"    return ndiscarded;"},
{"lineNum":"  521","line":"}"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"template<>"},
{"lineNum":"  524","line":"template<typename AP>"},
{"lineNum":"  525","line":"inline int bunch_t<double>::apply_zcut(AP const& ap, ParticleGroup pg)"},
{"lineNum":"  526","line":"{"},
{"lineNum":"  527","line":"    int ndiscarded = get_bunch_particles(pg).apply_aperture(ap);"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"    // diagnostics"},
{"lineNum":"  530","line":"    if (ndiscarded && diag_zcut)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  531","line":"        diag_zcut->update_and_write(*this);"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"    return ndiscarded;"},
{"lineNum":"  534","line":"}"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"template<typename PART>"},
{"lineNum":"  537","line":"template<typename U>"},
{"lineNum":"  538","line":"inline bunch_t<PART>::bunch_t("},
{"lineNum":"  539","line":"        Reference_particle const& reference_particle,"},
{"lineNum":"  540","line":"        int total_num,"},
{"lineNum":"  541","line":"        Commxx bunch_comm,"},
{"lineNum":"  542","line":"        typename std::enable_if<is_trigon<U>::value>::type*)"},
{"lineNum":"  543","line":"  : comm(std::make_shared<Commxx>(bunch_comm))"},
{"lineNum":"  544","line":"  , boundary(LB::open)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  545","line":"  , boundary_param(0.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  546","line":"  , ref_part(reference_particle)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  547","line":"  , design_ref_part(reference_particle)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  548","line":"  , particle_charge(reference_particle.get_charge())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  549","line":"  , real_num(1.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  550","line":"  , parts{ bunch_particles_t<PART>(PG::regular, total_num, -1, *comm),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  551","line":"           bunch_particles_t<PART>(PG::spectator, 0, -1, *comm) }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  552","line":"  , bunch_index(0)"},
{"lineNum":"  553","line":"  , bucket_index(0)"},
{"lineNum":"  554","line":"  , array_index(0)"},
{"lineNum":"  555","line":"  , train_index(0)"},
{"lineNum":"  556","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  557","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"#endif /* BUNCH_H_ */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 58, "covered" : 0,};
var merged_data = [];
