var data = {lines:[
{"lineNum":"    1","line":"/*============================================================================="},
{"lineNum":"    2","line":"    Copyright (c) 2001-2011 Joel de Guzman"},
{"lineNum":"    3","line":"    Copyright (c) 2001-2011 Hartmut Kaiser"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"    Distributed under the Boost Software License, Version 1.0. (See accompanying"},
{"lineNum":"    6","line":"    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)"},
{"lineNum":"    7","line":"=============================================================================*/"},
{"lineNum":"    8","line":"#if !defined(SPIRIT_SEQUENCE_APR_22_2006_0811AM)"},
{"lineNum":"    9","line":"#define SPIRIT_SEQUENCE_APR_22_2006_0811AM"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#if defined(_MSC_VER)"},
{"lineNum":"   12","line":"#pragma once"},
{"lineNum":"   13","line":"#endif"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#include <boost/spirit/home/qi/operator/sequence_base.hpp>"},
{"lineNum":"   16","line":"#include <boost/spirit/home/qi/detail/fail_function.hpp>"},
{"lineNum":"   17","line":"#include <boost/spirit/home/qi/meta_compiler.hpp>"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"namespace boost { namespace spirit"},
{"lineNum":"   20","line":"{"},
{"lineNum":"   21","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   22","line":"    // Enablers"},
{"lineNum":"   23","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   24","line":"    template <>"},
{"lineNum":"   25","line":"    struct use_operator<qi::domain, proto::tag::shift_right> // enables >>"},
{"lineNum":"   26","line":"      : mpl::true_ {};"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    template <>"},
{"lineNum":"   29","line":"    struct flatten_tree<qi::domain, proto::tag::shift_right> // flattens >>"},
{"lineNum":"   30","line":"      : mpl::true_ {};"},
{"lineNum":"   31","line":"}}"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"namespace boost { namespace spirit { namespace qi"},
{"lineNum":"   34","line":"{"},
{"lineNum":"   35","line":"    template <typename Elements>"},
{"lineNum":"   36","line":"    struct sequence : sequence_base<sequence<Elements>, Elements>"},
{"lineNum":"   37","line":"    {"},
{"lineNum":"   38","line":"        friend struct sequence_base<sequence<Elements>, Elements>;"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"        sequence(Elements const& elements)"},
{"lineNum":"   41","line":"          : sequence_base<sequence<Elements>, Elements>(elements) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    private:"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        template <typename Iterator, typename Context, typename Skipper>"},
{"lineNum":"   46","line":"        static detail::fail_function<Iterator, Context, Skipper>"},
{"lineNum":"   47","line":"        fail_function("},
{"lineNum":"   48","line":"            Iterator& first, Iterator const& last"},
{"lineNum":"   49","line":"          , Context& context, Skipper const& skipper)"},
{"lineNum":"   50","line":"        {"},
{"lineNum":"   51","line":"            return detail::fail_function<Iterator, Context, Skipper>"},
{"lineNum":"   52","line":"                (first, last, context, skipper);"},
{"lineNum":"   53","line":"        }"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        std::string id() const { return \"sequence\"; }"},
{"lineNum":"   56","line":"    };"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   59","line":"    // Parser generators: make_xxx function (objects)"},
{"lineNum":"   60","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   61","line":"    template <typename Elements, typename Modifiers>"},
{"lineNum":"   62","line":"    struct make_composite<proto::tag::shift_right, Elements, Modifiers>"},
{"lineNum":"   63","line":"      : make_nary_composite<Elements, sequence>"},
{"lineNum":"   64","line":"    {};"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"//     ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   67","line":"//     // Define what attributes are compatible with a sequence"},
{"lineNum":"   68","line":"//     template <typename Attribute, typename Elements, typename Context, typename Iterator>"},
{"lineNum":"   69","line":"//     struct is_attribute_compatible<Attribute, sequence<Elements>, Context, Iterator>"},
{"lineNum":"   70","line":"//       : mpl::or_<"},
{"lineNum":"   71","line":"//             is_convertible<Attribute"},
{"lineNum":"   72","line":"//               , typename traits::attribute_of<sequence<Elements>, Context, Iterator>::type>"},
{"lineNum":"   73","line":"//           , traits::is_fusion_sequence_compatible<qi::domain, Attribute"},
{"lineNum":"   74","line":"//               , sequence<Elements>, Context, Iterator>"},
{"lineNum":"   75","line":"//           , traits::is_container_compatible<qi::domain, Attribute"},
{"lineNum":"   76","line":"//               , sequence<Elements>, Context, Iterator>"},
{"lineNum":"   77","line":"//         >"},
{"lineNum":"   78","line":"//     {};"},
{"lineNum":"   79","line":"}}}"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"namespace boost { namespace spirit { namespace traits"},
{"lineNum":"   82","line":"{"},
{"lineNum":"   83","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   84","line":"    template <typename Elements>"},
{"lineNum":"   85","line":"    struct has_semantic_action<qi::sequence<Elements> >"},
{"lineNum":"   86","line":"      : nary_has_semantic_action<Elements> {};"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    ///////////////////////////////////////////////////////////////////////////"},
{"lineNum":"   89","line":"    template <typename Elements, typename Attribute, typename Context"},
{"lineNum":"   90","line":"      , typename Iterator>"},
{"lineNum":"   91","line":"    struct handles_container<qi::sequence<Elements>, Attribute, Context"},
{"lineNum":"   92","line":"          , Iterator>"},
{"lineNum":"   93","line":"      : mpl::true_ {};"},
{"lineNum":"   94","line":"}}}"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
