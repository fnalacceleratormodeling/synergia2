var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===------------------------ type_traits ---------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP_TYPE_TRAITS"},
{"lineNum":"   11","line":"#define _LIBCPP_TYPE_TRAITS"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/*"},
{"lineNum":"   14","line":"    type_traits synopsis"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"namespace std"},
{"lineNum":"   17","line":"{"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"    // helper class:"},
{"lineNum":"   20","line":"    template <class T, T v> struct integral_constant;"},
{"lineNum":"   21","line":"    typedef integral_constant<bool, true>  true_type;   // C++11"},
{"lineNum":"   22","line":"    typedef integral_constant<bool, false> false_type;  // C++11"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    template <bool B>                                   // C++14"},
{"lineNum":"   25","line":"    using bool_constant = integral_constant<bool, B>;   // C++14"},
{"lineNum":"   26","line":"    typedef bool_constant<true> true_type;              // C++14"},
{"lineNum":"   27","line":"    typedef bool_constant<false> false_type;            // C++14"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    // helper traits"},
{"lineNum":"   30","line":"    template <bool, class T = void> struct enable_if;"},
{"lineNum":"   31","line":"    template <bool, class T, class F> struct conditional;"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    // Primary classification traits:"},
{"lineNum":"   34","line":"    template <class T> struct is_void;"},
{"lineNum":"   35","line":"    template <class T> struct is_null_pointer;  // C++14"},
{"lineNum":"   36","line":"    template <class T> struct is_integral;"},
{"lineNum":"   37","line":"    template <class T> struct is_floating_point;"},
{"lineNum":"   38","line":"    template <class T> struct is_array;"},
{"lineNum":"   39","line":"    template <class T> struct is_pointer;"},
{"lineNum":"   40","line":"    template <class T> struct is_lvalue_reference;"},
{"lineNum":"   41","line":"    template <class T> struct is_rvalue_reference;"},
{"lineNum":"   42","line":"    template <class T> struct is_member_object_pointer;"},
{"lineNum":"   43","line":"    template <class T> struct is_member_function_pointer;"},
{"lineNum":"   44","line":"    template <class T> struct is_enum;"},
{"lineNum":"   45","line":"    template <class T> struct is_union;"},
{"lineNum":"   46","line":"    template <class T> struct is_class;"},
{"lineNum":"   47","line":"    template <class T> struct is_function;"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    // Secondary classification traits:"},
{"lineNum":"   50","line":"    template <class T> struct is_reference;"},
{"lineNum":"   51","line":"    template <class T> struct is_arithmetic;"},
{"lineNum":"   52","line":"    template <class T> struct is_fundamental;"},
{"lineNum":"   53","line":"    template <class T> struct is_member_pointer;"},
{"lineNum":"   54","line":"    template <class T> struct is_scoped_enum; // C++2b"},
{"lineNum":"   55","line":"    template <class T> struct is_scalar;"},
{"lineNum":"   56","line":"    template <class T> struct is_object;"},
{"lineNum":"   57","line":"    template <class T> struct is_compound;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    // Const-volatile properties and transformations:"},
{"lineNum":"   60","line":"    template <class T> struct is_const;"},
{"lineNum":"   61","line":"    template <class T> struct is_volatile;"},
{"lineNum":"   62","line":"    template <class T> struct remove_const;"},
{"lineNum":"   63","line":"    template <class T> struct remove_volatile;"},
{"lineNum":"   64","line":"    template <class T> struct remove_cv;"},
{"lineNum":"   65","line":"    template <class T> struct add_const;"},
{"lineNum":"   66","line":"    template <class T> struct add_volatile;"},
{"lineNum":"   67","line":"    template <class T> struct add_cv;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    // Reference transformations:"},
{"lineNum":"   70","line":"    template <class T> struct remove_reference;"},
{"lineNum":"   71","line":"    template <class T> struct add_lvalue_reference;"},
{"lineNum":"   72","line":"    template <class T> struct add_rvalue_reference;"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    // Pointer transformations:"},
{"lineNum":"   75","line":"    template <class T> struct remove_pointer;"},
{"lineNum":"   76","line":"    template <class T> struct add_pointer;"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    template<class T> struct type_identity;                     // C++20"},
{"lineNum":"   79","line":"    template<class T>"},
{"lineNum":"   80","line":"      using type_identity_t = typename type_identity<T>::type;  // C++20"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    // Integral properties:"},
{"lineNum":"   83","line":"    template <class T> struct is_signed;"},
{"lineNum":"   84","line":"    template <class T> struct is_unsigned;"},
{"lineNum":"   85","line":"    template <class T> struct make_signed;"},
{"lineNum":"   86","line":"    template <class T> struct make_unsigned;"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    // Array properties and transformations:"},
{"lineNum":"   89","line":"    template <class T> struct rank;"},
{"lineNum":"   90","line":"    template <class T, unsigned I = 0> struct extent;"},
{"lineNum":"   91","line":"    template <class T> struct remove_extent;"},
{"lineNum":"   92","line":"    template <class T> struct remove_all_extents;"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    template <class T> struct is_bounded_array;                 // C++20"},
{"lineNum":"   95","line":"    template <class T> struct is_unbounded_array;               // C++20"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    // Member introspection:"},
{"lineNum":"   98","line":"    template <class T> struct is_pod;"},
{"lineNum":"   99","line":"    template <class T> struct is_trivial;"},
{"lineNum":"  100","line":"    template <class T> struct is_trivially_copyable;"},
{"lineNum":"  101","line":"    template <class T> struct is_standard_layout;"},
{"lineNum":"  102","line":"    template <class T> struct is_literal_type; // Deprecated in C++17; removed in C++20"},
{"lineNum":"  103","line":"    template <class T> struct is_empty;"},
{"lineNum":"  104","line":"    template <class T> struct is_polymorphic;"},
{"lineNum":"  105","line":"    template <class T> struct is_abstract;"},
{"lineNum":"  106","line":"    template <class T> struct is_final; // C++14"},
{"lineNum":"  107","line":"    template <class T> struct is_aggregate; // C++17"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    template <class T, class... Args> struct is_constructible;"},
{"lineNum":"  110","line":"    template <class T>                struct is_default_constructible;"},
{"lineNum":"  111","line":"    template <class T>                struct is_copy_constructible;"},
{"lineNum":"  112","line":"    template <class T>                struct is_move_constructible;"},
{"lineNum":"  113","line":"    template <class T, class U>       struct is_assignable;"},
{"lineNum":"  114","line":"    template <class T>                struct is_copy_assignable;"},
{"lineNum":"  115","line":"    template <class T>                struct is_move_assignable;"},
{"lineNum":"  116","line":"    template <class T, class U>       struct is_swappable_with;       // C++17"},
{"lineNum":"  117","line":"    template <class T>                struct is_swappable;            // C++17"},
{"lineNum":"  118","line":"    template <class T>                struct is_destructible;"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    template <class T, class... Args> struct is_trivially_constructible;"},
{"lineNum":"  121","line":"    template <class T>                struct is_trivially_default_constructible;"},
{"lineNum":"  122","line":"    template <class T>                struct is_trivially_copy_constructible;"},
{"lineNum":"  123","line":"    template <class T>                struct is_trivially_move_constructible;"},
{"lineNum":"  124","line":"    template <class T, class U>       struct is_trivially_assignable;"},
{"lineNum":"  125","line":"    template <class T>                struct is_trivially_copy_assignable;"},
{"lineNum":"  126","line":"    template <class T>                struct is_trivially_move_assignable;"},
{"lineNum":"  127","line":"    template <class T>                struct is_trivially_destructible;"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    template <class T, class... Args> struct is_nothrow_constructible;"},
{"lineNum":"  130","line":"    template <class T>                struct is_nothrow_default_constructible;"},
{"lineNum":"  131","line":"    template <class T>                struct is_nothrow_copy_constructible;"},
{"lineNum":"  132","line":"    template <class T>                struct is_nothrow_move_constructible;"},
{"lineNum":"  133","line":"    template <class T, class U>       struct is_nothrow_assignable;"},
{"lineNum":"  134","line":"    template <class T>                struct is_nothrow_copy_assignable;"},
{"lineNum":"  135","line":"    template <class T>                struct is_nothrow_move_assignable;"},
{"lineNum":"  136","line":"    template <class T, class U>       struct is_nothrow_swappable_with; // C++17"},
{"lineNum":"  137","line":"    template <class T>                struct is_nothrow_swappable;      // C++17"},
{"lineNum":"  138","line":"    template <class T>                struct is_nothrow_destructible;"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    template <class T> struct has_virtual_destructor;"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    template<class T> struct has_unique_object_representations;         // C++17"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    // Relationships between types:"},
{"lineNum":"  145","line":"    template <class T, class U> struct is_same;"},
{"lineNum":"  146","line":"    template <class Base, class Derived> struct is_base_of;"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    template <class From, class To> struct is_convertible;"},
{"lineNum":"  149","line":"    template <typename From, typename To> struct is_nothrow_convertible;                  // C++20"},
{"lineNum":"  150","line":"    template <typename From, typename To> inline constexpr bool is_nothrow_convertible_v; // C++20"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    template <class Fn, class... ArgTypes> struct is_invocable;"},
{"lineNum":"  153","line":"    template <class R, class Fn, class... ArgTypes> struct is_invocable_r;"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"    template <class Fn, class... ArgTypes> struct is_nothrow_invocable;"},
{"lineNum":"  156","line":"    template <class R, class Fn, class... ArgTypes> struct is_nothrow_invocable_r;"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    // Alignment properties and transformations:"},
{"lineNum":"  159","line":"    template <class T> struct alignment_of;"},
{"lineNum":"  160","line":"    template <size_t Len, size_t Align = most_stringent_alignment_requirement>"},
{"lineNum":"  161","line":"        struct aligned_storage;"},
{"lineNum":"  162","line":"    template <size_t Len, class... Types> struct aligned_union;"},
{"lineNum":"  163","line":"    template <class T> struct remove_cvref; // C++20"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    template <class T> struct decay;"},
{"lineNum":"  166","line":"    template <class... T> struct common_type;"},
{"lineNum":"  167","line":"    template <class T> struct underlying_type;"},
{"lineNum":"  168","line":"    template <class> class result_of; // undefined; deprecated in C++17; removed in C++20"},
{"lineNum":"  169","line":"    template <class Fn, class... ArgTypes> class result_of<Fn(ArgTypes...)>; // deprecated in C++17; removed in C++20"},
{"lineNum":"  170","line":"    template <class Fn, class... ArgTypes> struct invoke_result;  // C++17"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    // const-volatile modifications:"},
{"lineNum":"  173","line":"    template <class T>"},
{"lineNum":"  174","line":"      using remove_const_t    = typename remove_const<T>::type;  // C++14"},
{"lineNum":"  175","line":"    template <class T>"},
{"lineNum":"  176","line":"      using remove_volatile_t = typename remove_volatile<T>::type;  // C++14"},
{"lineNum":"  177","line":"    template <class T>"},
{"lineNum":"  178","line":"      using remove_cv_t       = typename remove_cv<T>::type;  // C++14"},
{"lineNum":"  179","line":"    template <class T>"},
{"lineNum":"  180","line":"      using add_const_t       = typename add_const<T>::type;  // C++14"},
{"lineNum":"  181","line":"    template <class T>"},
{"lineNum":"  182","line":"      using add_volatile_t    = typename add_volatile<T>::type;  // C++14"},
{"lineNum":"  183","line":"    template <class T>"},
{"lineNum":"  184","line":"      using add_cv_t          = typename add_cv<T>::type;  // C++14"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    // reference modifications:"},
{"lineNum":"  187","line":"    template <class T>"},
{"lineNum":"  188","line":"      using remove_reference_t     = typename remove_reference<T>::type;  // C++14"},
{"lineNum":"  189","line":"    template <class T>"},
{"lineNum":"  190","line":"      using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;  // C++14"},
{"lineNum":"  191","line":"    template <class T>"},
{"lineNum":"  192","line":"      using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;  // C++14"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"    // sign modifications:"},
{"lineNum":"  195","line":"    template <class T>"},
{"lineNum":"  196","line":"      using make_signed_t   = typename make_signed<T>::type;  // C++14"},
{"lineNum":"  197","line":"    template <class T>"},
{"lineNum":"  198","line":"      using make_unsigned_t = typename make_unsigned<T>::type;  // C++14"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    // array modifications:"},
{"lineNum":"  201","line":"    template <class T>"},
{"lineNum":"  202","line":"      using remove_extent_t      = typename remove_extent<T>::type;  // C++14"},
{"lineNum":"  203","line":"    template <class T>"},
{"lineNum":"  204","line":"      using remove_all_extents_t = typename remove_all_extents<T>::type;  // C++14"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    template <class T>"},
{"lineNum":"  207","line":"      inline constexpr bool is_bounded_array_v"},
{"lineNum":"  208","line":"        = is_bounded_array<T>::value;                                     // C++20"},
{"lineNum":"  209","line":"      inline constexpr bool is_unbounded_array_v"},
{"lineNum":"  210","line":"        = is_unbounded_array<T>::value;                                   // C++20"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"    // pointer modifications:"},
{"lineNum":"  213","line":"    template <class T>"},
{"lineNum":"  214","line":"      using remove_pointer_t = typename remove_pointer<T>::type;  // C++14"},
{"lineNum":"  215","line":"    template <class T>"},
{"lineNum":"  216","line":"      using add_pointer_t    = typename add_pointer<T>::type;  // C++14"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    // other transformations:"},
{"lineNum":"  219","line":"    template <size_t Len, size_t Align=default-alignment>"},
{"lineNum":"  220","line":"      using aligned_storage_t = typename aligned_storage<Len,Align>::type;  // C++14"},
{"lineNum":"  221","line":"    template <size_t Len, class... Types>"},
{"lineNum":"  222","line":"      using aligned_union_t   = typename aligned_union<Len,Types...>::type;  // C++14"},
{"lineNum":"  223","line":"    template <class T>"},
{"lineNum":"  224","line":"      using remove_cvref_t    = typename remove_cvref<T>::type;  // C++20"},
{"lineNum":"  225","line":"    template <class T>"},
{"lineNum":"  226","line":"      using decay_t           = typename decay<T>::type;  // C++14"},
{"lineNum":"  227","line":"    template <bool b, class T=void>"},
{"lineNum":"  228","line":"      using enable_if_t       = typename enable_if<b,T>::type;  // C++14"},
{"lineNum":"  229","line":"    template <bool b, class T, class F>"},
{"lineNum":"  230","line":"      using conditional_t     = typename conditional<b,T,F>::type;  // C++14"},
{"lineNum":"  231","line":"    template <class... T>"},
{"lineNum":"  232","line":"      using common_type_t     = typename common_type<T...>::type;  // C++14"},
{"lineNum":"  233","line":"    template <class T>"},
{"lineNum":"  234","line":"      using underlying_type_t = typename underlying_type<T>::type;  // C++14"},
{"lineNum":"  235","line":"    template <class T>"},
{"lineNum":"  236","line":"      using result_of_t       = typename result_of<T>::type;  // C++14; deprecated in C++17; removed in C++20"},
{"lineNum":"  237","line":"    template <class Fn, class... ArgTypes>"},
{"lineNum":"  238","line":"      using invoke_result_t   = typename invoke_result<Fn, ArgTypes...>::type;  // C++17"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"    template <class...>"},
{"lineNum":"  241","line":"      using void_t = void;   // C++17"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"      // See C++14 20.10.4.1, primary type categories"},
{"lineNum":"  244","line":"      template <class T> inline constexpr bool is_void_v"},
{"lineNum":"  245","line":"        = is_void<T>::value;                                             // C++17"},
{"lineNum":"  246","line":"      template <class T> inline constexpr bool is_null_pointer_v"},
{"lineNum":"  247","line":"        = is_null_pointer<T>::value;                                     // C++17"},
{"lineNum":"  248","line":"      template <class T> inline constexpr bool is_integral_v"},
{"lineNum":"  249","line":"        = is_integral<T>::value;                                         // C++17"},
{"lineNum":"  250","line":"      template <class T> inline constexpr bool is_floating_point_v"},
{"lineNum":"  251","line":"        = is_floating_point<T>::value;                                   // C++17"},
{"lineNum":"  252","line":"      template <class T> inline constexpr bool is_array_v"},
{"lineNum":"  253","line":"        = is_array<T>::value;                                            // C++17"},
{"lineNum":"  254","line":"      template <class T> inline constexpr bool is_pointer_v"},
{"lineNum":"  255","line":"        = is_pointer<T>::value;                                          // C++17"},
{"lineNum":"  256","line":"      template <class T> inline constexpr bool is_lvalue_reference_v"},
{"lineNum":"  257","line":"        = is_lvalue_reference<T>::value;                                 // C++17"},
{"lineNum":"  258","line":"      template <class T> inline constexpr bool is_rvalue_reference_v"},
{"lineNum":"  259","line":"        = is_rvalue_reference<T>::value;                                 // C++17"},
{"lineNum":"  260","line":"      template <class T> inline constexpr bool is_member_object_pointer_v"},
{"lineNum":"  261","line":"        = is_member_object_pointer<T>::value;                            // C++17"},
{"lineNum":"  262","line":"      template <class T> inline constexpr bool is_member_function_pointer_v"},
{"lineNum":"  263","line":"        = is_member_function_pointer<T>::value;                          // C++17"},
{"lineNum":"  264","line":"      template <class T> inline constexpr bool is_enum_v"},
{"lineNum":"  265","line":"        = is_enum<T>::value;                                             // C++17"},
{"lineNum":"  266","line":"      template <class T> inline constexpr bool is_union_v"},
{"lineNum":"  267","line":"        = is_union<T>::value;                                            // C++17"},
{"lineNum":"  268","line":"      template <class T> inline constexpr bool is_class_v"},
{"lineNum":"  269","line":"        = is_class<T>::value;                                            // C++17"},
{"lineNum":"  270","line":"      template <class T> inline constexpr bool is_function_v"},
{"lineNum":"  271","line":"        = is_function<T>::value;                                         // C++17"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"      // See C++14 20.10.4.2, composite type categories"},
{"lineNum":"  274","line":"      template <class T> inline constexpr bool is_reference_v"},
{"lineNum":"  275","line":"        = is_reference<T>::value;                                        // C++17"},
{"lineNum":"  276","line":"      template <class T> inline constexpr bool is_arithmetic_v"},
{"lineNum":"  277","line":"        = is_arithmetic<T>::value;                                       // C++17"},
{"lineNum":"  278","line":"      template <class T> inline constexpr bool is_fundamental_v"},
{"lineNum":"  279","line":"        = is_fundamental<T>::value;                                      // C++17"},
{"lineNum":"  280","line":"      template <class T> inline constexpr bool is_object_v"},
{"lineNum":"  281","line":"        = is_object<T>::value;                                           // C++17"},
{"lineNum":"  282","line":"      template <class T> inline constexpr bool is_scalar_v"},
{"lineNum":"  283","line":"        = is_scalar<T>::value;                                           // C++17"},
{"lineNum":"  284","line":"      template <class T> inline constexpr bool is_compound_v"},
{"lineNum":"  285","line":"        = is_compound<T>::value;                                         // C++17"},
{"lineNum":"  286","line":"      template <class T> inline constexpr bool is_member_pointer_v"},
{"lineNum":"  287","line":"        = is_member_pointer<T>::value;                                   // C++17"},
{"lineNum":"  288","line":"      template <class T> inline constexpr bool is_scoped_enum_v"},
{"lineNum":"  289","line":"        = is_scoped_enum<T>::value;                                      // C++2b"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"      // See C++14 20.10.4.3, type properties"},
{"lineNum":"  292","line":"      template <class T> inline constexpr bool is_const_v"},
{"lineNum":"  293","line":"        = is_const<T>::value;                                            // C++17"},
{"lineNum":"  294","line":"      template <class T> inline constexpr bool is_volatile_v"},
{"lineNum":"  295","line":"        = is_volatile<T>::value;                                         // C++17"},
{"lineNum":"  296","line":"      template <class T> inline constexpr bool is_trivial_v"},
{"lineNum":"  297","line":"        = is_trivial<T>::value;                                          // C++17"},
{"lineNum":"  298","line":"      template <class T> inline constexpr bool is_trivially_copyable_v"},
{"lineNum":"  299","line":"        = is_trivially_copyable<T>::value;                               // C++17"},
{"lineNum":"  300","line":"      template <class T> inline constexpr bool is_standard_layout_v"},
{"lineNum":"  301","line":"        = is_standard_layout<T>::value;                                  // C++17"},
{"lineNum":"  302","line":"      template <class T> inline constexpr bool is_pod_v"},
{"lineNum":"  303","line":"        = is_pod<T>::value;                                              // C++17"},
{"lineNum":"  304","line":"      template <class T> inline constexpr bool is_literal_type_v"},
{"lineNum":"  305","line":"        = is_literal_type<T>::value;                                     // C++17; deprecated in C++17; removed in C++20"},
{"lineNum":"  306","line":"      template <class T> inline constexpr bool is_empty_v"},
{"lineNum":"  307","line":"        = is_empty<T>::value;                                            // C++17"},
{"lineNum":"  308","line":"      template <class T> inline constexpr bool is_polymorphic_v"},
{"lineNum":"  309","line":"        = is_polymorphic<T>::value;                                      // C++17"},
{"lineNum":"  310","line":"      template <class T> inline constexpr bool is_abstract_v"},
{"lineNum":"  311","line":"        = is_abstract<T>::value;                                         // C++17"},
{"lineNum":"  312","line":"      template <class T> inline constexpr bool is_final_v"},
{"lineNum":"  313","line":"        = is_final<T>::value;                                            // C++17"},
{"lineNum":"  314","line":"      template <class T> inline constexpr bool is_aggregate_v"},
{"lineNum":"  315","line":"        = is_aggregate<T>::value;                                        // C++17"},
{"lineNum":"  316","line":"      template <class T> inline constexpr bool is_signed_v"},
{"lineNum":"  317","line":"        = is_signed<T>::value;                                           // C++17"},
{"lineNum":"  318","line":"      template <class T> inline constexpr bool is_unsigned_v"},
{"lineNum":"  319","line":"        = is_unsigned<T>::value;                                         // C++17"},
{"lineNum":"  320","line":"      template <class T, class... Args> inline constexpr bool is_constructible_v"},
{"lineNum":"  321","line":"        = is_constructible<T, Args...>::value;                           // C++17"},
{"lineNum":"  322","line":"      template <class T> inline constexpr bool is_default_constructible_v"},
{"lineNum":"  323","line":"        = is_default_constructible<T>::value;                            // C++17"},
{"lineNum":"  324","line":"      template <class T> inline constexpr bool is_copy_constructible_v"},
{"lineNum":"  325","line":"        = is_copy_constructible<T>::value;                               // C++17"},
{"lineNum":"  326","line":"      template <class T> inline constexpr bool is_move_constructible_v"},
{"lineNum":"  327","line":"        = is_move_constructible<T>::value;                               // C++17"},
{"lineNum":"  328","line":"      template <class T, class U> inline constexpr bool is_assignable_v"},
{"lineNum":"  329","line":"        = is_assignable<T, U>::value;                                    // C++17"},
{"lineNum":"  330","line":"      template <class T> inline constexpr bool is_copy_assignable_v"},
{"lineNum":"  331","line":"        = is_copy_assignable<T>::value;                                  // C++17"},
{"lineNum":"  332","line":"      template <class T> inline constexpr bool is_move_assignable_v"},
{"lineNum":"  333","line":"        = is_move_assignable<T>::value;                                  // C++17"},
{"lineNum":"  334","line":"      template <class T, class U> inline constexpr bool is_swappable_with_v"},
{"lineNum":"  335","line":"        = is_swappable_with<T, U>::value;                                // C++17"},
{"lineNum":"  336","line":"      template <class T> inline constexpr bool is_swappable_v"},
{"lineNum":"  337","line":"        = is_swappable<T>::value;                                        // C++17"},
{"lineNum":"  338","line":"      template <class T> inline constexpr bool is_destructible_v"},
{"lineNum":"  339","line":"        = is_destructible<T>::value;                                     // C++17"},
{"lineNum":"  340","line":"      template <class T, class... Args> inline constexpr bool is_trivially_constructible_v"},
{"lineNum":"  341","line":"        = is_trivially_constructible<T, Args...>::value;                 // C++17"},
{"lineNum":"  342","line":"      template <class T> inline constexpr bool is_trivially_default_constructible_v"},
{"lineNum":"  343","line":"        = is_trivially_default_constructible<T>::value;                  // C++17"},
{"lineNum":"  344","line":"      template <class T> inline constexpr bool is_trivially_copy_constructible_v"},
{"lineNum":"  345","line":"        = is_trivially_copy_constructible<T>::value;                     // C++17"},
{"lineNum":"  346","line":"      template <class T> inline constexpr bool is_trivially_move_constructible_v"},
{"lineNum":"  347","line":"        = is_trivially_move_constructible<T>::value;                     // C++17"},
{"lineNum":"  348","line":"      template <class T, class U> inline constexpr bool is_trivially_assignable_v"},
{"lineNum":"  349","line":"        = is_trivially_assignable<T, U>::value;                          // C++17"},
{"lineNum":"  350","line":"      template <class T> inline constexpr bool is_trivially_copy_assignable_v"},
{"lineNum":"  351","line":"        = is_trivially_copy_assignable<T>::value;                        // C++17"},
{"lineNum":"  352","line":"      template <class T> inline constexpr bool is_trivially_move_assignable_v"},
{"lineNum":"  353","line":"        = is_trivially_move_assignable<T>::value;                        // C++17"},
{"lineNum":"  354","line":"      template <class T> inline constexpr bool is_trivially_destructible_v"},
{"lineNum":"  355","line":"        = is_trivially_destructible<T>::value;                           // C++17"},
{"lineNum":"  356","line":"      template <class T, class... Args> inline constexpr bool is_nothrow_constructible_v"},
{"lineNum":"  357","line":"        = is_nothrow_constructible<T, Args...>::value;                   // C++17"},
{"lineNum":"  358","line":"      template <class T> inline constexpr bool is_nothrow_default_constructible_v"},
{"lineNum":"  359","line":"        = is_nothrow_default_constructible<T>::value;                    // C++17"},
{"lineNum":"  360","line":"      template <class T> inline constexpr bool is_nothrow_copy_constructible_v"},
{"lineNum":"  361","line":"        = is_nothrow_copy_constructible<T>::value;                       // C++17"},
{"lineNum":"  362","line":"      template <class T> inline constexpr bool is_nothrow_move_constructible_v"},
{"lineNum":"  363","line":"        = is_nothrow_move_constructible<T>::value;                       // C++17"},
{"lineNum":"  364","line":"      template <class T, class U> inline constexpr bool is_nothrow_assignable_v"},
{"lineNum":"  365","line":"        = is_nothrow_assignable<T, U>::value;                            // C++17"},
{"lineNum":"  366","line":"      template <class T> inline constexpr bool is_nothrow_copy_assignable_v"},
{"lineNum":"  367","line":"        = is_nothrow_copy_assignable<T>::value;                          // C++17"},
{"lineNum":"  368","line":"      template <class T> inline constexpr bool is_nothrow_move_assignable_v"},
{"lineNum":"  369","line":"        = is_nothrow_move_assignable<T>::value;                          // C++17"},
{"lineNum":"  370","line":"      template <class T, class U> inline constexpr bool is_nothrow_swappable_with_v"},
{"lineNum":"  371","line":"        = is_nothrow_swappable_with<T, U>::value;                       // C++17"},
{"lineNum":"  372","line":"      template <class T> inline constexpr bool is_nothrow_swappable_v"},
{"lineNum":"  373","line":"        = is_nothrow_swappable<T>::value;                               // C++17"},
{"lineNum":"  374","line":"      template <class T> inline constexpr bool is_nothrow_destructible_v"},
{"lineNum":"  375","line":"        = is_nothrow_destructible<T>::value;                             // C++17"},
{"lineNum":"  376","line":"      template <class T> inline constexpr bool has_virtual_destructor_v"},
{"lineNum":"  377","line":"        = has_virtual_destructor<T>::value;                              // C++17"},
{"lineNum":"  378","line":"      template<class T> inline constexpr bool has_unique_object_representations_v // C++17"},
{"lineNum":"  379","line":"        = has_unique_object_representations<T>::value;"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"      // See C++14 20.10.5, type property queries"},
{"lineNum":"  382","line":"      template <class T> inline constexpr size_t alignment_of_v"},
{"lineNum":"  383","line":"        = alignment_of<T>::value;                                        // C++17"},
{"lineNum":"  384","line":"      template <class T> inline constexpr size_t rank_v"},
{"lineNum":"  385","line":"        = rank<T>::value;                                                // C++17"},
{"lineNum":"  386","line":"      template <class T, unsigned I = 0> inline constexpr size_t extent_v"},
{"lineNum":"  387","line":"        = extent<T, I>::value;                                           // C++17"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"      // See C++14 20.10.6, type relations"},
{"lineNum":"  390","line":"      template <class T, class U> inline constexpr bool is_same_v"},
{"lineNum":"  391","line":"        = is_same<T, U>::value;                                          // C++17"},
{"lineNum":"  392","line":"      template <class Base, class Derived> inline constexpr bool is_base_of_v"},
{"lineNum":"  393","line":"        = is_base_of<Base, Derived>::value;                              // C++17"},
{"lineNum":"  394","line":"      template <class From, class To> inline constexpr bool is_convertible_v"},
{"lineNum":"  395","line":"        = is_convertible<From, To>::value;                               // C++17"},
{"lineNum":"  396","line":"      template <class Fn, class... ArgTypes> inline constexpr bool is_invocable_v"},
{"lineNum":"  397","line":"        = is_invocable<Fn, ArgTypes...>::value;                          // C++17"},
{"lineNum":"  398","line":"      template <class R, class Fn, class... ArgTypes> inline constexpr bool is_invocable_r_v"},
{"lineNum":"  399","line":"        = is_invocable_r<R, Fn, ArgTypes...>::value;                     // C++17"},
{"lineNum":"  400","line":"      template <class Fn, class... ArgTypes> inline constexpr bool is_nothrow_invocable_v"},
{"lineNum":"  401","line":"        = is_nothrow_invocable<Fn, ArgTypes...>::value;                  // C++17"},
{"lineNum":"  402","line":"      template <class R, class Fn, class... ArgTypes> inline constexpr bool is_nothrow_invocable_r_v"},
{"lineNum":"  403","line":"        = is_nothrow_invocable_r<R, Fn, ArgTypes...>::value;             // C++17"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"      // [meta.logical], logical operator traits:"},
{"lineNum":"  406","line":"      template<class... B> struct conjunction;                           // C++17"},
{"lineNum":"  407","line":"      template<class... B>"},
{"lineNum":"  408","line":"        inline constexpr bool conjunction_v = conjunction<B...>::value;  // C++17"},
{"lineNum":"  409","line":"      template<class... B> struct disjunction;                           // C++17"},
{"lineNum":"  410","line":"      template<class... B>"},
{"lineNum":"  411","line":"        inline constexpr bool disjunction_v = disjunction<B...>::value;  // C++17"},
{"lineNum":"  412","line":"      template<class B> struct negation;                                 // C++17"},
{"lineNum":"  413","line":"      template<class B>"},
{"lineNum":"  414","line":"        inline constexpr bool negation_v = negation<B>::value;           // C++17"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"}"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"*/"},
{"lineNum":"  419","line":"#include <__config>"},
{"lineNum":"  420","line":"#include <cstddef>"},
{"lineNum":"  421","line":"#include <version>"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"  424","line":"#pragma GCC system_header"},
{"lineNum":"  425","line":"#endif"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"template <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS pair;"},
{"lineNum":"  430","line":"template <class _Tp> class _LIBCPP_TEMPLATE_VIS reference_wrapper;"},
{"lineNum":"  431","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS hash;"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"template <class _Tp, _Tp __v>"},
{"lineNum":"  434","line":"struct _LIBCPP_TEMPLATE_VIS integral_constant"},
{"lineNum":"  435","line":"{"},
{"lineNum":"  436","line":"  static _LIBCPP_CONSTEXPR const _Tp      value = __v;"},
{"lineNum":"  437","line":"  typedef _Tp               value_type;"},
{"lineNum":"  438","line":"  typedef integral_constant type;"},
{"lineNum":"  439","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  440","line":"  _LIBCPP_CONSTEXPR operator value_type() const _NOEXCEPT {return value;}"},
{"lineNum":"  441","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  442","line":"  _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":"  443","line":"  constexpr value_type operator ()() const _NOEXCEPT {return value;}"},
{"lineNum":"  444","line":"#endif"},
{"lineNum":"  445","line":"};"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"template <class _Tp, _Tp __v>"},
{"lineNum":"  448","line":"_LIBCPP_CONSTEXPR const _Tp integral_constant<_Tp, __v>::value;"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  451","line":"template <bool __b>"},
{"lineNum":"  452","line":"using bool_constant = integral_constant<bool, __b>;"},
{"lineNum":"  453","line":"#define _LIBCPP_BOOL_CONSTANT(__b) bool_constant<(__b)>"},
{"lineNum":"  454","line":"#else"},
{"lineNum":"  455","line":"#define _LIBCPP_BOOL_CONSTANT(__b) integral_constant<bool,(__b)>"},
{"lineNum":"  456","line":"#endif"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"typedef _LIBCPP_BOOL_CONSTANT(true)  true_type;"},
{"lineNum":"  459","line":"typedef _LIBCPP_BOOL_CONSTANT(false) false_type;"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"template <bool _Val>"},
{"lineNum":"  462","line":"using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"template <bool> struct _MetaBase;"},
{"lineNum":"  465","line":"template <>"},
{"lineNum":"  466","line":"struct _MetaBase<true> {"},
{"lineNum":"  467","line":"  template <class _Tp, class _Up>"},
{"lineNum":"  468","line":"  using _SelectImpl _LIBCPP_NODEBUG_TYPE = _Tp;"},
{"lineNum":"  469","line":"  template <template <class...> class _FirstFn, template <class...> class, class ..._Args>"},
{"lineNum":"  470","line":"  using _SelectApplyImpl _LIBCPP_NODEBUG_TYPE = _FirstFn<_Args...>;"},
{"lineNum":"  471","line":"  template <class _First, class...>"},
{"lineNum":"  472","line":"  using _FirstImpl _LIBCPP_NODEBUG_TYPE = _First;"},
{"lineNum":"  473","line":"  template <class, class _Second, class...>"},
{"lineNum":"  474","line":"  using _SecondImpl _LIBCPP_NODEBUG_TYPE = _Second;"},
{"lineNum":"  475","line":"  template <class _Tp = void>"},
{"lineNum":"  476","line":"  using _EnableIfImpl _LIBCPP_NODEBUG_TYPE = _Tp;"},
{"lineNum":"  477","line":"  template <class _Result, class _First, class ..._Rest>"},
{"lineNum":"  478","line":"  using _OrImpl _LIBCPP_NODEBUG_TYPE = typename _MetaBase<_First::value != true && sizeof...(_Rest) != 0>::template _OrImpl<_First, _Rest...>;"},
{"lineNum":"  479","line":"};"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"template <>"},
{"lineNum":"  482","line":"struct _MetaBase<false> {"},
{"lineNum":"  483","line":"  template <class _Tp, class _Up>"},
{"lineNum":"  484","line":"  using _SelectImpl _LIBCPP_NODEBUG_TYPE = _Up;"},
{"lineNum":"  485","line":"  template <template <class...> class, template <class...> class _SecondFn, class ..._Args>"},
{"lineNum":"  486","line":"  using _SelectApplyImpl _LIBCPP_NODEBUG_TYPE = _SecondFn<_Args...>;"},
{"lineNum":"  487","line":"  template <class _Result, class ...>"},
{"lineNum":"  488","line":"  using _OrImpl _LIBCPP_NODEBUG_TYPE = _Result;"},
{"lineNum":"  489","line":"};"},
{"lineNum":"  490","line":"template <bool _Cond, class _Ret = void>"},
{"lineNum":"  491","line":"using _EnableIf _LIBCPP_NODEBUG_TYPE = typename _MetaBase<_Cond>::template _EnableIfImpl<_Ret>;"},
{"lineNum":"  492","line":"template <bool _Cond, class _IfRes, class _ElseRes>"},
{"lineNum":"  493","line":"using _If _LIBCPP_NODEBUG_TYPE = typename _MetaBase<_Cond>::template _SelectImpl<_IfRes, _ElseRes>;"},
{"lineNum":"  494","line":"template <class ..._Rest>"},
{"lineNum":"  495","line":"using _Or _LIBCPP_NODEBUG_TYPE = typename _MetaBase< sizeof...(_Rest) != 0 >::template _OrImpl<false_type, _Rest...>;"},
{"lineNum":"  496","line":"template <class _Pred>"},
{"lineNum":"  497","line":"struct _Not : _BoolConstant<!_Pred::value> {};"},
{"lineNum":"  498","line":"template <class ..._Args>"},
{"lineNum":"  499","line":"using _FirstType _LIBCPP_NODEBUG_TYPE = typename _MetaBase<(sizeof...(_Args) >= 1)>::template _FirstImpl<_Args...>;"},
{"lineNum":"  500","line":"template <class ..._Args>"},
{"lineNum":"  501","line":"using _SecondType _LIBCPP_NODEBUG_TYPE = typename _MetaBase<(sizeof...(_Args) >= 2)>::template _SecondImpl<_Args...>;"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"template <class ...> using __expand_to_true = true_type;"},
{"lineNum":"  504","line":"template <class ..._Pred>"},
{"lineNum":"  505","line":"__expand_to_true<_EnableIf<_Pred::value>...> __and_helper(int);"},
{"lineNum":"  506","line":"template <class ...>"},
{"lineNum":"  507","line":"false_type __and_helper(...);"},
{"lineNum":"  508","line":"template <class ..._Pred>"},
{"lineNum":"  509","line":"using _And _LIBCPP_NODEBUG_TYPE = decltype(__and_helper<_Pred...>(0));"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"template <template <class...> class _Func, class ..._Args>"},
{"lineNum":"  512","line":"struct _Lazy : _Func<_Args...> {};"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"// Member detector base"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"template <template <class...> class _Templ, class ..._Args, class = _Templ<_Args...> >"},
{"lineNum":"  517","line":"true_type __sfinae_test_impl(int);"},
{"lineNum":"  518","line":"template <template <class...> class, class ...>"},
{"lineNum":"  519","line":"false_type __sfinae_test_impl(...);"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"template <template <class ...> class _Templ, class ..._Args>"},
{"lineNum":"  522","line":"using _IsValidExpansion _LIBCPP_NODEBUG_TYPE = decltype(__sfinae_test_impl<_Templ, _Args...>(0));"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"template <class>"},
{"lineNum":"  525","line":"struct __void_t { typedef void type; };"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"template <class _Tp>"},
{"lineNum":"  528","line":"struct __identity { typedef _Tp type; };"},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"template <class _Tp>"},
{"lineNum":"  531","line":"using __identity_t _LIBCPP_NODEBUG_TYPE = typename __identity<_Tp>::type;"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"template <class _Tp, bool>"},
{"lineNum":"  534","line":"struct _LIBCPP_TEMPLATE_VIS __dependent_type : public _Tp {};"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"template <bool _Bp, class _If, class _Then>"},
{"lineNum":"  538","line":"    struct _LIBCPP_TEMPLATE_VIS conditional {typedef _If type;};"},
{"lineNum":"  539","line":"template <class _If, class _Then>"},
{"lineNum":"  540","line":"    struct _LIBCPP_TEMPLATE_VIS conditional<false, _If, _Then> {typedef _Then type;};"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  543","line":"template <bool _Bp, class _If, class _Then> using conditional_t = typename conditional<_Bp, _If, _Then>::type;"},
{"lineNum":"  544","line":"#endif"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"template <bool, class _Tp = void> struct _LIBCPP_TEMPLATE_VIS enable_if {};"},
{"lineNum":"  547","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS enable_if<true, _Tp> {typedef _Tp type;};"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  550","line":"template <bool _Bp, class _Tp = void> using enable_if_t = typename enable_if<_Bp, _Tp>::type;"},
{"lineNum":"  551","line":"#endif"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"// is_same"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"#if __has_keyword(__is_same)"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"template <class _Tp, class _Up>"},
{"lineNum":"  558","line":"struct _LIBCPP_TEMPLATE_VIS is_same : _BoolConstant<__is_same(_Tp, _Up)> { };"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  561","line":"template <class _Tp, class _Up>"},
{"lineNum":"  562","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_same_v = __is_same(_Tp, _Up);"},
{"lineNum":"  563","line":"#endif"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"#else"},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"template <class _Tp, class _Up> struct _LIBCPP_TEMPLATE_VIS is_same           : public false_type {};"},
{"lineNum":"  568","line":"template <class _Tp>            struct _LIBCPP_TEMPLATE_VIS is_same<_Tp, _Tp> : public true_type {};"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  571","line":"template <class _Tp, class _Up>"},
{"lineNum":"  572","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_same_v"},
{"lineNum":"  573","line":"    = is_same<_Tp, _Up>::value;"},
{"lineNum":"  574","line":"#endif"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"#endif // __is_same"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"template <class _Tp, class _Up>"},
{"lineNum":"  579","line":"using _IsSame = _BoolConstant<"},
{"lineNum":"  580","line":"#ifdef __clang__"},
{"lineNum":"  581","line":"    __is_same(_Tp, _Up)"},
{"lineNum":"  582","line":"#else"},
{"lineNum":"  583","line":"    is_same<_Tp, _Up>::value"},
{"lineNum":"  584","line":"#endif"},
{"lineNum":"  585","line":">;"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"template <class _Tp, class _Up>"},
{"lineNum":"  588","line":"using _IsNotSame = _BoolConstant<"},
{"lineNum":"  589","line":"#ifdef __clang__"},
{"lineNum":"  590","line":"    !__is_same(_Tp, _Up)"},
{"lineNum":"  591","line":"#else"},
{"lineNum":"  592","line":"    !is_same<_Tp, _Up>::value"},
{"lineNum":"  593","line":"#endif"},
{"lineNum":"  594","line":">;"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"template <class _Tp>"},
{"lineNum":"  598","line":"using __test_for_primary_template = _EnableIf<"},
{"lineNum":"  599","line":"    _IsSame<_Tp, typename _Tp::__primary_template>::value"},
{"lineNum":"  600","line":"  >;"},
{"lineNum":"  601","line":"template <class _Tp>"},
{"lineNum":"  602","line":"using __is_primary_template = _IsValidExpansion<"},
{"lineNum":"  603","line":"    __test_for_primary_template, _Tp"},
{"lineNum":"  604","line":"  >;"},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"struct __two {char __lx[2];};"},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"// helper class:"},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"// is_const"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"#if __has_keyword(__is_const)"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"template <class _Tp>"},
{"lineNum":"  615","line":"struct _LIBCPP_TEMPLATE_VIS is_const : _BoolConstant<__is_const(_Tp)> { };"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  618","line":"template <class _Tp>"},
{"lineNum":"  619","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_const_v = __is_const(_Tp);"},
{"lineNum":"  620","line":"#endif"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"#else"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_const            : public false_type {};"},
{"lineNum":"  625","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_const<_Tp const> : public true_type {};"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  628","line":"template <class _Tp>"},
{"lineNum":"  629","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_const_v"},
{"lineNum":"  630","line":"    = is_const<_Tp>::value;"},
{"lineNum":"  631","line":"#endif"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"#endif // __has_keyword(__is_const)"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"// is_volatile"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"#if __has_keyword(__is_volatile)"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"template <class _Tp>"},
{"lineNum":"  640","line":"struct _LIBCPP_TEMPLATE_VIS is_volatile : _BoolConstant<__is_volatile(_Tp)> { };"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  643","line":"template <class _Tp>"},
{"lineNum":"  644","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_volatile_v = __is_volatile(_Tp);"},
{"lineNum":"  645","line":"#endif"},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"#else"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_volatile               : public false_type {};"},
{"lineNum":"  650","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_volatile<_Tp volatile> : public true_type {};"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  653","line":"template <class _Tp>"},
{"lineNum":"  654","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_volatile_v"},
{"lineNum":"  655","line":"    = is_volatile<_Tp>::value;"},
{"lineNum":"  656","line":"#endif"},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"#endif // __has_keyword(__is_volatile)"},
{"lineNum":"  659","line":""},
{"lineNum":"  660","line":"// remove_const"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"#if __has_keyword(__remove_const)"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"template <class _Tp>"},
{"lineNum":"  665","line":"struct _LIBCPP_TEMPLATE_VIS remove_const {typedef __remove_const(_Tp) type;};"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  668","line":"template <class _Tp> using remove_const_t = __remove_const(_Tp);"},
{"lineNum":"  669","line":"#endif"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"#else"},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_const            {typedef _Tp type;};"},
{"lineNum":"  674","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_const<const _Tp> {typedef _Tp type;};"},
{"lineNum":"  675","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  676","line":"template <class _Tp> using remove_const_t = typename remove_const<_Tp>::type;"},
{"lineNum":"  677","line":"#endif"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"#endif // __has_keyword(__remove_const)"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"// remove_volatile"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"#if __has_keyword(__remove_volatile)"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"template <class _Tp>"},
{"lineNum":"  686","line":"struct _LIBCPP_TEMPLATE_VIS remove_volatile {typedef __remove_volatile(_Tp) type;};"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  689","line":"template <class _Tp> using remove_volatile_t = __remove_volatile(_Tp);"},
{"lineNum":"  690","line":"#endif"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"#else"},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_volatile               {typedef _Tp type;};"},
{"lineNum":"  695","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_volatile<volatile _Tp> {typedef _Tp type;};"},
{"lineNum":"  696","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  697","line":"template <class _Tp> using remove_volatile_t = typename remove_volatile<_Tp>::type;"},
{"lineNum":"  698","line":"#endif"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"#endif // __has_keyword(__remove_volatile)"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"// remove_cv"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"#if __has_keyword(__remove_cv)"},
{"lineNum":"  705","line":""},
{"lineNum":"  706","line":"template <class _Tp>"},
{"lineNum":"  707","line":"struct _LIBCPP_TEMPLATE_VIS remove_cv {typedef __remove_cv(_Tp) type;};"},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  710","line":"template <class _Tp> using remove_cv_t = __remove_cv(_Tp);"},
{"lineNum":"  711","line":"#endif"},
{"lineNum":"  712","line":""},
{"lineNum":"  713","line":"#else"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_cv"},
{"lineNum":"  716","line":"{typedef typename remove_volatile<typename remove_const<_Tp>::type>::type type;};"},
{"lineNum":"  717","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  718","line":"template <class _Tp> using remove_cv_t = typename remove_cv<_Tp>::type;"},
{"lineNum":"  719","line":"#endif"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"#endif // __has_keyword(__remove_cv)"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"// is_void"},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"#if __has_keyword(__is_void)"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"template <class _Tp>"},
{"lineNum":"  728","line":"struct _LIBCPP_TEMPLATE_VIS is_void : _BoolConstant<__is_void(_Tp)> { };"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  731","line":"template <class _Tp>"},
{"lineNum":"  732","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_void_v = __is_void(_Tp);"},
{"lineNum":"  733","line":"#endif"},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"#else"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_void"},
{"lineNum":"  738","line":"    : public is_same<typename remove_cv<_Tp>::type, void> {};"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  741","line":"template <class _Tp>"},
{"lineNum":"  742","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_void_v"},
{"lineNum":"  743","line":"    = is_void<_Tp>::value;"},
{"lineNum":"  744","line":"#endif"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"#endif // __has_keyword(__is_void)"},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"// __is_nullptr_t"},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"template <class _Tp> struct __is_nullptr_t_impl       : public false_type {};"},
{"lineNum":"  751","line":"template <>          struct __is_nullptr_t_impl<nullptr_t> : public true_type {};"},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS __is_nullptr_t"},
{"lineNum":"  754","line":"    : public __is_nullptr_t_impl<typename remove_cv<_Tp>::type> {};"},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":"  757","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_null_pointer"},
{"lineNum":"  758","line":"    : public __is_nullptr_t_impl<typename remove_cv<_Tp>::type> {};"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  761","line":"template <class _Tp>"},
{"lineNum":"  762","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_null_pointer_v"},
{"lineNum":"  763","line":"    = is_null_pointer<_Tp>::value;"},
{"lineNum":"  764","line":"#endif"},
{"lineNum":"  765","line":"#endif // _LIBCPP_STD_VER > 11"},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"// is_integral"},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"#if __has_keyword(__is_integral)"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"template <class _Tp>"},
{"lineNum":"  772","line":"struct _LIBCPP_TEMPLATE_VIS is_integral : _BoolConstant<__is_integral(_Tp)> { };"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":"  775","line":"template <class _Tp>"},
{"lineNum":"  776","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_integral_v = __is_integral(_Tp);"},
{"lineNum":"  777","line":"#endif"},
{"lineNum":"  778","line":""},
{"lineNum":"  779","line":"#else"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_integral"},
{"lineNum":"  782","line":"    : public _BoolConstant<__libcpp_is_integral<typename remove_cv<_Tp>::type>::value> {};"},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  785","line":"template <class _Tp>"},
{"lineNum":"  786","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_integral_v"},
{"lineNum":"  787","line":"    = is_integral<_Tp>::value;"},
{"lineNum":"  788","line":"#endif"},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"#endif // __has_keyword(__is_integral)"},
{"lineNum":"  791","line":""},
{"lineNum":"  792","line":"// __libcpp_is_signed_integer, __libcpp_is_unsigned_integer"},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"// [basic.fundamental] defines five standard signed integer types;"},
{"lineNum":"  795","line":"// __int128_t is an extended signed integer type."},
{"lineNum":"  796","line":"// The signed and unsigned integer types, plus bool and the"},
{"lineNum":"  797","line":"// five types with \"char\" in their name, compose the \"integral\" types."},
{"lineNum":"  798","line":""},
{"lineNum":"  799","line":"template <class _Tp> struct __libcpp_is_signed_integer : public false_type {};"},
{"lineNum":"  800","line":"template <> struct __libcpp_is_signed_integer<signed char>      : public true_type {};"},
{"lineNum":"  801","line":"template <> struct __libcpp_is_signed_integer<signed short>     : public true_type {};"},
{"lineNum":"  802","line":"template <> struct __libcpp_is_signed_integer<signed int>       : public true_type {};"},
{"lineNum":"  803","line":"template <> struct __libcpp_is_signed_integer<signed long>      : public true_type {};"},
{"lineNum":"  804","line":"template <> struct __libcpp_is_signed_integer<signed long long> : public true_type {};"},
{"lineNum":"  805","line":"#ifndef _LIBCPP_HAS_NO_INT128"},
{"lineNum":"  806","line":"template <> struct __libcpp_is_signed_integer<__int128_t>       : public true_type {};"},
{"lineNum":"  807","line":"#endif"},
{"lineNum":"  808","line":""},
{"lineNum":"  809","line":"template <class _Tp> struct __libcpp_is_unsigned_integer : public false_type {};"},
{"lineNum":"  810","line":"template <> struct __libcpp_is_unsigned_integer<unsigned char>      : public true_type {};"},
{"lineNum":"  811","line":"template <> struct __libcpp_is_unsigned_integer<unsigned short>     : public true_type {};"},
{"lineNum":"  812","line":"template <> struct __libcpp_is_unsigned_integer<unsigned int>       : public true_type {};"},
{"lineNum":"  813","line":"template <> struct __libcpp_is_unsigned_integer<unsigned long>      : public true_type {};"},
{"lineNum":"  814","line":"template <> struct __libcpp_is_unsigned_integer<unsigned long long> : public true_type {};"},
{"lineNum":"  815","line":"#ifndef _LIBCPP_HAS_NO_INT128"},
{"lineNum":"  816","line":"template <> struct __libcpp_is_unsigned_integer<__uint128_t>        : public true_type {};"},
{"lineNum":"  817","line":"#endif"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"// is_floating_point"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"template <class _Tp> struct __libcpp_is_floating_point              : public false_type {};"},
{"lineNum":"  822","line":"template <>          struct __libcpp_is_floating_point<float>       : public true_type {};"},
{"lineNum":"  823","line":"template <>          struct __libcpp_is_floating_point<double>      : public true_type {};"},
{"lineNum":"  824","line":"template <>          struct __libcpp_is_floating_point<long double> : public true_type {};"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_floating_point"},
{"lineNum":"  827","line":"    : public __libcpp_is_floating_point<typename remove_cv<_Tp>::type> {};"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  830","line":"template <class _Tp>"},
{"lineNum":"  831","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_floating_point_v"},
{"lineNum":"  832","line":"    = is_floating_point<_Tp>::value;"},
{"lineNum":"  833","line":"#endif"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"// is_array"},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":"#if __has_keyword(__is_array)"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"template <class _Tp>"},
{"lineNum":"  840","line":"struct _LIBCPP_TEMPLATE_VIS is_array : _BoolConstant<__is_array(_Tp)> { };"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  843","line":"template <class _Tp>"},
{"lineNum":"  844","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_array_v = __is_array(_Tp);"},
{"lineNum":"  845","line":"#endif"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"#else"},
{"lineNum":"  848","line":""},
{"lineNum":"  849","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_array"},
{"lineNum":"  850","line":"    : public false_type {};"},
{"lineNum":"  851","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_array<_Tp[]>"},
{"lineNum":"  852","line":"    : public true_type {};"},
{"lineNum":"  853","line":"template <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS is_array<_Tp[_Np]>"},
{"lineNum":"  854","line":"    : public true_type {};"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  857","line":"template <class _Tp>"},
{"lineNum":"  858","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_array_v"},
{"lineNum":"  859","line":"    = is_array<_Tp>::value;"},
{"lineNum":"  860","line":"#endif"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"#endif // __has_keyword(__is_array)"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"// is_pointer"},
{"lineNum":"  865","line":""},
{"lineNum":"  866","line":"// Before Clang 11 / AppleClang 12.0.5, __is_pointer didn\'t work for Objective-C types."},
{"lineNum":"  867","line":"#if __has_keyword(__is_pointer) &&                                             \\"},
{"lineNum":"  868","line":"    !(defined(_LIBCPP_CLANG_VER) && _LIBCPP_CLANG_VER < 1100) &&               \\"},
{"lineNum":"  869","line":"    !(defined(_LIBCPP_APPLE_CLANG_VER) && _LIBCPP_APPLE_CLANG_VER < 1205)"},
{"lineNum":"  870","line":""},
{"lineNum":"  871","line":"template<class _Tp>"},
{"lineNum":"  872","line":"struct _LIBCPP_TEMPLATE_VIS is_pointer : _BoolConstant<__is_pointer(_Tp)> { };"},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  875","line":"template <class _Tp>"},
{"lineNum":"  876","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_pointer_v = __is_pointer(_Tp);"},
{"lineNum":"  877","line":"#endif"},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"#else // __has_keyword(__is_pointer)"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"template <class _Tp> struct __libcpp_is_pointer       : public false_type {};"},
{"lineNum":"  882","line":"template <class _Tp> struct __libcpp_is_pointer<_Tp*> : public true_type {};"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"template <class _Tp> struct __libcpp_remove_objc_qualifiers { typedef _Tp type; };"},
{"lineNum":"  885","line":"#if defined(_LIBCPP_HAS_OBJC_ARC)"},
{"lineNum":"  886","line":"template <class _Tp> struct __libcpp_remove_objc_qualifiers<_Tp __strong> { typedef _Tp type; };"},
{"lineNum":"  887","line":"template <class _Tp> struct __libcpp_remove_objc_qualifiers<_Tp __weak> { typedef _Tp type; };"},
{"lineNum":"  888","line":"template <class _Tp> struct __libcpp_remove_objc_qualifiers<_Tp __autoreleasing> { typedef _Tp type; };"},
{"lineNum":"  889","line":"template <class _Tp> struct __libcpp_remove_objc_qualifiers<_Tp __unsafe_unretained> { typedef _Tp type; };"},
{"lineNum":"  890","line":"#endif"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_pointer"},
{"lineNum":"  893","line":"    : public __libcpp_is_pointer<typename __libcpp_remove_objc_qualifiers<typename remove_cv<_Tp>::type>::type> {};"},
{"lineNum":"  894","line":""},
{"lineNum":"  895","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  896","line":"template <class _Tp>"},
{"lineNum":"  897","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_pointer_v"},
{"lineNum":"  898","line":"    = is_pointer<_Tp>::value;"},
{"lineNum":"  899","line":"#endif"},
{"lineNum":"  900","line":""},
{"lineNum":"  901","line":"#endif // __has_keyword(__is_pointer)"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"// is_reference"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"#if __has_keyword(__is_lvalue_reference) && \\"},
{"lineNum":"  906","line":"    __has_keyword(__is_rvalue_reference) && \\"},
{"lineNum":"  907","line":"    __has_keyword(__is_reference)"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"template<class _Tp>"},
{"lineNum":"  910","line":"struct _LIBCPP_TEMPLATE_VIS is_lvalue_reference : _BoolConstant<__is_lvalue_reference(_Tp)> { };"},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"template<class _Tp>"},
{"lineNum":"  913","line":"struct _LIBCPP_TEMPLATE_VIS is_rvalue_reference : _BoolConstant<__is_rvalue_reference(_Tp)> { };"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"template<class _Tp>"},
{"lineNum":"  916","line":"struct _LIBCPP_TEMPLATE_VIS is_reference : _BoolConstant<__is_reference(_Tp)> { };"},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  919","line":"template <class _Tp>"},
{"lineNum":"  920","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_reference_v = __is_reference(_Tp);"},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":"template <class _Tp>"},
{"lineNum":"  923","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_lvalue_reference_v = __is_lvalue_reference(_Tp);"},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"template <class _Tp>"},
{"lineNum":"  926","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_rvalue_reference_v = __is_rvalue_reference(_Tp);"},
{"lineNum":"  927","line":"#endif"},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"#else // __has_keyword(__is_lvalue_reference) && etc..."},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_lvalue_reference       : public false_type {};"},
{"lineNum":"  932","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_lvalue_reference<_Tp&> : public true_type {};"},
{"lineNum":"  933","line":""},
{"lineNum":"  934","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_rvalue_reference        : public false_type {};"},
{"lineNum":"  935","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_rvalue_reference<_Tp&&> : public true_type {};"},
{"lineNum":"  936","line":""},
{"lineNum":"  937","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_reference        : public false_type {};"},
{"lineNum":"  938","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_reference<_Tp&>  : public true_type {};"},
{"lineNum":"  939","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_reference<_Tp&&> : public true_type {};"},
{"lineNum":"  940","line":""},
{"lineNum":"  941","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  942","line":"template <class _Tp>"},
{"lineNum":"  943","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_reference_v"},
{"lineNum":"  944","line":"    = is_reference<_Tp>::value;"},
{"lineNum":"  945","line":""},
{"lineNum":"  946","line":"template <class _Tp>"},
{"lineNum":"  947","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_lvalue_reference_v"},
{"lineNum":"  948","line":"    = is_lvalue_reference<_Tp>::value;"},
{"lineNum":"  949","line":""},
{"lineNum":"  950","line":"template <class _Tp>"},
{"lineNum":"  951","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_rvalue_reference_v"},
{"lineNum":"  952","line":"    = is_rvalue_reference<_Tp>::value;"},
{"lineNum":"  953","line":"#endif"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"#endif // __has_keyword(__is_lvalue_reference) && etc..."},
{"lineNum":"  956","line":""},
{"lineNum":"  957","line":"// is_union"},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"#if __has_feature(is_union) || defined(_LIBCPP_COMPILER_GCC)"},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_union"},
{"lineNum":"  962","line":"    : public integral_constant<bool, __is_union(_Tp)> {};"},
{"lineNum":"  963","line":""},
{"lineNum":"  964","line":"#else"},
{"lineNum":"  965","line":""},
{"lineNum":"  966","line":"template <class _Tp> struct __libcpp_union : public false_type {};"},
{"lineNum":"  967","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_union"},
{"lineNum":"  968","line":"    : public __libcpp_union<typename remove_cv<_Tp>::type> {};"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"#endif"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  973","line":"template <class _Tp>"},
{"lineNum":"  974","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_union_v"},
{"lineNum":"  975","line":"    = is_union<_Tp>::value;"},
{"lineNum":"  976","line":"#endif"},
{"lineNum":"  977","line":""},
{"lineNum":"  978","line":"// is_class"},
{"lineNum":"  979","line":""},
{"lineNum":"  980","line":"#if __has_feature(is_class) || defined(_LIBCPP_COMPILER_GCC)"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_class"},
{"lineNum":"  983","line":"    : public integral_constant<bool, __is_class(_Tp)> {};"},
{"lineNum":"  984","line":""},
{"lineNum":"  985","line":"#else"},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"namespace __is_class_imp"},
{"lineNum":"  988","line":"{"},
{"lineNum":"  989","line":"template <class _Tp> char  __test(int _Tp::*);"},
{"lineNum":"  990","line":"template <class _Tp> __two __test(...);"},
{"lineNum":"  991","line":"}"},
{"lineNum":"  992","line":""},
{"lineNum":"  993","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_class"},
{"lineNum":"  994","line":"    : public integral_constant<bool, sizeof(__is_class_imp::__test<_Tp>(0)) == 1 && !is_union<_Tp>::value> {};"},
{"lineNum":"  995","line":""},
{"lineNum":"  996","line":"#endif"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":"  999","line":"template <class _Tp>"},
{"lineNum":" 1000","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_class_v"},
{"lineNum":" 1001","line":"    = is_class<_Tp>::value;"},
{"lineNum":" 1002","line":"#endif"},
{"lineNum":" 1003","line":""},
{"lineNum":" 1004","line":"// is_function"},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_function"},
{"lineNum":" 1007","line":"    : public _BoolConstant<"},
{"lineNum":" 1008","line":"#ifdef __clang__"},
{"lineNum":" 1009","line":"    __is_function(_Tp)"},
{"lineNum":" 1010","line":"#else"},
{"lineNum":" 1011","line":" !(is_reference<_Tp>::value || is_const<const _Tp>::value)"},
{"lineNum":" 1012","line":"#endif"},
{"lineNum":" 1013","line":"    > {};"},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":""},
{"lineNum":" 1016","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1017","line":"template <class _Tp>"},
{"lineNum":" 1018","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_function_v"},
{"lineNum":" 1019","line":"    = is_function<_Tp>::value;"},
{"lineNum":" 1020","line":"#endif"},
{"lineNum":" 1021","line":""},
{"lineNum":" 1022","line":"template <class _Tp> struct __libcpp_is_member_pointer {"},
{"lineNum":" 1023","line":"  enum {"},
{"lineNum":" 1024","line":"    __is_member = false,"},
{"lineNum":" 1025","line":"    __is_func = false,"},
{"lineNum":" 1026","line":"    __is_obj = false"},
{"lineNum":" 1027","line":"  };"},
{"lineNum":" 1028","line":"};"},
{"lineNum":" 1029","line":"template <class _Tp, class _Up> struct __libcpp_is_member_pointer<_Tp _Up::*> {"},
{"lineNum":" 1030","line":"  enum {"},
{"lineNum":" 1031","line":"    __is_member = true,"},
{"lineNum":" 1032","line":"    __is_func = is_function<_Tp>::value,"},
{"lineNum":" 1033","line":"    __is_obj = !__is_func,"},
{"lineNum":" 1034","line":"  };"},
{"lineNum":" 1035","line":"};"},
{"lineNum":" 1036","line":""},
{"lineNum":" 1037","line":"#if __has_keyword(__is_member_function_pointer)"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"template<class _Tp>"},
{"lineNum":" 1040","line":"struct _LIBCPP_TEMPLATE_VIS is_member_function_pointer"},
{"lineNum":" 1041","line":"    : _BoolConstant<__is_member_function_pointer(_Tp)> { };"},
{"lineNum":" 1042","line":""},
{"lineNum":" 1043","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1044","line":"template <class _Tp>"},
{"lineNum":" 1045","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_member_function_pointer_v"},
{"lineNum":" 1046","line":"    = __is_member_function_pointer(_Tp);"},
{"lineNum":" 1047","line":"#endif"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"#else // __has_keyword(__is_member_function_pointer)"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_member_function_pointer"},
{"lineNum":" 1052","line":"    : public _BoolConstant< __libcpp_is_member_pointer<typename remove_cv<_Tp>::type>::__is_func > {};"},
{"lineNum":" 1053","line":""},
{"lineNum":" 1054","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1055","line":"template <class _Tp>"},
{"lineNum":" 1056","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_member_function_pointer_v"},
{"lineNum":" 1057","line":"    = is_member_function_pointer<_Tp>::value;"},
{"lineNum":" 1058","line":"#endif"},
{"lineNum":" 1059","line":""},
{"lineNum":" 1060","line":"#endif // __has_keyword(__is_member_function_pointer)"},
{"lineNum":" 1061","line":""},
{"lineNum":" 1062","line":"// is_member_pointer"},
{"lineNum":" 1063","line":""},
{"lineNum":" 1064","line":"#if __has_keyword(__is_member_pointer)"},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"template<class _Tp>"},
{"lineNum":" 1067","line":"struct _LIBCPP_TEMPLATE_VIS is_member_pointer : _BoolConstant<__is_member_pointer(_Tp)> { };"},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1070","line":"template <class _Tp>"},
{"lineNum":" 1071","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_member_pointer_v = __is_member_pointer(_Tp);"},
{"lineNum":" 1072","line":"#endif"},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":"#else // __has_keyword(__is_member_pointer)"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_member_pointer"},
{"lineNum":" 1077","line":" : public _BoolConstant< __libcpp_is_member_pointer<typename remove_cv<_Tp>::type>::__is_member > {};"},
{"lineNum":" 1078","line":""},
{"lineNum":" 1079","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1080","line":"template <class _Tp>"},
{"lineNum":" 1081","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_member_pointer_v"},
{"lineNum":" 1082","line":"    = is_member_pointer<_Tp>::value;"},
{"lineNum":" 1083","line":"#endif"},
{"lineNum":" 1084","line":""},
{"lineNum":" 1085","line":"#endif // __has_keyword(__is_member_pointer)"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"// is_member_object_pointer"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"#if __has_keyword(__is_member_object_pointer)"},
{"lineNum":" 1090","line":""},
{"lineNum":" 1091","line":"template<class _Tp>"},
{"lineNum":" 1092","line":"struct _LIBCPP_TEMPLATE_VIS is_member_object_pointer"},
{"lineNum":" 1093","line":"    : _BoolConstant<__is_member_object_pointer(_Tp)> { };"},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1096","line":"template <class _Tp>"},
{"lineNum":" 1097","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_member_object_pointer_v"},
{"lineNum":" 1098","line":"    = __is_member_object_pointer(_Tp);"},
{"lineNum":" 1099","line":"#endif"},
{"lineNum":" 1100","line":""},
{"lineNum":" 1101","line":"#else // __has_keyword(__is_member_object_pointer)"},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_member_object_pointer"},
{"lineNum":" 1104","line":"    : public _BoolConstant< __libcpp_is_member_pointer<typename remove_cv<_Tp>::type>::__is_obj >  {};"},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1107","line":"template <class _Tp>"},
{"lineNum":" 1108","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_member_object_pointer_v"},
{"lineNum":" 1109","line":"    = is_member_object_pointer<_Tp>::value;"},
{"lineNum":" 1110","line":"#endif"},
{"lineNum":" 1111","line":""},
{"lineNum":" 1112","line":"#endif // __has_keyword(__is_member_object_pointer)"},
{"lineNum":" 1113","line":""},
{"lineNum":" 1114","line":"// is_enum"},
{"lineNum":" 1115","line":""},
{"lineNum":" 1116","line":"#if __has_feature(is_enum) || defined(_LIBCPP_COMPILER_GCC)"},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_enum"},
{"lineNum":" 1119","line":"    : public integral_constant<bool, __is_enum(_Tp)> {};"},
{"lineNum":" 1120","line":""},
{"lineNum":" 1121","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1122","line":"template <class _Tp>"},
{"lineNum":" 1123","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_enum_v = __is_enum(_Tp);"},
{"lineNum":" 1124","line":"#endif"},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"#else"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_enum"},
{"lineNum":" 1129","line":"    : public integral_constant<bool, !is_void<_Tp>::value             &&"},
{"lineNum":" 1130","line":"                                     !is_integral<_Tp>::value         &&"},
{"lineNum":" 1131","line":"                                     !is_floating_point<_Tp>::value   &&"},
{"lineNum":" 1132","line":"                                     !is_array<_Tp>::value            &&"},
{"lineNum":" 1133","line":"                                     !is_pointer<_Tp>::value          &&"},
{"lineNum":" 1134","line":"                                     !is_reference<_Tp>::value        &&"},
{"lineNum":" 1135","line":"                                     !is_member_pointer<_Tp>::value   &&"},
{"lineNum":" 1136","line":"                                     !is_union<_Tp>::value            &&"},
{"lineNum":" 1137","line":"                                     !is_class<_Tp>::value            &&"},
{"lineNum":" 1138","line":"                                     !is_function<_Tp>::value         > {};"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1141","line":"template <class _Tp>"},
{"lineNum":" 1142","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_enum_v"},
{"lineNum":" 1143","line":"    = is_enum<_Tp>::value;"},
{"lineNum":" 1144","line":"#endif"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"#endif // __has_feature(is_enum) || defined(_LIBCPP_COMPILER_GCC)"},
{"lineNum":" 1147","line":""},
{"lineNum":" 1148","line":"// is_arithmetic"},
{"lineNum":" 1149","line":""},
{"lineNum":" 1150","line":""},
{"lineNum":" 1151","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_arithmetic"},
{"lineNum":" 1152","line":"    : public integral_constant<bool, is_integral<_Tp>::value      ||"},
{"lineNum":" 1153","line":"                                     is_floating_point<_Tp>::value> {};"},
{"lineNum":" 1154","line":""},
{"lineNum":" 1155","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1156","line":"template <class _Tp>"},
{"lineNum":" 1157","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_arithmetic_v"},
{"lineNum":" 1158","line":"    = is_arithmetic<_Tp>::value;"},
{"lineNum":" 1159","line":"#endif"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"// is_fundamental"},
{"lineNum":" 1162","line":""},
{"lineNum":" 1163","line":"// Before Clang 10, __is_fundamental didn\'t work for nullptr_t."},
{"lineNum":" 1164","line":"// In C++03 nullptr_t is library-provided but must still count as \"fundamental.\""},
{"lineNum":" 1165","line":"#if __has_keyword(__is_fundamental) &&                                         \\"},
{"lineNum":" 1166","line":"    !(defined(_LIBCPP_CLANG_VER) && _LIBCPP_CLANG_VER < 1000) &&               \\"},
{"lineNum":" 1167","line":"    !defined(_LIBCPP_CXX03_LANG)"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"template<class _Tp>"},
{"lineNum":" 1170","line":"struct _LIBCPP_TEMPLATE_VIS is_fundamental : _BoolConstant<__is_fundamental(_Tp)> { };"},
{"lineNum":" 1171","line":""},
{"lineNum":" 1172","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1173","line":"template <class _Tp>"},
{"lineNum":" 1174","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_fundamental_v = __is_fundamental(_Tp);"},
{"lineNum":" 1175","line":"#endif"},
{"lineNum":" 1176","line":""},
{"lineNum":" 1177","line":"#else // __has_keyword(__is_fundamental)"},
{"lineNum":" 1178","line":""},
{"lineNum":" 1179","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_fundamental"},
{"lineNum":" 1180","line":"    : public integral_constant<bool, is_void<_Tp>::value        ||"},
{"lineNum":" 1181","line":"                                     __is_nullptr_t<_Tp>::value ||"},
{"lineNum":" 1182","line":"                                     is_arithmetic<_Tp>::value> {};"},
{"lineNum":" 1183","line":""},
{"lineNum":" 1184","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1185","line":"template <class _Tp>"},
{"lineNum":" 1186","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_fundamental_v"},
{"lineNum":" 1187","line":"    = is_fundamental<_Tp>::value;"},
{"lineNum":" 1188","line":"#endif"},
{"lineNum":" 1189","line":""},
{"lineNum":" 1190","line":"#endif // __has_keyword(__is_fundamental)"},
{"lineNum":" 1191","line":""},
{"lineNum":" 1192","line":"// is_scalar"},
{"lineNum":" 1193","line":""},
{"lineNum":" 1194","line":"// In C++03 nullptr_t is library-provided but must still count as \"scalar.\""},
{"lineNum":" 1195","line":"#if __has_keyword(__is_scalar) && !defined(_LIBCPP_CXX03_LANG)"},
{"lineNum":" 1196","line":""},
{"lineNum":" 1197","line":"template<class _Tp>"},
{"lineNum":" 1198","line":"struct _LIBCPP_TEMPLATE_VIS is_scalar : _BoolConstant<__is_scalar(_Tp)> { };"},
{"lineNum":" 1199","line":""},
{"lineNum":" 1200","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1201","line":"template <class _Tp>"},
{"lineNum":" 1202","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_scalar_v = __is_scalar(_Tp);"},
{"lineNum":" 1203","line":"#endif"},
{"lineNum":" 1204","line":""},
{"lineNum":" 1205","line":"#else // __has_keyword(__is_scalar)"},
{"lineNum":" 1206","line":""},
{"lineNum":" 1207","line":"template <class _Tp> struct __is_block : false_type {};"},
{"lineNum":" 1208","line":"#if defined(_LIBCPP_HAS_EXTENSION_BLOCKS)"},
{"lineNum":" 1209","line":"template <class _Rp, class ..._Args> struct __is_block<_Rp (^)(_Args...)> : true_type {};"},
{"lineNum":" 1210","line":"#endif"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_scalar"},
{"lineNum":" 1213","line":"    : public integral_constant<bool, is_arithmetic<_Tp>::value     ||"},
{"lineNum":" 1214","line":"                                     is_member_pointer<_Tp>::value ||"},
{"lineNum":" 1215","line":"                                     is_pointer<_Tp>::value        ||"},
{"lineNum":" 1216","line":"                                     __is_nullptr_t<_Tp>::value    ||"},
{"lineNum":" 1217","line":"                                     __is_block<_Tp>::value        ||"},
{"lineNum":" 1218","line":"                                     is_enum<_Tp>::value           > {};"},
{"lineNum":" 1219","line":""},
{"lineNum":" 1220","line":"template <> struct _LIBCPP_TEMPLATE_VIS is_scalar<nullptr_t> : public true_type {};"},
{"lineNum":" 1221","line":""},
{"lineNum":" 1222","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1223","line":"template <class _Tp>"},
{"lineNum":" 1224","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_scalar_v"},
{"lineNum":" 1225","line":"    = is_scalar<_Tp>::value;"},
{"lineNum":" 1226","line":"#endif"},
{"lineNum":" 1227","line":""},
{"lineNum":" 1228","line":"#endif // __has_keyword(__is_scalar)"},
{"lineNum":" 1229","line":""},
{"lineNum":" 1230","line":"// is_object"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"#if __has_keyword(__is_object)"},
{"lineNum":" 1233","line":""},
{"lineNum":" 1234","line":"template<class _Tp>"},
{"lineNum":" 1235","line":"struct _LIBCPP_TEMPLATE_VIS is_object : _BoolConstant<__is_object(_Tp)> { };"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1238","line":"template <class _Tp>"},
{"lineNum":" 1239","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_object_v = __is_object(_Tp);"},
{"lineNum":" 1240","line":"#endif"},
{"lineNum":" 1241","line":""},
{"lineNum":" 1242","line":"#else // __has_keyword(__is_object)"},
{"lineNum":" 1243","line":""},
{"lineNum":" 1244","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_object"},
{"lineNum":" 1245","line":"    : public integral_constant<bool, is_scalar<_Tp>::value ||"},
{"lineNum":" 1246","line":"                                     is_array<_Tp>::value  ||"},
{"lineNum":" 1247","line":"                                     is_union<_Tp>::value  ||"},
{"lineNum":" 1248","line":"                                     is_class<_Tp>::value  > {};"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1251","line":"template <class _Tp>"},
{"lineNum":" 1252","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_object_v"},
{"lineNum":" 1253","line":"    = is_object<_Tp>::value;"},
{"lineNum":" 1254","line":"#endif"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"#endif // __has_keyword(__is_object)"},
{"lineNum":" 1257","line":""},
{"lineNum":" 1258","line":"// is_compound"},
{"lineNum":" 1259","line":""},
{"lineNum":" 1260","line":"// >= 11 because in C++03 nullptr isn\'t actually nullptr"},
{"lineNum":" 1261","line":"#if __has_keyword(__is_compound) && !defined(_LIBCPP_CXX03_LANG)"},
{"lineNum":" 1262","line":""},
{"lineNum":" 1263","line":"template<class _Tp>"},
{"lineNum":" 1264","line":"struct _LIBCPP_TEMPLATE_VIS is_compound : _BoolConstant<__is_compound(_Tp)> { };"},
{"lineNum":" 1265","line":""},
{"lineNum":" 1266","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1267","line":"template <class _Tp>"},
{"lineNum":" 1268","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_compound_v = __is_compound(_Tp);"},
{"lineNum":" 1269","line":"#endif"},
{"lineNum":" 1270","line":""},
{"lineNum":" 1271","line":"#else // __has_keyword(__is_compound)"},
{"lineNum":" 1272","line":""},
{"lineNum":" 1273","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_compound"},
{"lineNum":" 1274","line":"    : public integral_constant<bool, !is_fundamental<_Tp>::value> {};"},
{"lineNum":" 1275","line":""},
{"lineNum":" 1276","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1277","line":"template <class _Tp>"},
{"lineNum":" 1278","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_compound_v"},
{"lineNum":" 1279","line":"    = is_compound<_Tp>::value;"},
{"lineNum":" 1280","line":"#endif"},
{"lineNum":" 1281","line":""},
{"lineNum":" 1282","line":"#endif // __has_keyword(__is_compound)"},
{"lineNum":" 1283","line":""},
{"lineNum":" 1284","line":"// __is_referenceable  [defns.referenceable]"},
{"lineNum":" 1285","line":""},
{"lineNum":" 1286","line":"struct __is_referenceable_impl {"},
{"lineNum":" 1287","line":"    template <class _Tp> static _Tp& __test(int);"},
{"lineNum":" 1288","line":"    template <class _Tp> static __two __test(...);"},
{"lineNum":" 1289","line":"};"},
{"lineNum":" 1290","line":""},
{"lineNum":" 1291","line":"template <class _Tp>"},
{"lineNum":" 1292","line":"struct __is_referenceable : integral_constant<bool,"},
{"lineNum":" 1293","line":"    _IsNotSame<decltype(__is_referenceable_impl::__test<_Tp>(0)), __two>::value> {};"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":""},
{"lineNum":" 1296","line":"// add_const"},
{"lineNum":" 1297","line":""},
{"lineNum":" 1298","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_const {"},
{"lineNum":" 1299","line":"  typedef _LIBCPP_NODEBUG_TYPE const _Tp type;"},
{"lineNum":" 1300","line":"};"},
{"lineNum":" 1301","line":""},
{"lineNum":" 1302","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1303","line":"template <class _Tp> using add_const_t = typename add_const<_Tp>::type;"},
{"lineNum":" 1304","line":"#endif"},
{"lineNum":" 1305","line":""},
{"lineNum":" 1306","line":"// add_volatile"},
{"lineNum":" 1307","line":""},
{"lineNum":" 1308","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_volatile {"},
{"lineNum":" 1309","line":"  typedef _LIBCPP_NODEBUG_TYPE volatile _Tp type;"},
{"lineNum":" 1310","line":"};"},
{"lineNum":" 1311","line":""},
{"lineNum":" 1312","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1313","line":"template <class _Tp> using add_volatile_t = typename add_volatile<_Tp>::type;"},
{"lineNum":" 1314","line":"#endif"},
{"lineNum":" 1315","line":""},
{"lineNum":" 1316","line":"// add_cv"},
{"lineNum":" 1317","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_cv {"},
{"lineNum":" 1318","line":"  typedef _LIBCPP_NODEBUG_TYPE const volatile _Tp type;"},
{"lineNum":" 1319","line":"};"},
{"lineNum":" 1320","line":""},
{"lineNum":" 1321","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1322","line":"template <class _Tp> using add_cv_t = typename add_cv<_Tp>::type;"},
{"lineNum":" 1323","line":"#endif"},
{"lineNum":" 1324","line":""},
{"lineNum":" 1325","line":"// remove_reference"},
{"lineNum":" 1326","line":""},
{"lineNum":" 1327","line":"#if __has_keyword(__remove_reference)"},
{"lineNum":" 1328","line":""},
{"lineNum":" 1329","line":"template<class _Tp>"},
{"lineNum":" 1330","line":"struct _LIBCPP_TEMPLATE_VIS remove_reference { typedef __remove_reference(_Tp) type; };"},
{"lineNum":" 1331","line":""},
{"lineNum":" 1332","line":"#else // __has_keyword(__remove_reference)"},
{"lineNum":" 1333","line":""},
{"lineNum":" 1334","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_reference        {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};"},
{"lineNum":" 1335","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_reference<_Tp&>  {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};"},
{"lineNum":" 1336","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_reference<_Tp&&> {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};"},
{"lineNum":" 1337","line":""},
{"lineNum":" 1338","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1339","line":"template <class _Tp> using remove_reference_t = typename remove_reference<_Tp>::type;"},
{"lineNum":" 1340","line":"#endif"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"#endif // __has_keyword(__remove_reference)"},
{"lineNum":" 1343","line":""},
{"lineNum":" 1344","line":"// add_lvalue_reference"},
{"lineNum":" 1345","line":""},
{"lineNum":" 1346","line":"template <class _Tp, bool = __is_referenceable<_Tp>::value> struct __add_lvalue_reference_impl            { typedef _LIBCPP_NODEBUG_TYPE _Tp  type; };"},
{"lineNum":" 1347","line":"template <class _Tp                                       > struct __add_lvalue_reference_impl<_Tp, true> { typedef _LIBCPP_NODEBUG_TYPE _Tp& type; };"},
{"lineNum":" 1348","line":""},
{"lineNum":" 1349","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_lvalue_reference"},
{"lineNum":" 1350","line":"{typedef _LIBCPP_NODEBUG_TYPE typename  __add_lvalue_reference_impl<_Tp>::type type;};"},
{"lineNum":" 1351","line":""},
{"lineNum":" 1352","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1353","line":"template <class _Tp> using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;"},
{"lineNum":" 1354","line":"#endif"},
{"lineNum":" 1355","line":""},
{"lineNum":" 1356","line":"template <class _Tp, bool = __is_referenceable<_Tp>::value> struct __add_rvalue_reference_impl            { typedef _LIBCPP_NODEBUG_TYPE  _Tp   type; };"},
{"lineNum":" 1357","line":"template <class _Tp                                       > struct __add_rvalue_reference_impl<_Tp, true> { typedef _LIBCPP_NODEBUG_TYPE  _Tp&& type; };"},
{"lineNum":" 1358","line":""},
{"lineNum":" 1359","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_rvalue_reference"},
{"lineNum":" 1360","line":"{typedef _LIBCPP_NODEBUG_TYPE  typename __add_rvalue_reference_impl<_Tp>::type type;};"},
{"lineNum":" 1361","line":""},
{"lineNum":" 1362","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1363","line":"template <class _Tp> using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;"},
{"lineNum":" 1364","line":"#endif"},
{"lineNum":" 1365","line":""},
{"lineNum":" 1366","line":"// Suppress deprecation notice for volatile-qualified return type resulting"},
{"lineNum":" 1367","line":"// from volatile-qualified types _Tp."},
{"lineNum":" 1368","line":"_LIBCPP_SUPPRESS_DEPRECATED_PUSH"},
{"lineNum":" 1369","line":"template <class _Tp> _Tp&& __declval(int);"},
{"lineNum":" 1370","line":"template <class _Tp> _Tp   __declval(long);"},
{"lineNum":" 1371","line":"_LIBCPP_SUPPRESS_DEPRECATED_POP"},
{"lineNum":" 1372","line":""},
{"lineNum":" 1373","line":"template <class _Tp>"},
{"lineNum":" 1374","line":"decltype(__declval<_Tp>(0))"},
{"lineNum":" 1375","line":"declval() _NOEXCEPT;"},
{"lineNum":" 1376","line":""},
{"lineNum":" 1377","line":"// __uncvref"},
{"lineNum":" 1378","line":""},
{"lineNum":" 1379","line":"template <class _Tp>"},
{"lineNum":" 1380","line":"struct __uncvref  {"},
{"lineNum":" 1381","line":"    typedef _LIBCPP_NODEBUG_TYPE typename remove_cv<typename remove_reference<_Tp>::type>::type type;"},
{"lineNum":" 1382","line":"};"},
{"lineNum":" 1383","line":""},
{"lineNum":" 1384","line":"template <class _Tp>"},
{"lineNum":" 1385","line":"struct __unconstref {"},
{"lineNum":" 1386","line":"    typedef _LIBCPP_NODEBUG_TYPE typename remove_const<typename remove_reference<_Tp>::type>::type type;"},
{"lineNum":" 1387","line":"};"},
{"lineNum":" 1388","line":""},
{"lineNum":" 1389","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1390","line":"template <class _Tp>"},
{"lineNum":" 1391","line":"using __uncvref_t _LIBCPP_NODEBUG_TYPE = typename __uncvref<_Tp>::type;"},
{"lineNum":" 1392","line":"#endif"},
{"lineNum":" 1393","line":""},
{"lineNum":" 1394","line":"// __is_same_uncvref"},
{"lineNum":" 1395","line":""},
{"lineNum":" 1396","line":"template <class _Tp, class _Up>"},
{"lineNum":" 1397","line":"struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,"},
{"lineNum":" 1398","line":"                                   typename __uncvref<_Up>::type> {};"},
{"lineNum":" 1399","line":""},
{"lineNum":" 1400","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1401","line":"// remove_cvref - same as __uncvref"},
{"lineNum":" 1402","line":"template <class _Tp>"},
{"lineNum":" 1403","line":"struct remove_cvref : public __uncvref<_Tp> {};"},
{"lineNum":" 1404","line":""},
{"lineNum":" 1405","line":"template <class _Tp> using remove_cvref_t = typename remove_cvref<_Tp>::type;"},
{"lineNum":" 1406","line":"#endif"},
{"lineNum":" 1407","line":""},
{"lineNum":" 1408","line":""},
{"lineNum":" 1409","line":"struct __any"},
{"lineNum":" 1410","line":"{"},
{"lineNum":" 1411","line":"    __any(...);"},
{"lineNum":" 1412","line":"};"},
{"lineNum":" 1413","line":""},
{"lineNum":" 1414","line":"// remove_pointer"},
{"lineNum":" 1415","line":""},
{"lineNum":" 1416","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer                      {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};"},
{"lineNum":" 1417","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer<_Tp*>                {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};"},
{"lineNum":" 1418","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer<_Tp* const>          {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};"},
{"lineNum":" 1419","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer<_Tp* volatile>       {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};"},
{"lineNum":" 1420","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer<_Tp* const volatile> {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};"},
{"lineNum":" 1421","line":""},
{"lineNum":" 1422","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1423","line":"template <class _Tp> using remove_pointer_t = typename remove_pointer<_Tp>::type;"},
{"lineNum":" 1424","line":"#endif"},
{"lineNum":" 1425","line":""},
{"lineNum":" 1426","line":"// add_pointer"},
{"lineNum":" 1427","line":""},
{"lineNum":" 1428","line":"template <class _Tp,"},
{"lineNum":" 1429","line":"        bool = __is_referenceable<_Tp>::value ||"},
{"lineNum":" 1430","line":"                _IsSame<typename remove_cv<_Tp>::type, void>::value>"},
{"lineNum":" 1431","line":"struct __add_pointer_impl"},
{"lineNum":" 1432","line":"    {typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type* type;};"},
{"lineNum":" 1433","line":"template <class _Tp> struct __add_pointer_impl<_Tp, false>"},
{"lineNum":" 1434","line":"    {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};"},
{"lineNum":" 1435","line":""},
{"lineNum":" 1436","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_pointer"},
{"lineNum":" 1437","line":"    {typedef _LIBCPP_NODEBUG_TYPE typename __add_pointer_impl<_Tp>::type type;};"},
{"lineNum":" 1438","line":""},
{"lineNum":" 1439","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1440","line":"template <class _Tp> using add_pointer_t = typename add_pointer<_Tp>::type;"},
{"lineNum":" 1441","line":"#endif"},
{"lineNum":" 1442","line":""},
{"lineNum":" 1443","line":"// type_identity"},
{"lineNum":" 1444","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1445","line":"template<class _Tp> struct type_identity { typedef _Tp type; };"},
{"lineNum":" 1446","line":"template<class _Tp> using type_identity_t = typename type_identity<_Tp>::type;"},
{"lineNum":" 1447","line":"#endif"},
{"lineNum":" 1448","line":""},
{"lineNum":" 1449","line":"// is_signed"},
{"lineNum":" 1450","line":""},
{"lineNum":" 1451","line":"// Before Clang 10, __is_signed didn\'t work for floating-point types or enums."},
{"lineNum":" 1452","line":"#if __has_keyword(__is_signed) &&                                              \\"},
{"lineNum":" 1453","line":"    !(defined(_LIBCPP_CLANG_VER) && _LIBCPP_CLANG_VER < 1000)"},
{"lineNum":" 1454","line":""},
{"lineNum":" 1455","line":"template<class _Tp>"},
{"lineNum":" 1456","line":"struct _LIBCPP_TEMPLATE_VIS is_signed : _BoolConstant<__is_signed(_Tp)> { };"},
{"lineNum":" 1457","line":""},
{"lineNum":" 1458","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1459","line":"template <class _Tp>"},
{"lineNum":" 1460","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_signed_v = __is_signed(_Tp);"},
{"lineNum":" 1461","line":"#endif"},
{"lineNum":" 1462","line":""},
{"lineNum":" 1463","line":"#else // __has_keyword(__is_signed)"},
{"lineNum":" 1464","line":""},
{"lineNum":" 1465","line":"template <class _Tp, bool = is_integral<_Tp>::value>"},
{"lineNum":" 1466","line":"struct __libcpp_is_signed_impl : public _LIBCPP_BOOL_CONSTANT(_Tp(-1) < _Tp(0)) {};"},
{"lineNum":" 1467","line":""},
{"lineNum":" 1468","line":"template <class _Tp>"},
{"lineNum":" 1469","line":"struct __libcpp_is_signed_impl<_Tp, false> : public true_type {};  // floating point"},
{"lineNum":" 1470","line":""},
{"lineNum":" 1471","line":"template <class _Tp, bool = is_arithmetic<_Tp>::value>"},
{"lineNum":" 1472","line":"struct __libcpp_is_signed : public __libcpp_is_signed_impl<_Tp> {};"},
{"lineNum":" 1473","line":""},
{"lineNum":" 1474","line":"template <class _Tp> struct __libcpp_is_signed<_Tp, false> : public false_type {};"},
{"lineNum":" 1475","line":""},
{"lineNum":" 1476","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_signed : public __libcpp_is_signed<_Tp> {};"},
{"lineNum":" 1477","line":""},
{"lineNum":" 1478","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1479","line":"template <class _Tp>"},
{"lineNum":" 1480","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_signed_v"},
{"lineNum":" 1481","line":"    = is_signed<_Tp>::value;"},
{"lineNum":" 1482","line":"#endif"},
{"lineNum":" 1483","line":""},
{"lineNum":" 1484","line":"#endif // __has_keyword(__is_signed)"},
{"lineNum":" 1485","line":""},
{"lineNum":" 1486","line":"// is_unsigned"},
{"lineNum":" 1487","line":""},
{"lineNum":" 1488","line":"// Before Clang 13, __is_unsigned returned true for enums with signed underlying type."},
{"lineNum":" 1489","line":"// No currently-released version of AppleClang contains the fixed intrinsic."},
{"lineNum":" 1490","line":"#if __has_keyword(__is_unsigned) &&                                            \\"},
{"lineNum":" 1491","line":"    !(defined(_LIBCPP_CLANG_VER) && _LIBCPP_CLANG_VER < 1300) &&               \\"},
{"lineNum":" 1492","line":"    !defined(_LIBCPP_APPLE_CLANG_VER)"},
{"lineNum":" 1493","line":""},
{"lineNum":" 1494","line":"template<class _Tp>"},
{"lineNum":" 1495","line":"struct _LIBCPP_TEMPLATE_VIS is_unsigned : _BoolConstant<__is_unsigned(_Tp)> { };"},
{"lineNum":" 1496","line":""},
{"lineNum":" 1497","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1498","line":"template <class _Tp>"},
{"lineNum":" 1499","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_unsigned_v = __is_unsigned(_Tp);"},
{"lineNum":" 1500","line":"#endif"},
{"lineNum":" 1501","line":""},
{"lineNum":" 1502","line":"#else // __has_keyword(__is_unsigned)"},
{"lineNum":" 1503","line":""},
{"lineNum":" 1504","line":"template <class _Tp, bool = is_integral<_Tp>::value>"},
{"lineNum":" 1505","line":"struct __libcpp_is_unsigned_impl : public _LIBCPP_BOOL_CONSTANT(_Tp(0) < _Tp(-1)) {};"},
{"lineNum":" 1506","line":""},
{"lineNum":" 1507","line":"template <class _Tp>"},
{"lineNum":" 1508","line":"struct __libcpp_is_unsigned_impl<_Tp, false> : public false_type {};  // floating point"},
{"lineNum":" 1509","line":""},
{"lineNum":" 1510","line":"template <class _Tp, bool = is_arithmetic<_Tp>::value>"},
{"lineNum":" 1511","line":"struct __libcpp_is_unsigned : public __libcpp_is_unsigned_impl<_Tp> {};"},
{"lineNum":" 1512","line":""},
{"lineNum":" 1513","line":"template <class _Tp> struct __libcpp_is_unsigned<_Tp, false> : public false_type {};"},
{"lineNum":" 1514","line":""},
{"lineNum":" 1515","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_unsigned : public __libcpp_is_unsigned<_Tp> {};"},
{"lineNum":" 1516","line":""},
{"lineNum":" 1517","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1518","line":"template <class _Tp>"},
{"lineNum":" 1519","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_unsigned_v"},
{"lineNum":" 1520","line":"    = is_unsigned<_Tp>::value;"},
{"lineNum":" 1521","line":"#endif"},
{"lineNum":" 1522","line":""},
{"lineNum":" 1523","line":"#endif // __has_keyword(__is_unsigned)"},
{"lineNum":" 1524","line":""},
{"lineNum":" 1525","line":"// rank"},
{"lineNum":" 1526","line":""},
{"lineNum":" 1527","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS rank"},
{"lineNum":" 1528","line":"    : public integral_constant<size_t, 0> {};"},
{"lineNum":" 1529","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS rank<_Tp[]>"},
{"lineNum":" 1530","line":"    : public integral_constant<size_t, rank<_Tp>::value + 1> {};"},
{"lineNum":" 1531","line":"template <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS rank<_Tp[_Np]>"},
{"lineNum":" 1532","line":"    : public integral_constant<size_t, rank<_Tp>::value + 1> {};"},
{"lineNum":" 1533","line":""},
{"lineNum":" 1534","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1535","line":"template <class _Tp>"},
{"lineNum":" 1536","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR size_t rank_v"},
{"lineNum":" 1537","line":"    = rank<_Tp>::value;"},
{"lineNum":" 1538","line":"#endif"},
{"lineNum":" 1539","line":""},
{"lineNum":" 1540","line":"// extent"},
{"lineNum":" 1541","line":""},
{"lineNum":" 1542","line":"#if __has_keyword(__array_extent)"},
{"lineNum":" 1543","line":""},
{"lineNum":" 1544","line":"template<class _Tp, size_t _Dim = 0>"},
{"lineNum":" 1545","line":"struct _LIBCPP_TEMPLATE_VIS extent"},
{"lineNum":" 1546","line":"    : integral_constant<size_t, __array_extent(_Tp, _Dim)> { };"},
{"lineNum":" 1547","line":""},
{"lineNum":" 1548","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1549","line":"template <class _Tp, unsigned _Ip = 0>"},
{"lineNum":" 1550","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR size_t extent_v = __array_extent(_Tp, _Ip);"},
{"lineNum":" 1551","line":"#endif"},
{"lineNum":" 1552","line":""},
{"lineNum":" 1553","line":"#else // __has_keyword(__array_extent)"},
{"lineNum":" 1554","line":""},
{"lineNum":" 1555","line":"template <class _Tp, unsigned _Ip = 0> struct _LIBCPP_TEMPLATE_VIS extent"},
{"lineNum":" 1556","line":"    : public integral_constant<size_t, 0> {};"},
{"lineNum":" 1557","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS extent<_Tp[], 0>"},
{"lineNum":" 1558","line":"    : public integral_constant<size_t, 0> {};"},
{"lineNum":" 1559","line":"template <class _Tp, unsigned _Ip> struct _LIBCPP_TEMPLATE_VIS extent<_Tp[], _Ip>"},
{"lineNum":" 1560","line":"    : public integral_constant<size_t, extent<_Tp, _Ip-1>::value> {};"},
{"lineNum":" 1561","line":"template <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS extent<_Tp[_Np], 0>"},
{"lineNum":" 1562","line":"    : public integral_constant<size_t, _Np> {};"},
{"lineNum":" 1563","line":"template <class _Tp, size_t _Np, unsigned _Ip> struct _LIBCPP_TEMPLATE_VIS extent<_Tp[_Np], _Ip>"},
{"lineNum":" 1564","line":"    : public integral_constant<size_t, extent<_Tp, _Ip-1>::value> {};"},
{"lineNum":" 1565","line":""},
{"lineNum":" 1566","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1567","line":"template <class _Tp, unsigned _Ip = 0>"},
{"lineNum":" 1568","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR size_t extent_v"},
{"lineNum":" 1569","line":"    = extent<_Tp, _Ip>::value;"},
{"lineNum":" 1570","line":"#endif"},
{"lineNum":" 1571","line":""},
{"lineNum":" 1572","line":"#endif // __has_keyword(__array_extent)"},
{"lineNum":" 1573","line":""},
{"lineNum":" 1574","line":"// remove_extent"},
{"lineNum":" 1575","line":""},
{"lineNum":" 1576","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_extent"},
{"lineNum":" 1577","line":"    {typedef _Tp type;};"},
{"lineNum":" 1578","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_extent<_Tp[]>"},
{"lineNum":" 1579","line":"    {typedef _Tp type;};"},
{"lineNum":" 1580","line":"template <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS remove_extent<_Tp[_Np]>"},
{"lineNum":" 1581","line":"    {typedef _Tp type;};"},
{"lineNum":" 1582","line":""},
{"lineNum":" 1583","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1584","line":"template <class _Tp> using remove_extent_t = typename remove_extent<_Tp>::type;"},
{"lineNum":" 1585","line":"#endif"},
{"lineNum":" 1586","line":""},
{"lineNum":" 1587","line":"// remove_all_extents"},
{"lineNum":" 1588","line":""},
{"lineNum":" 1589","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_all_extents"},
{"lineNum":" 1590","line":"    {typedef _Tp type;};"},
{"lineNum":" 1591","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_all_extents<_Tp[]>"},
{"lineNum":" 1592","line":"    {typedef typename remove_all_extents<_Tp>::type type;};"},
{"lineNum":" 1593","line":"template <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS remove_all_extents<_Tp[_Np]>"},
{"lineNum":" 1594","line":"    {typedef typename remove_all_extents<_Tp>::type type;};"},
{"lineNum":" 1595","line":""},
{"lineNum":" 1596","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1597","line":"template <class _Tp> using remove_all_extents_t = typename remove_all_extents<_Tp>::type;"},
{"lineNum":" 1598","line":"#endif"},
{"lineNum":" 1599","line":""},
{"lineNum":" 1600","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1601","line":"// is_bounded_array"},
{"lineNum":" 1602","line":""},
{"lineNum":" 1603","line":"template <class>                 struct _LIBCPP_TEMPLATE_VIS is_bounded_array           : false_type {};"},
{"lineNum":" 1604","line":"template <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS is_bounded_array<_Tp[_Np]> : true_type {};"},
{"lineNum":" 1605","line":""},
{"lineNum":" 1606","line":"template <class _Tp>"},
{"lineNum":" 1607","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR"},
{"lineNum":" 1608","line":"bool is_bounded_array_v  = is_bounded_array<_Tp>::value;"},
{"lineNum":" 1609","line":""},
{"lineNum":" 1610","line":"// is_unbounded_array"},
{"lineNum":" 1611","line":""},
{"lineNum":" 1612","line":"template <class>     struct _LIBCPP_TEMPLATE_VIS is_unbounded_array        : false_type {};"},
{"lineNum":" 1613","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_unbounded_array<_Tp[]> : true_type {};"},
{"lineNum":" 1614","line":""},
{"lineNum":" 1615","line":"template <class _Tp>"},
{"lineNum":" 1616","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR"},
{"lineNum":" 1617","line":"bool is_unbounded_array_v  = is_unbounded_array<_Tp>::value;"},
{"lineNum":" 1618","line":"#endif"},
{"lineNum":" 1619","line":""},
{"lineNum":" 1620","line":"// decay"},
{"lineNum":" 1621","line":""},
{"lineNum":" 1622","line":"template <class _Up, bool>"},
{"lineNum":" 1623","line":"struct __decay {"},
{"lineNum":" 1624","line":"    typedef _LIBCPP_NODEBUG_TYPE typename remove_cv<_Up>::type type;"},
{"lineNum":" 1625","line":"};"},
{"lineNum":" 1626","line":""},
{"lineNum":" 1627","line":"template <class _Up>"},
{"lineNum":" 1628","line":"struct __decay<_Up, true> {"},
{"lineNum":" 1629","line":"public:"},
{"lineNum":" 1630","line":"    typedef _LIBCPP_NODEBUG_TYPE typename conditional"},
{"lineNum":" 1631","line":"                     <"},
{"lineNum":" 1632","line":"                         is_array<_Up>::value,"},
{"lineNum":" 1633","line":"                         typename remove_extent<_Up>::type*,"},
{"lineNum":" 1634","line":"                         typename conditional"},
{"lineNum":" 1635","line":"                         <"},
{"lineNum":" 1636","line":"                              is_function<_Up>::value,"},
{"lineNum":" 1637","line":"                              typename add_pointer<_Up>::type,"},
{"lineNum":" 1638","line":"                              typename remove_cv<_Up>::type"},
{"lineNum":" 1639","line":"                         >::type"},
{"lineNum":" 1640","line":"                     >::type type;"},
{"lineNum":" 1641","line":"};"},
{"lineNum":" 1642","line":""},
{"lineNum":" 1643","line":"template <class _Tp>"},
{"lineNum":" 1644","line":"struct _LIBCPP_TEMPLATE_VIS decay"},
{"lineNum":" 1645","line":"{"},
{"lineNum":" 1646","line":"private:"},
{"lineNum":" 1647","line":"    typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up;"},
{"lineNum":" 1648","line":"public:"},
{"lineNum":" 1649","line":"    typedef _LIBCPP_NODEBUG_TYPE typename __decay<_Up, __is_referenceable<_Up>::value>::type type;"},
{"lineNum":" 1650","line":"};"},
{"lineNum":" 1651","line":""},
{"lineNum":" 1652","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1653","line":"template <class _Tp> using decay_t = typename decay<_Tp>::type;"},
{"lineNum":" 1654","line":"#endif"},
{"lineNum":" 1655","line":""},
{"lineNum":" 1656","line":"// is_abstract"},
{"lineNum":" 1657","line":""},
{"lineNum":" 1658","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_abstract"},
{"lineNum":" 1659","line":"    : public integral_constant<bool, __is_abstract(_Tp)> {};"},
{"lineNum":" 1660","line":""},
{"lineNum":" 1661","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1662","line":"template <class _Tp>"},
{"lineNum":" 1663","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_abstract_v"},
{"lineNum":" 1664","line":"    = is_abstract<_Tp>::value;"},
{"lineNum":" 1665","line":"#endif"},
{"lineNum":" 1666","line":""},
{"lineNum":" 1667","line":"// is_final"},
{"lineNum":" 1668","line":""},
{"lineNum":" 1669","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS"},
{"lineNum":" 1670","line":"__libcpp_is_final : public integral_constant<bool, __is_final(_Tp)> {};"},
{"lineNum":" 1671","line":""},
{"lineNum":" 1672","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 1673","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS"},
{"lineNum":" 1674","line":"is_final : public integral_constant<bool, __is_final(_Tp)> {};"},
{"lineNum":" 1675","line":"#endif"},
{"lineNum":" 1676","line":""},
{"lineNum":" 1677","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1678","line":"template <class _Tp>"},
{"lineNum":" 1679","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_final_v"},
{"lineNum":" 1680","line":"    = is_final<_Tp>::value;"},
{"lineNum":" 1681","line":"#endif"},
{"lineNum":" 1682","line":""},
{"lineNum":" 1683","line":"// is_aggregate"},
{"lineNum":" 1684","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_IS_AGGREGATE)"},
{"lineNum":" 1685","line":""},
{"lineNum":" 1686","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS"},
{"lineNum":" 1687","line":"is_aggregate : public integral_constant<bool, __is_aggregate(_Tp)> {};"},
{"lineNum":" 1688","line":""},
{"lineNum":" 1689","line":"#if !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1690","line":"template <class _Tp>"},
{"lineNum":" 1691","line":"_LIBCPP_INLINE_VAR constexpr bool is_aggregate_v"},
{"lineNum":" 1692","line":"    = is_aggregate<_Tp>::value;"},
{"lineNum":" 1693","line":"#endif"},
{"lineNum":" 1694","line":""},
{"lineNum":" 1695","line":"#endif // _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_IS_AGGREGATE)"},
{"lineNum":" 1696","line":""},
{"lineNum":" 1697","line":"// is_base_of"},
{"lineNum":" 1698","line":""},
{"lineNum":" 1699","line":"template <class _Bp, class _Dp>"},
{"lineNum":" 1700","line":"struct _LIBCPP_TEMPLATE_VIS is_base_of"},
{"lineNum":" 1701","line":"    : public integral_constant<bool, __is_base_of(_Bp, _Dp)> {};"},
{"lineNum":" 1702","line":""},
{"lineNum":" 1703","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1704","line":"template <class _Bp, class _Dp>"},
{"lineNum":" 1705","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_base_of_v"},
{"lineNum":" 1706","line":"    = is_base_of<_Bp, _Dp>::value;"},
{"lineNum":" 1707","line":"#endif"},
{"lineNum":" 1708","line":""},
{"lineNum":" 1709","line":"// __is_core_convertible"},
{"lineNum":" 1710","line":""},
{"lineNum":" 1711","line":"// [conv.general]/3 says \"E is convertible to T\" whenever \"T t=E;\" is well-formed."},
{"lineNum":" 1712","line":"// We can\'t test for that, but we can test implicit convertibility by passing it"},
{"lineNum":" 1713","line":"// to a function. Notice that __is_core_convertible<void,void> is false,"},
{"lineNum":" 1714","line":"// and __is_core_convertible<immovable-type,immovable-type> is true in C++17 and later."},
{"lineNum":" 1715","line":""},
{"lineNum":" 1716","line":"template <class _Tp, class _Up, class = void>"},
{"lineNum":" 1717","line":"struct __is_core_convertible : public false_type {};"},
{"lineNum":" 1718","line":""},
{"lineNum":" 1719","line":"template <class _Tp, class _Up>"},
{"lineNum":" 1720","line":"struct __is_core_convertible<_Tp, _Up, decltype("},
{"lineNum":" 1721","line":"    static_cast<void(*)(_Up)>(0) ( static_cast<_Tp(*)()>(0)() )"},
{"lineNum":" 1722","line":")> : public true_type {};"},
{"lineNum":" 1723","line":""},
{"lineNum":" 1724","line":"// is_convertible"},
{"lineNum":" 1725","line":""},
{"lineNum":" 1726","line":"#if __has_feature(is_convertible_to) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK)"},
{"lineNum":" 1727","line":""},
{"lineNum":" 1728","line":"template <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS is_convertible"},
{"lineNum":" 1729","line":"    : public integral_constant<bool, __is_convertible_to(_T1, _T2)> {};"},
{"lineNum":" 1730","line":""},
{"lineNum":" 1731","line":"#else  // __has_feature(is_convertible_to)"},
{"lineNum":" 1732","line":""},
{"lineNum":" 1733","line":"namespace __is_convertible_imp"},
{"lineNum":" 1734","line":"{"},
{"lineNum":" 1735","line":"template <class _Tp> void  __test_convert(_Tp);"},
{"lineNum":" 1736","line":""},
{"lineNum":" 1737","line":"template <class _From, class _To, class = void>"},
{"lineNum":" 1738","line":"struct __is_convertible_test : public false_type {};"},
{"lineNum":" 1739","line":""},
{"lineNum":" 1740","line":"template <class _From, class _To>"},
{"lineNum":" 1741","line":"struct __is_convertible_test<_From, _To,"},
{"lineNum":" 1742","line":"    decltype(__is_convertible_imp::__test_convert<_To>(declval<_From>()))> : public true_type"},
{"lineNum":" 1743","line":"{};"},
{"lineNum":" 1744","line":""},
{"lineNum":" 1745","line":"template <class _Tp, bool _IsArray =    is_array<_Tp>::value,"},
{"lineNum":" 1746","line":"                     bool _IsFunction = is_function<_Tp>::value,"},
{"lineNum":" 1747","line":"                     bool _IsVoid =     is_void<_Tp>::value>"},
{"lineNum":" 1748","line":"                     struct __is_array_function_or_void                          {enum {value = 0};};"},
{"lineNum":" 1749","line":"template <class _Tp> struct __is_array_function_or_void<_Tp, true, false, false> {enum {value = 1};};"},
{"lineNum":" 1750","line":"template <class _Tp> struct __is_array_function_or_void<_Tp, false, true, false> {enum {value = 2};};"},
{"lineNum":" 1751","line":"template <class _Tp> struct __is_array_function_or_void<_Tp, false, false, true> {enum {value = 3};};"},
{"lineNum":" 1752","line":"}"},
{"lineNum":" 1753","line":""},
{"lineNum":" 1754","line":"template <class _Tp,"},
{"lineNum":" 1755","line":"    unsigned = __is_convertible_imp::__is_array_function_or_void<typename remove_reference<_Tp>::type>::value>"},
{"lineNum":" 1756","line":"struct __is_convertible_check"},
{"lineNum":" 1757","line":"{"},
{"lineNum":" 1758","line":"    static const size_t __v = 0;"},
{"lineNum":" 1759","line":"};"},
{"lineNum":" 1760","line":""},
{"lineNum":" 1761","line":"template <class _Tp>"},
{"lineNum":" 1762","line":"struct __is_convertible_check<_Tp, 0>"},
{"lineNum":" 1763","line":"{"},
{"lineNum":" 1764","line":"    static const size_t __v = sizeof(_Tp);"},
{"lineNum":" 1765","line":"};"},
{"lineNum":" 1766","line":""},
{"lineNum":" 1767","line":"template <class _T1, class _T2,"},
{"lineNum":" 1768","line":"    unsigned _T1_is_array_function_or_void = __is_convertible_imp::__is_array_function_or_void<_T1>::value,"},
{"lineNum":" 1769","line":"    unsigned _T2_is_array_function_or_void = __is_convertible_imp::__is_array_function_or_void<_T2>::value>"},
{"lineNum":" 1770","line":"struct __is_convertible"},
{"lineNum":" 1771","line":"    : public integral_constant<bool,"},
{"lineNum":" 1772","line":"        __is_convertible_imp::__is_convertible_test<_T1, _T2>::value"},
{"lineNum":" 1773","line":"    >"},
{"lineNum":" 1774","line":"{};"},
{"lineNum":" 1775","line":""},
{"lineNum":" 1776","line":"template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 0, 1> : public false_type {};"},
{"lineNum":" 1777","line":"template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 1, 1> : public false_type {};"},
{"lineNum":" 1778","line":"template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 2, 1> : public false_type {};"},
{"lineNum":" 1779","line":"template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 3, 1> : public false_type {};"},
{"lineNum":" 1780","line":""},
{"lineNum":" 1781","line":"template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 0, 2> : public false_type {};"},
{"lineNum":" 1782","line":"template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 1, 2> : public false_type {};"},
{"lineNum":" 1783","line":"template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 2, 2> : public false_type {};"},
{"lineNum":" 1784","line":"template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 3, 2> : public false_type {};"},
{"lineNum":" 1785","line":""},
{"lineNum":" 1786","line":"template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 0, 3> : public false_type {};"},
{"lineNum":" 1787","line":"template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 1, 3> : public false_type {};"},
{"lineNum":" 1788","line":"template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 2, 3> : public false_type {};"},
{"lineNum":" 1789","line":"template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 3, 3> : public true_type {};"},
{"lineNum":" 1790","line":""},
{"lineNum":" 1791","line":"template <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS is_convertible"},
{"lineNum":" 1792","line":"    : public __is_convertible<_T1, _T2>"},
{"lineNum":" 1793","line":"{"},
{"lineNum":" 1794","line":"    static const size_t __complete_check1 = __is_convertible_check<_T1>::__v;"},
{"lineNum":" 1795","line":"    static const size_t __complete_check2 = __is_convertible_check<_T2>::__v;"},
{"lineNum":" 1796","line":"};"},
{"lineNum":" 1797","line":""},
{"lineNum":" 1798","line":"#endif // __has_feature(is_convertible_to)"},
{"lineNum":" 1799","line":""},
{"lineNum":" 1800","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1801","line":"template <class _From, class _To>"},
{"lineNum":" 1802","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_convertible_v"},
{"lineNum":" 1803","line":"    = is_convertible<_From, _To>::value;"},
{"lineNum":" 1804","line":"#endif"},
{"lineNum":" 1805","line":""},
{"lineNum":" 1806","line":"// is_nothrow_convertible"},
{"lineNum":" 1807","line":""},
{"lineNum":" 1808","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 1809","line":""},
{"lineNum":" 1810","line":"template <typename _Tp>"},
{"lineNum":" 1811","line":"static void __test_noexcept(_Tp) noexcept;"},
{"lineNum":" 1812","line":""},
{"lineNum":" 1813","line":"template<typename _Fm, typename _To>"},
{"lineNum":" 1814","line":"static bool_constant<noexcept(_VSTD::__test_noexcept<_To>(declval<_Fm>()))>"},
{"lineNum":" 1815","line":"__is_nothrow_convertible_test();"},
{"lineNum":" 1816","line":""},
{"lineNum":" 1817","line":"template <typename _Fm, typename _To>"},
{"lineNum":" 1818","line":"struct __is_nothrow_convertible_helper: decltype(__is_nothrow_convertible_test<_Fm, _To>())"},
{"lineNum":" 1819","line":"{ };"},
{"lineNum":" 1820","line":""},
{"lineNum":" 1821","line":"template <typename _Fm, typename _To>"},
{"lineNum":" 1822","line":"struct is_nothrow_convertible : _Or<"},
{"lineNum":" 1823","line":"    _And<is_void<_To>, is_void<_Fm>>,"},
{"lineNum":" 1824","line":"    _Lazy<_And, is_convertible<_Fm, _To>, __is_nothrow_convertible_helper<_Fm, _To>>"},
{"lineNum":" 1825","line":">::type { };"},
{"lineNum":" 1826","line":""},
{"lineNum":" 1827","line":"template <typename _Fm, typename _To>"},
{"lineNum":" 1828","line":"inline constexpr bool is_nothrow_convertible_v = is_nothrow_convertible<_Fm, _To>::value;"},
{"lineNum":" 1829","line":""},
{"lineNum":" 1830","line":"#endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 1831","line":""},
{"lineNum":" 1832","line":"// is_empty"},
{"lineNum":" 1833","line":""},
{"lineNum":" 1834","line":"#if __has_feature(is_empty) || defined(_LIBCPP_COMPILER_GCC)"},
{"lineNum":" 1835","line":""},
{"lineNum":" 1836","line":"template <class _Tp>"},
{"lineNum":" 1837","line":"struct _LIBCPP_TEMPLATE_VIS is_empty"},
{"lineNum":" 1838","line":"    : public integral_constant<bool, __is_empty(_Tp)> {};"},
{"lineNum":" 1839","line":""},
{"lineNum":" 1840","line":"#else  // __has_feature(is_empty)"},
{"lineNum":" 1841","line":""},
{"lineNum":" 1842","line":"template <class _Tp>"},
{"lineNum":" 1843","line":"struct __is_empty1"},
{"lineNum":" 1844","line":"    : public _Tp"},
{"lineNum":" 1845","line":"{"},
{"lineNum":" 1846","line":"    double __lx;"},
{"lineNum":" 1847","line":"};"},
{"lineNum":" 1848","line":""},
{"lineNum":" 1849","line":"struct __is_empty2"},
{"lineNum":" 1850","line":"{"},
{"lineNum":" 1851","line":"    double __lx;"},
{"lineNum":" 1852","line":"};"},
{"lineNum":" 1853","line":""},
{"lineNum":" 1854","line":"template <class _Tp, bool = is_class<_Tp>::value>"},
{"lineNum":" 1855","line":"struct __libcpp_empty : public integral_constant<bool, sizeof(__is_empty1<_Tp>) == sizeof(__is_empty2)> {};"},
{"lineNum":" 1856","line":""},
{"lineNum":" 1857","line":"template <class _Tp> struct __libcpp_empty<_Tp, false> : public false_type {};"},
{"lineNum":" 1858","line":""},
{"lineNum":" 1859","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_empty : public __libcpp_empty<_Tp> {};"},
{"lineNum":" 1860","line":""},
{"lineNum":" 1861","line":"#endif // __has_feature(is_empty)"},
{"lineNum":" 1862","line":""},
{"lineNum":" 1863","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1864","line":"template <class _Tp>"},
{"lineNum":" 1865","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_empty_v"},
{"lineNum":" 1866","line":"    = is_empty<_Tp>::value;"},
{"lineNum":" 1867","line":"#endif"},
{"lineNum":" 1868","line":""},
{"lineNum":" 1869","line":"// is_polymorphic"},
{"lineNum":" 1870","line":""},
{"lineNum":" 1871","line":"#if __has_feature(is_polymorphic) || defined(_LIBCPP_COMPILER_MSVC)"},
{"lineNum":" 1872","line":""},
{"lineNum":" 1873","line":"template <class _Tp>"},
{"lineNum":" 1874","line":"struct _LIBCPP_TEMPLATE_VIS is_polymorphic"},
{"lineNum":" 1875","line":"    : public integral_constant<bool, __is_polymorphic(_Tp)> {};"},
{"lineNum":" 1876","line":""},
{"lineNum":" 1877","line":"#else"},
{"lineNum":" 1878","line":""},
{"lineNum":" 1879","line":"template<typename _Tp> char &__is_polymorphic_impl("},
{"lineNum":" 1880","line":"    typename enable_if<sizeof((_Tp*)dynamic_cast<const volatile void*>(declval<_Tp*>())) != 0,"},
{"lineNum":" 1881","line":"                       int>::type);"},
{"lineNum":" 1882","line":"template<typename _Tp> __two &__is_polymorphic_impl(...);"},
{"lineNum":" 1883","line":""},
{"lineNum":" 1884","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_polymorphic"},
{"lineNum":" 1885","line":"    : public integral_constant<bool, sizeof(__is_polymorphic_impl<_Tp>(0)) == 1> {};"},
{"lineNum":" 1886","line":""},
{"lineNum":" 1887","line":"#endif // __has_feature(is_polymorphic)"},
{"lineNum":" 1888","line":""},
{"lineNum":" 1889","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1890","line":"template <class _Tp>"},
{"lineNum":" 1891","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_polymorphic_v"},
{"lineNum":" 1892","line":"    = is_polymorphic<_Tp>::value;"},
{"lineNum":" 1893","line":"#endif"},
{"lineNum":" 1894","line":""},
{"lineNum":" 1895","line":"// has_virtual_destructor"},
{"lineNum":" 1896","line":""},
{"lineNum":" 1897","line":"#if __has_feature(has_virtual_destructor) || defined(_LIBCPP_COMPILER_GCC)"},
{"lineNum":" 1898","line":""},
{"lineNum":" 1899","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS has_virtual_destructor"},
{"lineNum":" 1900","line":"    : public integral_constant<bool, __has_virtual_destructor(_Tp)> {};"},
{"lineNum":" 1901","line":""},
{"lineNum":" 1902","line":"#else"},
{"lineNum":" 1903","line":""},
{"lineNum":" 1904","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS has_virtual_destructor"},
{"lineNum":" 1905","line":"    : public false_type {};"},
{"lineNum":" 1906","line":""},
{"lineNum":" 1907","line":"#endif"},
{"lineNum":" 1908","line":""},
{"lineNum":" 1909","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1910","line":"template <class _Tp>"},
{"lineNum":" 1911","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool has_virtual_destructor_v"},
{"lineNum":" 1912","line":"    = has_virtual_destructor<_Tp>::value;"},
{"lineNum":" 1913","line":"#endif"},
{"lineNum":" 1914","line":""},
{"lineNum":" 1915","line":"// has_unique_object_representations"},
{"lineNum":" 1916","line":""},
{"lineNum":" 1917","line":"#if _LIBCPP_STD_VER > 14 && defined(_LIBCPP_HAS_UNIQUE_OBJECT_REPRESENTATIONS)"},
{"lineNum":" 1918","line":""},
{"lineNum":" 1919","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS has_unique_object_representations"},
{"lineNum":" 1920","line":"    : public integral_constant<bool,"},
{"lineNum":" 1921","line":"       __has_unique_object_representations(remove_cv_t<remove_all_extents_t<_Tp>>)> {};"},
{"lineNum":" 1922","line":""},
{"lineNum":" 1923","line":"#if !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1924","line":"template <class _Tp>"},
{"lineNum":" 1925","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool has_unique_object_representations_v"},
{"lineNum":" 1926","line":"    = has_unique_object_representations<_Tp>::value;"},
{"lineNum":" 1927","line":"#endif"},
{"lineNum":" 1928","line":""},
{"lineNum":" 1929","line":"#endif"},
{"lineNum":" 1930","line":""},
{"lineNum":" 1931","line":"// alignment_of"},
{"lineNum":" 1932","line":""},
{"lineNum":" 1933","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS alignment_of"},
{"lineNum":" 1934","line":"    : public integral_constant<size_t, _LIBCPP_ALIGNOF(_Tp)> {};"},
{"lineNum":" 1935","line":""},
{"lineNum":" 1936","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 1937","line":"template <class _Tp>"},
{"lineNum":" 1938","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR size_t alignment_of_v"},
{"lineNum":" 1939","line":"    = alignment_of<_Tp>::value;"},
{"lineNum":" 1940","line":"#endif"},
{"lineNum":" 1941","line":""},
{"lineNum":" 1942","line":"// aligned_storage"},
{"lineNum":" 1943","line":""},
{"lineNum":" 1944","line":"template <class _Hp, class _Tp>"},
{"lineNum":" 1945","line":"struct __type_list"},
{"lineNum":" 1946","line":"{"},
{"lineNum":" 1947","line":"    typedef _Hp _Head;"},
{"lineNum":" 1948","line":"    typedef _Tp _Tail;"},
{"lineNum":" 1949","line":"};"},
{"lineNum":" 1950","line":""},
{"lineNum":" 1951","line":"struct __nat"},
{"lineNum":" 1952","line":"{"},
{"lineNum":" 1953","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 1954","line":"    __nat() = delete;"},
{"lineNum":" 1955","line":"    __nat(const __nat&) = delete;"},
{"lineNum":" 1956","line":"    __nat& operator=(const __nat&) = delete;"},
{"lineNum":" 1957","line":"    ~__nat() = delete;"},
{"lineNum":" 1958","line":"#endif"},
{"lineNum":" 1959","line":"};"},
{"lineNum":" 1960","line":""},
{"lineNum":" 1961","line":"template <class _Tp>"},
{"lineNum":" 1962","line":"struct __align_type"},
{"lineNum":" 1963","line":"{"},
{"lineNum":" 1964","line":"    static const size_t value = _LIBCPP_PREFERRED_ALIGNOF(_Tp);"},
{"lineNum":" 1965","line":"    typedef _Tp type;"},
{"lineNum":" 1966","line":"};"},
{"lineNum":" 1967","line":""},
{"lineNum":" 1968","line":"struct __struct_double {long double __lx;};"},
{"lineNum":" 1969","line":"struct __struct_double4 {double __lx[4];};"},
{"lineNum":" 1970","line":""},
{"lineNum":" 1971","line":"typedef"},
{"lineNum":" 1972","line":"    __type_list<__align_type<unsigned char>,"},
{"lineNum":" 1973","line":"    __type_list<__align_type<unsigned short>,"},
{"lineNum":" 1974","line":"    __type_list<__align_type<unsigned int>,"},
{"lineNum":" 1975","line":"    __type_list<__align_type<unsigned long>,"},
{"lineNum":" 1976","line":"    __type_list<__align_type<unsigned long long>,"},
{"lineNum":" 1977","line":"    __type_list<__align_type<double>,"},
{"lineNum":" 1978","line":"    __type_list<__align_type<long double>,"},
{"lineNum":" 1979","line":"    __type_list<__align_type<__struct_double>,"},
{"lineNum":" 1980","line":"    __type_list<__align_type<__struct_double4>,"},
{"lineNum":" 1981","line":"    __type_list<__align_type<int*>,"},
{"lineNum":" 1982","line":"    __nat"},
{"lineNum":" 1983","line":"    > > > > > > > > > > __all_types;"},
{"lineNum":" 1984","line":""},
{"lineNum":" 1985","line":"template <size_t _Align>"},
{"lineNum":" 1986","line":"struct _ALIGNAS(_Align) __fallback_overaligned {};"},
{"lineNum":" 1987","line":""},
{"lineNum":" 1988","line":"template <class _TL, size_t _Align> struct __find_pod;"},
{"lineNum":" 1989","line":""},
{"lineNum":" 1990","line":"template <class _Hp, size_t _Align>"},
{"lineNum":" 1991","line":"struct __find_pod<__type_list<_Hp, __nat>, _Align>"},
{"lineNum":" 1992","line":"{"},
{"lineNum":" 1993","line":"    typedef typename conditional<"},
{"lineNum":" 1994","line":"                             _Align == _Hp::value,"},
{"lineNum":" 1995","line":"                             typename _Hp::type,"},
{"lineNum":" 1996","line":"                             __fallback_overaligned<_Align>"},
{"lineNum":" 1997","line":"                         >::type type;"},
{"lineNum":" 1998","line":"};"},
{"lineNum":" 1999","line":""},
{"lineNum":" 2000","line":"template <class _Hp, class _Tp, size_t _Align>"},
{"lineNum":" 2001","line":"struct __find_pod<__type_list<_Hp, _Tp>, _Align>"},
{"lineNum":" 2002","line":"{"},
{"lineNum":" 2003","line":"    typedef typename conditional<"},
{"lineNum":" 2004","line":"                             _Align == _Hp::value,"},
{"lineNum":" 2005","line":"                             typename _Hp::type,"},
{"lineNum":" 2006","line":"                             typename __find_pod<_Tp, _Align>::type"},
{"lineNum":" 2007","line":"                         >::type type;"},
{"lineNum":" 2008","line":"};"},
{"lineNum":" 2009","line":""},
{"lineNum":" 2010","line":"template <class _TL, size_t _Len> struct __find_max_align;"},
{"lineNum":" 2011","line":""},
{"lineNum":" 2012","line":"template <class _Hp, size_t _Len>"},
{"lineNum":" 2013","line":"struct __find_max_align<__type_list<_Hp, __nat>, _Len> : public integral_constant<size_t, _Hp::value> {};"},
{"lineNum":" 2014","line":""},
{"lineNum":" 2015","line":"template <size_t _Len, size_t _A1, size_t _A2>"},
{"lineNum":" 2016","line":"struct __select_align"},
{"lineNum":" 2017","line":"{"},
{"lineNum":" 2018","line":"private:"},
{"lineNum":" 2019","line":"    static const size_t __min = _A2 < _A1 ? _A2 : _A1;"},
{"lineNum":" 2020","line":"    static const size_t __max = _A1 < _A2 ? _A2 : _A1;"},
{"lineNum":" 2021","line":"public:"},
{"lineNum":" 2022","line":"    static const size_t value = _Len < __max ? __min : __max;"},
{"lineNum":" 2023","line":"};"},
{"lineNum":" 2024","line":""},
{"lineNum":" 2025","line":"template <class _Hp, class _Tp, size_t _Len>"},
{"lineNum":" 2026","line":"struct __find_max_align<__type_list<_Hp, _Tp>, _Len>"},
{"lineNum":" 2027","line":"    : public integral_constant<size_t, __select_align<_Len, _Hp::value, __find_max_align<_Tp, _Len>::value>::value> {};"},
{"lineNum":" 2028","line":""},
{"lineNum":" 2029","line":"template <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::value>"},
{"lineNum":" 2030","line":"struct _LIBCPP_TEMPLATE_VIS aligned_storage"},
{"lineNum":" 2031","line":"{"},
{"lineNum":" 2032","line":"    typedef typename __find_pod<__all_types, _Align>::type _Aligner;"},
{"lineNum":" 2033","line":"    union type"},
{"lineNum":" 2034","line":"    {"},
{"lineNum":" 2035","line":"        _Aligner __align;"},
{"lineNum":" 2036","line":"        unsigned char __data[(_Len + _Align - 1)/_Align * _Align];"},
{"lineNum":" 2037","line":"    };"},
{"lineNum":" 2038","line":"};"},
{"lineNum":" 2039","line":""},
{"lineNum":" 2040","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2041","line":"template <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::value>"},
{"lineNum":" 2042","line":"    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;"},
{"lineNum":" 2043","line":"#endif"},
{"lineNum":" 2044","line":""},
{"lineNum":" 2045","line":"#define _CREATE_ALIGNED_STORAGE_SPECIALIZATION(n) \\"},
{"lineNum":" 2046","line":"template <size_t _Len>\\"},
{"lineNum":" 2047","line":"struct _LIBCPP_TEMPLATE_VIS aligned_storage<_Len, n>\\"},
{"lineNum":" 2048","line":"{\\"},
{"lineNum":" 2049","line":"    struct _ALIGNAS(n) type\\"},
{"lineNum":" 2050","line":"    {\\"},
{"lineNum":" 2051","line":"        unsigned char __lx[(_Len + n - 1)/n * n];\\"},
{"lineNum":" 2052","line":"    };\\"},
{"lineNum":" 2053","line":"}"},
{"lineNum":" 2054","line":""},
{"lineNum":" 2055","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x1);"},
{"lineNum":" 2056","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x2);"},
{"lineNum":" 2057","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x4);"},
{"lineNum":" 2058","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x8);"},
{"lineNum":" 2059","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x10);"},
{"lineNum":" 2060","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x20);"},
{"lineNum":" 2061","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x40);"},
{"lineNum":" 2062","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x80);"},
{"lineNum":" 2063","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x100);"},
{"lineNum":" 2064","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x200);"},
{"lineNum":" 2065","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x400);"},
{"lineNum":" 2066","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x800);"},
{"lineNum":" 2067","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x1000);"},
{"lineNum":" 2068","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x2000);"},
{"lineNum":" 2069","line":"// PE/COFF does not support alignment beyond 8192 (=0x2000)"},
{"lineNum":" 2070","line":"#if !defined(_LIBCPP_OBJECT_FORMAT_COFF)"},
{"lineNum":" 2071","line":"_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x4000);"},
{"lineNum":" 2072","line":"#endif // !defined(_LIBCPP_OBJECT_FORMAT_COFF)"},
{"lineNum":" 2073","line":""},
{"lineNum":" 2074","line":"#undef _CREATE_ALIGNED_STORAGE_SPECIALIZATION"},
{"lineNum":" 2075","line":""},
{"lineNum":" 2076","line":""},
{"lineNum":" 2077","line":"// aligned_union"},
{"lineNum":" 2078","line":""},
{"lineNum":" 2079","line":"template <size_t _I0, size_t ..._In>"},
{"lineNum":" 2080","line":"struct __static_max;"},
{"lineNum":" 2081","line":""},
{"lineNum":" 2082","line":"template <size_t _I0>"},
{"lineNum":" 2083","line":"struct __static_max<_I0>"},
{"lineNum":" 2084","line":"{"},
{"lineNum":" 2085","line":"    static const size_t value = _I0;"},
{"lineNum":" 2086","line":"};"},
{"lineNum":" 2087","line":""},
{"lineNum":" 2088","line":"template <size_t _I0, size_t _I1, size_t ..._In>"},
{"lineNum":" 2089","line":"struct __static_max<_I0, _I1, _In...>"},
{"lineNum":" 2090","line":"{"},
{"lineNum":" 2091","line":"    static const size_t value = _I0 >= _I1 ? __static_max<_I0, _In...>::value :"},
{"lineNum":" 2092","line":"                                             __static_max<_I1, _In...>::value;"},
{"lineNum":" 2093","line":"};"},
{"lineNum":" 2094","line":""},
{"lineNum":" 2095","line":"template <size_t _Len, class _Type0, class ..._Types>"},
{"lineNum":" 2096","line":"struct aligned_union"},
{"lineNum":" 2097","line":"{"},
{"lineNum":" 2098","line":"    static const size_t alignment_value = __static_max<_LIBCPP_PREFERRED_ALIGNOF(_Type0),"},
{"lineNum":" 2099","line":"                                                       _LIBCPP_PREFERRED_ALIGNOF(_Types)...>::value;"},
{"lineNum":" 2100","line":"    static const size_t __len = __static_max<_Len, sizeof(_Type0),"},
{"lineNum":" 2101","line":"                                             sizeof(_Types)...>::value;"},
{"lineNum":" 2102","line":"    typedef typename aligned_storage<__len, alignment_value>::type type;"},
{"lineNum":" 2103","line":"};"},
{"lineNum":" 2104","line":""},
{"lineNum":" 2105","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2106","line":"template <size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union<_Len, _Types...>::type;"},
{"lineNum":" 2107","line":"#endif"},
{"lineNum":" 2108","line":""},
{"lineNum":" 2109","line":"template <class _Tp>"},
{"lineNum":" 2110","line":"struct __numeric_type"},
{"lineNum":" 2111","line":"{"},
{"lineNum":" 2112","line":"   static void __test(...);"},
{"lineNum":" 2113","line":"   static float __test(float);"},
{"lineNum":" 2114","line":"   static double __test(char);"},
{"lineNum":" 2115","line":"   static double __test(int);"},
{"lineNum":" 2116","line":"   static double __test(unsigned);"},
{"lineNum":" 2117","line":"   static double __test(long);"},
{"lineNum":" 2118","line":"   static double __test(unsigned long);"},
{"lineNum":" 2119","line":"   static double __test(long long);"},
{"lineNum":" 2120","line":"   static double __test(unsigned long long);"},
{"lineNum":" 2121","line":"   static double __test(double);"},
{"lineNum":" 2122","line":"   static long double __test(long double);"},
{"lineNum":" 2123","line":""},
{"lineNum":" 2124","line":"   typedef decltype(__test(declval<_Tp>())) type;"},
{"lineNum":" 2125","line":"   static const bool value = _IsNotSame<type, void>::value;"},
{"lineNum":" 2126","line":"};"},
{"lineNum":" 2127","line":""},
{"lineNum":" 2128","line":"template <>"},
{"lineNum":" 2129","line":"struct __numeric_type<void>"},
{"lineNum":" 2130","line":"{"},
{"lineNum":" 2131","line":"   static const bool value = true;"},
{"lineNum":" 2132","line":"};"},
{"lineNum":" 2133","line":""},
{"lineNum":" 2134","line":"// __promote"},
{"lineNum":" 2135","line":""},
{"lineNum":" 2136","line":"template <class _A1, class _A2 = void, class _A3 = void,"},
{"lineNum":" 2137","line":"          bool = __numeric_type<_A1>::value &&"},
{"lineNum":" 2138","line":"                 __numeric_type<_A2>::value &&"},
{"lineNum":" 2139","line":"                 __numeric_type<_A3>::value>"},
{"lineNum":" 2140","line":"class __promote_imp"},
{"lineNum":" 2141","line":"{"},
{"lineNum":" 2142","line":"public:"},
{"lineNum":" 2143","line":"    static const bool value = false;"},
{"lineNum":" 2144","line":"};"},
{"lineNum":" 2145","line":""},
{"lineNum":" 2146","line":"template <class _A1, class _A2, class _A3>"},
{"lineNum":" 2147","line":"class __promote_imp<_A1, _A2, _A3, true>"},
{"lineNum":" 2148","line":"{"},
{"lineNum":" 2149","line":"private:"},
{"lineNum":" 2150","line":"    typedef typename __promote_imp<_A1>::type __type1;"},
{"lineNum":" 2151","line":"    typedef typename __promote_imp<_A2>::type __type2;"},
{"lineNum":" 2152","line":"    typedef typename __promote_imp<_A3>::type __type3;"},
{"lineNum":" 2153","line":"public:"},
{"lineNum":" 2154","line":"    typedef decltype(__type1() + __type2() + __type3()) type;"},
{"lineNum":" 2155","line":"    static const bool value = true;"},
{"lineNum":" 2156","line":"};"},
{"lineNum":" 2157","line":""},
{"lineNum":" 2158","line":"template <class _A1, class _A2>"},
{"lineNum":" 2159","line":"class __promote_imp<_A1, _A2, void, true>"},
{"lineNum":" 2160","line":"{"},
{"lineNum":" 2161","line":"private:"},
{"lineNum":" 2162","line":"    typedef typename __promote_imp<_A1>::type __type1;"},
{"lineNum":" 2163","line":"    typedef typename __promote_imp<_A2>::type __type2;"},
{"lineNum":" 2164","line":"public:"},
{"lineNum":" 2165","line":"    typedef decltype(__type1() + __type2()) type;"},
{"lineNum":" 2166","line":"    static const bool value = true;"},
{"lineNum":" 2167","line":"};"},
{"lineNum":" 2168","line":""},
{"lineNum":" 2169","line":"template <class _A1>"},
{"lineNum":" 2170","line":"class __promote_imp<_A1, void, void, true>"},
{"lineNum":" 2171","line":"{"},
{"lineNum":" 2172","line":"public:"},
{"lineNum":" 2173","line":"    typedef typename __numeric_type<_A1>::type type;"},
{"lineNum":" 2174","line":"    static const bool value = true;"},
{"lineNum":" 2175","line":"};"},
{"lineNum":" 2176","line":""},
{"lineNum":" 2177","line":"template <class _A1, class _A2 = void, class _A3 = void>"},
{"lineNum":" 2178","line":"class __promote : public __promote_imp<_A1, _A2, _A3> {};"},
{"lineNum":" 2179","line":""},
{"lineNum":" 2180","line":"// make_signed / make_unsigned"},
{"lineNum":" 2181","line":""},
{"lineNum":" 2182","line":"typedef"},
{"lineNum":" 2183","line":"    __type_list<signed char,"},
{"lineNum":" 2184","line":"    __type_list<signed short,"},
{"lineNum":" 2185","line":"    __type_list<signed int,"},
{"lineNum":" 2186","line":"    __type_list<signed long,"},
{"lineNum":" 2187","line":"    __type_list<signed long long,"},
{"lineNum":" 2188","line":"#ifndef _LIBCPP_HAS_NO_INT128"},
{"lineNum":" 2189","line":"    __type_list<__int128_t,"},
{"lineNum":" 2190","line":"#endif"},
{"lineNum":" 2191","line":"    __nat"},
{"lineNum":" 2192","line":"#ifndef _LIBCPP_HAS_NO_INT128"},
{"lineNum":" 2193","line":"    >"},
{"lineNum":" 2194","line":"#endif"},
{"lineNum":" 2195","line":"    > > > > > __signed_types;"},
{"lineNum":" 2196","line":""},
{"lineNum":" 2197","line":"typedef"},
{"lineNum":" 2198","line":"    __type_list<unsigned char,"},
{"lineNum":" 2199","line":"    __type_list<unsigned short,"},
{"lineNum":" 2200","line":"    __type_list<unsigned int,"},
{"lineNum":" 2201","line":"    __type_list<unsigned long,"},
{"lineNum":" 2202","line":"    __type_list<unsigned long long,"},
{"lineNum":" 2203","line":"#ifndef _LIBCPP_HAS_NO_INT128"},
{"lineNum":" 2204","line":"    __type_list<__uint128_t,"},
{"lineNum":" 2205","line":"#endif"},
{"lineNum":" 2206","line":"    __nat"},
{"lineNum":" 2207","line":"#ifndef _LIBCPP_HAS_NO_INT128"},
{"lineNum":" 2208","line":"    >"},
{"lineNum":" 2209","line":"#endif"},
{"lineNum":" 2210","line":"    > > > > > __unsigned_types;"},
{"lineNum":" 2211","line":""},
{"lineNum":" 2212","line":"template <class _TypeList, size_t _Size, bool = _Size <= sizeof(typename _TypeList::_Head)> struct __find_first;"},
{"lineNum":" 2213","line":""},
{"lineNum":" 2214","line":"template <class _Hp, class _Tp, size_t _Size>"},
{"lineNum":" 2215","line":"struct __find_first<__type_list<_Hp, _Tp>, _Size, true>"},
{"lineNum":" 2216","line":"{"},
{"lineNum":" 2217","line":"    typedef _LIBCPP_NODEBUG_TYPE _Hp type;"},
{"lineNum":" 2218","line":"};"},
{"lineNum":" 2219","line":""},
{"lineNum":" 2220","line":"template <class _Hp, class _Tp, size_t _Size>"},
{"lineNum":" 2221","line":"struct __find_first<__type_list<_Hp, _Tp>, _Size, false>"},
{"lineNum":" 2222","line":"{"},
{"lineNum":" 2223","line":"    typedef _LIBCPP_NODEBUG_TYPE typename __find_first<_Tp, _Size>::type type;"},
{"lineNum":" 2224","line":"};"},
{"lineNum":" 2225","line":""},
{"lineNum":" 2226","line":"template <class _Tp, class _Up, bool = is_const<typename remove_reference<_Tp>::type>::value,"},
{"lineNum":" 2227","line":"                             bool = is_volatile<typename remove_reference<_Tp>::type>::value>"},
{"lineNum":" 2228","line":"struct __apply_cv"},
{"lineNum":" 2229","line":"{"},
{"lineNum":" 2230","line":"    typedef _LIBCPP_NODEBUG_TYPE _Up type;"},
{"lineNum":" 2231","line":"};"},
{"lineNum":" 2232","line":""},
{"lineNum":" 2233","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2234","line":"struct __apply_cv<_Tp, _Up, true, false>"},
{"lineNum":" 2235","line":"{"},
{"lineNum":" 2236","line":"    typedef _LIBCPP_NODEBUG_TYPE const _Up type;"},
{"lineNum":" 2237","line":"};"},
{"lineNum":" 2238","line":""},
{"lineNum":" 2239","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2240","line":"struct __apply_cv<_Tp, _Up, false, true>"},
{"lineNum":" 2241","line":"{"},
{"lineNum":" 2242","line":"    typedef volatile _Up type;"},
{"lineNum":" 2243","line":"};"},
{"lineNum":" 2244","line":""},
{"lineNum":" 2245","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2246","line":"struct __apply_cv<_Tp, _Up, true, true>"},
{"lineNum":" 2247","line":"{"},
{"lineNum":" 2248","line":"    typedef const volatile _Up type;"},
{"lineNum":" 2249","line":"};"},
{"lineNum":" 2250","line":""},
{"lineNum":" 2251","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2252","line":"struct __apply_cv<_Tp&, _Up, false, false>"},
{"lineNum":" 2253","line":"{"},
{"lineNum":" 2254","line":"    typedef _Up& type;"},
{"lineNum":" 2255","line":"};"},
{"lineNum":" 2256","line":""},
{"lineNum":" 2257","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2258","line":"struct __apply_cv<_Tp&, _Up, true, false>"},
{"lineNum":" 2259","line":"{"},
{"lineNum":" 2260","line":"    typedef const _Up& type;"},
{"lineNum":" 2261","line":"};"},
{"lineNum":" 2262","line":""},
{"lineNum":" 2263","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2264","line":"struct __apply_cv<_Tp&, _Up, false, true>"},
{"lineNum":" 2265","line":"{"},
{"lineNum":" 2266","line":"    typedef volatile _Up& type;"},
{"lineNum":" 2267","line":"};"},
{"lineNum":" 2268","line":""},
{"lineNum":" 2269","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2270","line":"struct __apply_cv<_Tp&, _Up, true, true>"},
{"lineNum":" 2271","line":"{"},
{"lineNum":" 2272","line":"    typedef const volatile _Up& type;"},
{"lineNum":" 2273","line":"};"},
{"lineNum":" 2274","line":""},
{"lineNum":" 2275","line":"template <class _Tp, bool = is_integral<_Tp>::value || is_enum<_Tp>::value>"},
{"lineNum":" 2276","line":"struct __make_signed {};"},
{"lineNum":" 2277","line":""},
{"lineNum":" 2278","line":"template <class _Tp>"},
{"lineNum":" 2279","line":"struct __make_signed<_Tp, true>"},
{"lineNum":" 2280","line":"{"},
{"lineNum":" 2281","line":"    typedef typename __find_first<__signed_types, sizeof(_Tp)>::type type;"},
{"lineNum":" 2282","line":"};"},
{"lineNum":" 2283","line":""},
{"lineNum":" 2284","line":"template <> struct __make_signed<bool,               true> {};"},
{"lineNum":" 2285","line":"template <> struct __make_signed<  signed short,     true> {typedef short     type;};"},
{"lineNum":" 2286","line":"template <> struct __make_signed<unsigned short,     true> {typedef short     type;};"},
{"lineNum":" 2287","line":"template <> struct __make_signed<  signed int,       true> {typedef int       type;};"},
{"lineNum":" 2288","line":"template <> struct __make_signed<unsigned int,       true> {typedef int       type;};"},
{"lineNum":" 2289","line":"template <> struct __make_signed<  signed long,      true> {typedef long      type;};"},
{"lineNum":" 2290","line":"template <> struct __make_signed<unsigned long,      true> {typedef long      type;};"},
{"lineNum":" 2291","line":"template <> struct __make_signed<  signed long long, true> {typedef long long type;};"},
{"lineNum":" 2292","line":"template <> struct __make_signed<unsigned long long, true> {typedef long long type;};"},
{"lineNum":" 2293","line":"#ifndef _LIBCPP_HAS_NO_INT128"},
{"lineNum":" 2294","line":"template <> struct __make_signed<__int128_t,         true> {typedef __int128_t type;};"},
{"lineNum":" 2295","line":"template <> struct __make_signed<__uint128_t,        true> {typedef __int128_t type;};"},
{"lineNum":" 2296","line":"#endif"},
{"lineNum":" 2297","line":""},
{"lineNum":" 2298","line":"template <class _Tp>"},
{"lineNum":" 2299","line":"struct _LIBCPP_TEMPLATE_VIS make_signed"},
{"lineNum":" 2300","line":"{"},
{"lineNum":" 2301","line":"    typedef typename __apply_cv<_Tp, typename __make_signed<typename remove_cv<_Tp>::type>::type>::type type;"},
{"lineNum":" 2302","line":"};"},
{"lineNum":" 2303","line":""},
{"lineNum":" 2304","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2305","line":"template <class _Tp> using make_signed_t = typename make_signed<_Tp>::type;"},
{"lineNum":" 2306","line":"#endif"},
{"lineNum":" 2307","line":""},
{"lineNum":" 2308","line":"template <class _Tp, bool = is_integral<_Tp>::value || is_enum<_Tp>::value>"},
{"lineNum":" 2309","line":"struct __make_unsigned {};"},
{"lineNum":" 2310","line":""},
{"lineNum":" 2311","line":"template <class _Tp>"},
{"lineNum":" 2312","line":"struct __make_unsigned<_Tp, true>"},
{"lineNum":" 2313","line":"{"},
{"lineNum":" 2314","line":"    typedef typename __find_first<__unsigned_types, sizeof(_Tp)>::type type;"},
{"lineNum":" 2315","line":"};"},
{"lineNum":" 2316","line":""},
{"lineNum":" 2317","line":"template <> struct __make_unsigned<bool,               true> {};"},
{"lineNum":" 2318","line":"template <> struct __make_unsigned<  signed short,     true> {typedef unsigned short     type;};"},
{"lineNum":" 2319","line":"template <> struct __make_unsigned<unsigned short,     true> {typedef unsigned short     type;};"},
{"lineNum":" 2320","line":"template <> struct __make_unsigned<  signed int,       true> {typedef unsigned int       type;};"},
{"lineNum":" 2321","line":"template <> struct __make_unsigned<unsigned int,       true> {typedef unsigned int       type;};"},
{"lineNum":" 2322","line":"template <> struct __make_unsigned<  signed long,      true> {typedef unsigned long      type;};"},
{"lineNum":" 2323","line":"template <> struct __make_unsigned<unsigned long,      true> {typedef unsigned long      type;};"},
{"lineNum":" 2324","line":"template <> struct __make_unsigned<  signed long long, true> {typedef unsigned long long type;};"},
{"lineNum":" 2325","line":"template <> struct __make_unsigned<unsigned long long, true> {typedef unsigned long long type;};"},
{"lineNum":" 2326","line":"#ifndef _LIBCPP_HAS_NO_INT128"},
{"lineNum":" 2327","line":"template <> struct __make_unsigned<__int128_t,         true> {typedef __uint128_t        type;};"},
{"lineNum":" 2328","line":"template <> struct __make_unsigned<__uint128_t,        true> {typedef __uint128_t        type;};"},
{"lineNum":" 2329","line":"#endif"},
{"lineNum":" 2330","line":""},
{"lineNum":" 2331","line":"template <class _Tp>"},
{"lineNum":" 2332","line":"struct _LIBCPP_TEMPLATE_VIS make_unsigned"},
{"lineNum":" 2333","line":"{"},
{"lineNum":" 2334","line":"    typedef typename __apply_cv<_Tp, typename __make_unsigned<typename remove_cv<_Tp>::type>::type>::type type;"},
{"lineNum":" 2335","line":"};"},
{"lineNum":" 2336","line":""},
{"lineNum":" 2337","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2338","line":"template <class _Tp> using make_unsigned_t = typename make_unsigned<_Tp>::type;"},
{"lineNum":" 2339","line":"#endif"},
{"lineNum":" 2340","line":""},
{"lineNum":" 2341","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 2342","line":"template <class _Tp>"},
{"lineNum":" 2343","line":"_LIBCPP_NODISCARD_ATTRIBUTE _LIBCPP_INLINE_VISIBILITY constexpr"},
{"lineNum":" 2344","line":"typename make_unsigned<_Tp>::type __to_unsigned_like(_Tp __x) noexcept {"},
{"lineNum":" 2345","line":"    return static_cast<typename make_unsigned<_Tp>::type>(__x);"},
{"lineNum":" 2346","line":"}"},
{"lineNum":" 2347","line":"#endif"},
{"lineNum":" 2348","line":""},
{"lineNum":" 2349","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 2350","line":"template <class...> using void_t = void;"},
{"lineNum":" 2351","line":"#endif"},
{"lineNum":" 2352","line":""},
{"lineNum":" 2353","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 2354","line":"// Let COND_RES(X, Y) be:"},
{"lineNum":" 2355","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2356","line":"using __cond_type = decltype(false ? declval<_Tp>() : declval<_Up>());"},
{"lineNum":" 2357","line":""},
{"lineNum":" 2358","line":"template <class _Tp, class _Up, class = void>"},
{"lineNum":" 2359","line":"struct __common_type3 {};"},
{"lineNum":" 2360","line":""},
{"lineNum":" 2361","line":"// sub-bullet 4 - \"if COND_RES(CREF(D1), CREF(D2)) denotes a type...\""},
{"lineNum":" 2362","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2363","line":"struct __common_type3<_Tp, _Up, void_t<__cond_type<const _Tp&, const _Up&>>>"},
{"lineNum":" 2364","line":"{"},
{"lineNum":" 2365","line":"    using type = remove_cvref_t<__cond_type<const _Tp&, const _Up&>>;"},
{"lineNum":" 2366","line":"};"},
{"lineNum":" 2367","line":""},
{"lineNum":" 2368","line":"template <class _Tp, class _Up, class = void>"},
{"lineNum":" 2369","line":"struct __common_type2_imp : __common_type3<_Tp, _Up> {};"},
{"lineNum":" 2370","line":"#else"},
{"lineNum":" 2371","line":"template <class _Tp, class _Up, class = void>"},
{"lineNum":" 2372","line":"struct __common_type2_imp {};"},
{"lineNum":" 2373","line":"#endif"},
{"lineNum":" 2374","line":""},
{"lineNum":" 2375","line":"// sub-bullet 3 - \"if decay_t<decltype(false ? declval<D1>() : declval<D2>())> ...\""},
{"lineNum":" 2376","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2377","line":"struct __common_type2_imp<_Tp, _Up,"},
{"lineNum":" 2378","line":"                          typename __void_t<decltype("},
{"lineNum":" 2379","line":"                                            true ? declval<_Tp>() : declval<_Up>()"},
{"lineNum":" 2380","line":"                                            )>::type>"},
{"lineNum":" 2381","line":"{"},
{"lineNum":" 2382","line":"  typedef _LIBCPP_NODEBUG_TYPE typename decay<decltype("},
{"lineNum":" 2383","line":"                         true ? declval<_Tp>() : declval<_Up>()"},
{"lineNum":" 2384","line":"                         )>::type type;"},
{"lineNum":" 2385","line":"};"},
{"lineNum":" 2386","line":""},
{"lineNum":" 2387","line":"template <class, class = void>"},
{"lineNum":" 2388","line":"struct __common_type_impl {};"},
{"lineNum":" 2389","line":""},
{"lineNum":" 2390","line":"// Clang provides variadic templates in C++03 as an extension."},
{"lineNum":" 2391","line":"#if !defined(_LIBCPP_CXX03_LANG) || defined(__clang__)"},
{"lineNum":" 2392","line":"# define _LIBCPP_OPTIONAL_PACK(...) , __VA_ARGS__"},
{"lineNum":" 2393","line":"template <class... Tp>"},
{"lineNum":" 2394","line":"struct __common_types;"},
{"lineNum":" 2395","line":"template <class... _Tp>"},
{"lineNum":" 2396","line":"struct _LIBCPP_TEMPLATE_VIS common_type;"},
{"lineNum":" 2397","line":"#else"},
{"lineNum":" 2398","line":"# define _LIBCPP_OPTIONAL_PACK(...)"},
{"lineNum":" 2399","line":"struct __no_arg;"},
{"lineNum":" 2400","line":"template <class _Tp, class _Up, class = __no_arg>"},
{"lineNum":" 2401","line":"struct __common_types;"},
{"lineNum":" 2402","line":"template <class _Tp = __no_arg, class _Up = __no_arg, class _Vp = __no_arg,"},
{"lineNum":" 2403","line":"          class _Unused = __no_arg>"},
{"lineNum":" 2404","line":"struct common_type {"},
{"lineNum":" 2405","line":"  static_assert(sizeof(_Unused) == 0,"},
{"lineNum":" 2406","line":"                \"common_type accepts at most 3 arguments in C++03\");"},
{"lineNum":" 2407","line":"};"},
{"lineNum":" 2408","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 2409","line":""},
{"lineNum":" 2410","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2411","line":"struct __common_type_impl<"},
{"lineNum":" 2412","line":"    __common_types<_Tp, _Up>,"},
{"lineNum":" 2413","line":"    typename __void_t<typename common_type<_Tp, _Up>::type>::type>"},
{"lineNum":" 2414","line":"{"},
{"lineNum":" 2415","line":"  typedef typename common_type<_Tp, _Up>::type type;"},
{"lineNum":" 2416","line":"};"},
{"lineNum":" 2417","line":""},
{"lineNum":" 2418","line":"template <class _Tp, class _Up, class _Vp _LIBCPP_OPTIONAL_PACK(class... _Rest)>"},
{"lineNum":" 2419","line":"struct __common_type_impl<"},
{"lineNum":" 2420","line":"    __common_types<_Tp, _Up, _Vp _LIBCPP_OPTIONAL_PACK(_Rest...)>,"},
{"lineNum":" 2421","line":"    typename __void_t<typename common_type<_Tp, _Up>::type>::type>"},
{"lineNum":" 2422","line":"    : __common_type_impl<__common_types<typename common_type<_Tp, _Up>::type,"},
{"lineNum":" 2423","line":"                                        _Vp _LIBCPP_OPTIONAL_PACK(_Rest...)> > {"},
{"lineNum":" 2424","line":"};"},
{"lineNum":" 2425","line":""},
{"lineNum":" 2426","line":"// bullet 1 - sizeof...(Tp) == 0"},
{"lineNum":" 2427","line":""},
{"lineNum":" 2428","line":"template <>"},
{"lineNum":" 2429","line":"struct _LIBCPP_TEMPLATE_VIS common_type<> {};"},
{"lineNum":" 2430","line":""},
{"lineNum":" 2431","line":"// bullet 2 - sizeof...(Tp) == 1"},
{"lineNum":" 2432","line":""},
{"lineNum":" 2433","line":"template <class _Tp>"},
{"lineNum":" 2434","line":"struct _LIBCPP_TEMPLATE_VIS common_type<_Tp>"},
{"lineNum":" 2435","line":"    : public common_type<_Tp, _Tp> {};"},
{"lineNum":" 2436","line":""},
{"lineNum":" 2437","line":"// bullet 3 - sizeof...(Tp) == 2"},
{"lineNum":" 2438","line":""},
{"lineNum":" 2439","line":"// sub-bullet 1 - \"If is_same_v<T1, D1> is false or ...\""},
{"lineNum":" 2440","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2441","line":"struct _LIBCPP_TEMPLATE_VIS common_type<_Tp, _Up>"},
{"lineNum":" 2442","line":"    : conditional<"},
{"lineNum":" 2443","line":"        _IsSame<_Tp, typename decay<_Tp>::type>::value && _IsSame<_Up, typename decay<_Up>::type>::value,"},
{"lineNum":" 2444","line":"        __common_type2_imp<_Tp, _Up>,"},
{"lineNum":" 2445","line":"        common_type<typename decay<_Tp>::type, typename decay<_Up>::type>"},
{"lineNum":" 2446","line":"    >::type"},
{"lineNum":" 2447","line":"{};"},
{"lineNum":" 2448","line":""},
{"lineNum":" 2449","line":"// bullet 4 - sizeof...(Tp) > 2"},
{"lineNum":" 2450","line":""},
{"lineNum":" 2451","line":"template <class _Tp, class _Up, class _Vp _LIBCPP_OPTIONAL_PACK(class... _Rest)>"},
{"lineNum":" 2452","line":"struct _LIBCPP_TEMPLATE_VIS"},
{"lineNum":" 2453","line":"    common_type<_Tp, _Up, _Vp _LIBCPP_OPTIONAL_PACK(_Rest...)>"},
{"lineNum":" 2454","line":"    : __common_type_impl<"},
{"lineNum":" 2455","line":"          __common_types<_Tp, _Up, _Vp _LIBCPP_OPTIONAL_PACK(_Rest...)> > {};"},
{"lineNum":" 2456","line":""},
{"lineNum":" 2457","line":"#undef _LIBCPP_OPTIONAL_PACK"},
{"lineNum":" 2458","line":""},
{"lineNum":" 2459","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2460","line":"template <class ..._Tp> using common_type_t = typename common_type<_Tp...>::type;"},
{"lineNum":" 2461","line":"#endif"},
{"lineNum":" 2462","line":""},
{"lineNum":" 2463","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 2464","line":"// Let COPYCV(FROM, TO) be an alias for type TO with the addition of FROM\'s"},
{"lineNum":" 2465","line":"// top-level cv-qualifiers."},
{"lineNum":" 2466","line":"template <class _From, class _To>"},
{"lineNum":" 2467","line":"struct __copy_cv"},
{"lineNum":" 2468","line":"{"},
{"lineNum":" 2469","line":"    using type = _To;"},
{"lineNum":" 2470","line":"};"},
{"lineNum":" 2471","line":""},
{"lineNum":" 2472","line":"template <class _From, class _To>"},
{"lineNum":" 2473","line":"struct __copy_cv<const _From, _To>"},
{"lineNum":" 2474","line":"{"},
{"lineNum":" 2475","line":"    using type = add_const_t<_To>;"},
{"lineNum":" 2476","line":"};"},
{"lineNum":" 2477","line":""},
{"lineNum":" 2478","line":"template <class _From, class _To>"},
{"lineNum":" 2479","line":"struct __copy_cv<volatile _From, _To>"},
{"lineNum":" 2480","line":"{"},
{"lineNum":" 2481","line":"    using type = add_volatile_t<_To>;"},
{"lineNum":" 2482","line":"};"},
{"lineNum":" 2483","line":""},
{"lineNum":" 2484","line":"template <class _From, class _To>"},
{"lineNum":" 2485","line":"struct __copy_cv<const volatile _From, _To>"},
{"lineNum":" 2486","line":"{"},
{"lineNum":" 2487","line":"    using type = add_cv_t<_To>;"},
{"lineNum":" 2488","line":"};"},
{"lineNum":" 2489","line":""},
{"lineNum":" 2490","line":"template <class _From, class _To>"},
{"lineNum":" 2491","line":"using __copy_cv_t = typename __copy_cv<_From, _To>::type;"},
{"lineNum":" 2492","line":""},
{"lineNum":" 2493","line":"template <class _From, class _To>"},
{"lineNum":" 2494","line":"struct __copy_cvref"},
{"lineNum":" 2495","line":"{"},
{"lineNum":" 2496","line":"    using type = __copy_cv_t<_From, _To>;"},
{"lineNum":" 2497","line":"};"},
{"lineNum":" 2498","line":""},
{"lineNum":" 2499","line":"template <class _From, class _To>"},
{"lineNum":" 2500","line":"struct __copy_cvref<_From&, _To>"},
{"lineNum":" 2501","line":"{"},
{"lineNum":" 2502","line":"    using type = add_lvalue_reference_t<__copy_cv_t<_From, _To>>;"},
{"lineNum":" 2503","line":"};"},
{"lineNum":" 2504","line":""},
{"lineNum":" 2505","line":"template <class _From, class _To>"},
{"lineNum":" 2506","line":"struct __copy_cvref<_From&&, _To>"},
{"lineNum":" 2507","line":"{"},
{"lineNum":" 2508","line":"    using type = add_rvalue_reference_t<__copy_cv_t<_From, _To>>;"},
{"lineNum":" 2509","line":"};"},
{"lineNum":" 2510","line":""},
{"lineNum":" 2511","line":"template <class _From, class _To>"},
{"lineNum":" 2512","line":"using __copy_cvref_t = typename __copy_cvref<_From, _To>::type;"},
{"lineNum":" 2513","line":""},
{"lineNum":" 2514","line":"#endif // _LIBCPP_STD_VER > 11"},
{"lineNum":" 2515","line":""},
{"lineNum":" 2516","line":"// common_reference"},
{"lineNum":" 2517","line":"#if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_CONCEPTS)"},
{"lineNum":" 2518","line":"// Let COND_RES(X, Y) be:"},
{"lineNum":" 2519","line":"template <class _Xp, class _Yp>"},
{"lineNum":" 2520","line":"using __cond_res ="},
{"lineNum":" 2521","line":"    decltype(false ? declval<_Xp(&)()>()() : declval<_Yp(&)()>()());"},
{"lineNum":" 2522","line":""},
{"lineNum":" 2523","line":"// Let `XREF(A)` denote a unary alias template `T` such that `T<U>` denotes the same type as `U`"},
{"lineNum":" 2524","line":"// with the addition of `A`\'s cv and reference qualifiers, for a non-reference cv-unqualified type"},
{"lineNum":" 2525","line":"// `U`."},
{"lineNum":" 2526","line":"// [Note: `XREF(A)` is `__xref<A>::template __apply`]"},
{"lineNum":" 2527","line":"template <class _Tp>"},
{"lineNum":" 2528","line":"struct __xref {"},
{"lineNum":" 2529","line":"  template<class _Up>"},
{"lineNum":" 2530","line":"  using __apply = __copy_cvref_t<_Tp, _Up>;"},
{"lineNum":" 2531","line":"};"},
{"lineNum":" 2532","line":""},
{"lineNum":" 2533","line":"// Given types A and B, let X be remove_reference_t<A>, let Y be remove_reference_t<B>,"},
{"lineNum":" 2534","line":"// and let COMMON-REF(A, B) be:"},
{"lineNum":" 2535","line":"template<class _Ap, class _Bp, class _Xp = remove_reference_t<_Ap>, class _Yp = remove_reference_t<_Bp>>"},
{"lineNum":" 2536","line":"struct __common_ref;"},
{"lineNum":" 2537","line":""},
{"lineNum":" 2538","line":"template<class _Xp, class _Yp>"},
{"lineNum":" 2539","line":"using __common_ref_t = typename __common_ref<_Xp, _Yp>::__type;"},
{"lineNum":" 2540","line":""},
{"lineNum":" 2541","line":"template<class _Xp, class _Yp>"},
{"lineNum":" 2542","line":"using __cv_cond_res = __cond_res<__copy_cv_t<_Xp, _Yp>&, __copy_cv_t<_Yp, _Xp>&>;"},
{"lineNum":" 2543","line":""},
{"lineNum":" 2544","line":""},
{"lineNum":" 2545","line":"//    If A and B are both lvalue reference types, COMMON-REF(A, B) is"},
{"lineNum":" 2546","line":"//    COND-RES(COPYCV(X, Y)&, COPYCV(Y, X)&) if that type exists and is a reference type."},
{"lineNum":" 2547","line":"template<class _Ap, class _Bp, class _Xp, class _Yp>"},
{"lineNum":" 2548","line":"requires requires { typename __cv_cond_res<_Xp, _Yp>; } && is_reference_v<__cv_cond_res<_Xp, _Yp>>"},
{"lineNum":" 2549","line":"struct __common_ref<_Ap&, _Bp&, _Xp, _Yp>"},
{"lineNum":" 2550","line":"{"},
{"lineNum":" 2551","line":"    using __type = __cv_cond_res<_Xp, _Yp>;"},
{"lineNum":" 2552","line":"};"},
{"lineNum":" 2553","line":""},
{"lineNum":" 2554","line":"//    Otherwise, let C be remove_reference_t<COMMON-REF(X&, Y&)>&&. ..."},
{"lineNum":" 2555","line":"template <class _Xp, class _Yp>"},
{"lineNum":" 2556","line":"using __common_ref_C = remove_reference_t<__common_ref_t<_Xp&, _Yp&>>&&;"},
{"lineNum":" 2557","line":""},
{"lineNum":" 2558","line":""},
{"lineNum":" 2559","line":"//    .... If A and B are both rvalue reference types, C is well-formed, and"},
{"lineNum":" 2560","line":"//    is_convertible_v<A, C> && is_convertible_v<B, C> is true, then COMMON-REF(A, B) is C."},
{"lineNum":" 2561","line":"template<class _Ap, class _Bp, class _Xp, class _Yp>"},
{"lineNum":" 2562","line":"requires"},
{"lineNum":" 2563","line":"  requires { typename __common_ref_C<_Xp, _Yp>; } &&"},
{"lineNum":" 2564","line":"  is_convertible_v<_Ap&&, __common_ref_C<_Xp, _Yp>> &&"},
{"lineNum":" 2565","line":"  is_convertible_v<_Bp&&, __common_ref_C<_Xp, _Yp>>"},
{"lineNum":" 2566","line":"struct __common_ref<_Ap&&, _Bp&&, _Xp, _Yp>"},
{"lineNum":" 2567","line":"{"},
{"lineNum":" 2568","line":"    using __type = __common_ref_C<_Xp, _Yp>;"},
{"lineNum":" 2569","line":"};"},
{"lineNum":" 2570","line":""},
{"lineNum":" 2571","line":"//    Otherwise, let D be COMMON-REF(const X&, Y&). ..."},
{"lineNum":" 2572","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2573","line":"using __common_ref_D = __common_ref_t<const _Tp&, _Up&>;"},
{"lineNum":" 2574","line":""},
{"lineNum":" 2575","line":"//    ... If A is an rvalue reference and B is an lvalue reference and D is well-formed and"},
{"lineNum":" 2576","line":"//    is_convertible_v<A, D> is true, then COMMON-REF(A, B) is D."},
{"lineNum":" 2577","line":"template<class _Ap, class _Bp, class _Xp, class _Yp>"},
{"lineNum":" 2578","line":"requires requires { typename __common_ref_D<_Xp, _Yp>; } &&"},
{"lineNum":" 2579","line":"         is_convertible_v<_Ap&&, __common_ref_D<_Xp, _Yp>>"},
{"lineNum":" 2580","line":"struct __common_ref<_Ap&&, _Bp&, _Xp, _Yp>"},
{"lineNum":" 2581","line":"{"},
{"lineNum":" 2582","line":"    using __type = __common_ref_D<_Xp, _Yp>;"},
{"lineNum":" 2583","line":"};"},
{"lineNum":" 2584","line":""},
{"lineNum":" 2585","line":"//    Otherwise, if A is an lvalue reference and B is an rvalue reference, then"},
{"lineNum":" 2586","line":"//    COMMON-REF(A, B) is COMMON-REF(B, A)."},
{"lineNum":" 2587","line":"template<class _Ap, class _Bp, class _Xp, class _Yp>"},
{"lineNum":" 2588","line":"struct __common_ref<_Ap&, _Bp&&, _Xp, _Yp> : __common_ref<_Bp&&, _Ap&> {};"},
{"lineNum":" 2589","line":""},
{"lineNum":" 2590","line":"//    Otherwise, COMMON-REF(A, B) is ill-formed."},
{"lineNum":" 2591","line":"template<class _Ap, class _Bp, class _Xp, class _Yp>"},
{"lineNum":" 2592","line":"struct __common_ref {};"},
{"lineNum":" 2593","line":""},
{"lineNum":" 2594","line":"// Note C: For the common_reference trait applied to a parameter pack [...]"},
{"lineNum":" 2595","line":""},
{"lineNum":" 2596","line":"template <class...>"},
{"lineNum":" 2597","line":"struct common_reference;"},
{"lineNum":" 2598","line":""},
{"lineNum":" 2599","line":"template <class... _Types>"},
{"lineNum":" 2600","line":"using common_reference_t = typename common_reference<_Types...>::type;"},
{"lineNum":" 2601","line":""},
{"lineNum":" 2602","line":"// bullet 1 - sizeof...(T) == 0"},
{"lineNum":" 2603","line":"template<>"},
{"lineNum":" 2604","line":"struct common_reference<> {};"},
{"lineNum":" 2605","line":""},
{"lineNum":" 2606","line":"// bullet 2 - sizeof...(T) == 1"},
{"lineNum":" 2607","line":"template <class _Tp>"},
{"lineNum":" 2608","line":"struct common_reference<_Tp>"},
{"lineNum":" 2609","line":"{"},
{"lineNum":" 2610","line":"    using type = _Tp;"},
{"lineNum":" 2611","line":"};"},
{"lineNum":" 2612","line":""},
{"lineNum":" 2613","line":"// bullet 3 - sizeof...(T) == 2"},
{"lineNum":" 2614","line":"template <class _Tp, class _Up> struct __common_reference_sub_bullet3;"},
{"lineNum":" 2615","line":"template <class _Tp, class _Up> struct __common_reference_sub_bullet2 : __common_reference_sub_bullet3<_Tp, _Up> {};"},
{"lineNum":" 2616","line":"template <class _Tp, class _Up> struct __common_reference_sub_bullet1 : __common_reference_sub_bullet2<_Tp, _Up> {};"},
{"lineNum":" 2617","line":""},
{"lineNum":" 2618","line":"// sub-bullet 1 - If T1 and T2 are reference types and COMMON-REF(T1, T2) is well-formed, then"},
{"lineNum":" 2619","line":"// the member typedef `type` denotes that type."},
{"lineNum":" 2620","line":"template <class _Tp, class _Up> struct common_reference<_Tp, _Up> : __common_reference_sub_bullet1<_Tp, _Up> {};"},
{"lineNum":" 2621","line":""},
{"lineNum":" 2622","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2623","line":"requires is_reference_v<_Tp> && is_reference_v<_Up> && requires { typename __common_ref_t<_Tp, _Up>; }"},
{"lineNum":" 2624","line":"struct __common_reference_sub_bullet1<_Tp, _Up>"},
{"lineNum":" 2625","line":"{"},
{"lineNum":" 2626","line":"    using type = __common_ref_t<_Tp, _Up>;"},
{"lineNum":" 2627","line":"};"},
{"lineNum":" 2628","line":""},
{"lineNum":" 2629","line":"// sub-bullet 2 - Otherwise, if basic_common_reference<remove_cvref_t<T1>, remove_cvref_t<T2>, XREF(T1), XREF(T2)>::type"},
{"lineNum":" 2630","line":"// is well-formed, then the member typedef `type` denotes that type."},
{"lineNum":" 2631","line":"template <class, class, template <class> class, template <class> class> struct basic_common_reference {};"},
{"lineNum":" 2632","line":""},
{"lineNum":" 2633","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2634","line":"using __basic_common_reference_t = typename basic_common_reference<"},
{"lineNum":" 2635","line":"    remove_cvref_t<_Tp>, remove_cvref_t<_Up>,"},
{"lineNum":" 2636","line":"    __xref<_Tp>::template __apply, __xref<_Up>::template __apply>::type;"},
{"lineNum":" 2637","line":""},
{"lineNum":" 2638","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2639","line":"requires requires { typename __basic_common_reference_t<_Tp, _Up>; }"},
{"lineNum":" 2640","line":"struct __common_reference_sub_bullet2<_Tp, _Up>"},
{"lineNum":" 2641","line":"{"},
{"lineNum":" 2642","line":"    using type = __basic_common_reference_t<_Tp, _Up>;"},
{"lineNum":" 2643","line":"};"},
{"lineNum":" 2644","line":""},
{"lineNum":" 2645","line":"// sub-bullet 3 - Otherwise, if COND-RES(T1, T2) is well-formed,"},
{"lineNum":" 2646","line":"// then the member typedef `type` denotes that type."},
{"lineNum":" 2647","line":"template <class _Tp, class _Up>"},
{"lineNum":" 2648","line":"requires requires { typename __cond_res<_Tp, _Up>; }"},
{"lineNum":" 2649","line":"struct __common_reference_sub_bullet3<_Tp, _Up>"},
{"lineNum":" 2650","line":"{"},
{"lineNum":" 2651","line":"    using type = __cond_res<_Tp, _Up>;"},
{"lineNum":" 2652","line":"};"},
{"lineNum":" 2653","line":""},
{"lineNum":" 2654","line":""},
{"lineNum":" 2655","line":"// sub-bullet 4 & 5 - Otherwise, if common_type_t<T1, T2> is well-formed,"},
{"lineNum":" 2656","line":"//                    then the member typedef `type` denotes that type."},
{"lineNum":" 2657","line":"//                  - Otherwise, there shall be no member `type`."},
{"lineNum":" 2658","line":"template <class _Tp, class _Up> struct __common_reference_sub_bullet3 : common_type<_Tp, _Up> {};"},
{"lineNum":" 2659","line":""},
{"lineNum":" 2660","line":"// bullet 4 - If there is such a type `C`, the member typedef type shall denote the same type, if"},
{"lineNum":" 2661","line":"//            any, as `common_reference_t<C, Rest...>`."},
{"lineNum":" 2662","line":"template <class _Tp, class _Up, class _Vp, class... _Rest>"},
{"lineNum":" 2663","line":"requires requires { typename common_reference_t<_Tp, _Up>; }"},
{"lineNum":" 2664","line":"struct common_reference<_Tp, _Up, _Vp, _Rest...>"},
{"lineNum":" 2665","line":"    : common_reference<common_reference_t<_Tp, _Up>, _Vp, _Rest...>"},
{"lineNum":" 2666","line":"{};"},
{"lineNum":" 2667","line":""},
{"lineNum":" 2668","line":"// bullet 5 - Otherwise, there shall be no member `type`."},
{"lineNum":" 2669","line":"template <class...> struct common_reference {};"},
{"lineNum":" 2670","line":""},
{"lineNum":" 2671","line":"#endif // _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_CONCEPTS)"},
{"lineNum":" 2672","line":""},
{"lineNum":" 2673","line":"// is_assignable"},
{"lineNum":" 2674","line":""},
{"lineNum":" 2675","line":"template<typename, typename _Tp> struct __select_2nd { typedef _LIBCPP_NODEBUG_TYPE _Tp type; };"},
{"lineNum":" 2676","line":""},
{"lineNum":" 2677","line":"#if __has_keyword(__is_assignable)"},
{"lineNum":" 2678","line":""},
{"lineNum":" 2679","line":"template<class _Tp, class _Up>"},
{"lineNum":" 2680","line":"struct _LIBCPP_TEMPLATE_VIS is_assignable : _BoolConstant<__is_assignable(_Tp, _Up)> { };"},
{"lineNum":" 2681","line":""},
{"lineNum":" 2682","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 2683","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 2684","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_assignable_v = __is_assignable(_Tp, _Arg);"},
{"lineNum":" 2685","line":"#endif"},
{"lineNum":" 2686","line":""},
{"lineNum":" 2687","line":"#else // __has_keyword(__is_assignable)"},
{"lineNum":" 2688","line":""},
{"lineNum":" 2689","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 2690","line":"typename __select_2nd<decltype((declval<_Tp>() = declval<_Arg>())), true_type>::type"},
{"lineNum":" 2691","line":"__is_assignable_test(int);"},
{"lineNum":" 2692","line":""},
{"lineNum":" 2693","line":"template <class, class>"},
{"lineNum":" 2694","line":"false_type __is_assignable_test(...);"},
{"lineNum":" 2695","line":""},
{"lineNum":" 2696","line":""},
{"lineNum":" 2697","line":"template <class _Tp, class _Arg, bool = is_void<_Tp>::value || is_void<_Arg>::value>"},
{"lineNum":" 2698","line":"struct __is_assignable_imp"},
{"lineNum":" 2699","line":"    : public decltype((_VSTD::__is_assignable_test<_Tp, _Arg>(0))) {};"},
{"lineNum":" 2700","line":""},
{"lineNum":" 2701","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 2702","line":"struct __is_assignable_imp<_Tp, _Arg, true>"},
{"lineNum":" 2703","line":"    : public false_type"},
{"lineNum":" 2704","line":"{"},
{"lineNum":" 2705","line":"};"},
{"lineNum":" 2706","line":""},
{"lineNum":" 2707","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 2708","line":"struct is_assignable"},
{"lineNum":" 2709","line":"    : public __is_assignable_imp<_Tp, _Arg> {};"},
{"lineNum":" 2710","line":""},
{"lineNum":" 2711","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 2712","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 2713","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_assignable_v"},
{"lineNum":" 2714","line":"    = is_assignable<_Tp, _Arg>::value;"},
{"lineNum":" 2715","line":"#endif"},
{"lineNum":" 2716","line":""},
{"lineNum":" 2717","line":"#endif // __has_keyword(__is_assignable)"},
{"lineNum":" 2718","line":""},
{"lineNum":" 2719","line":"// is_copy_assignable"},
{"lineNum":" 2720","line":""},
{"lineNum":" 2721","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_copy_assignable"},
{"lineNum":" 2722","line":"    : public is_assignable<typename add_lvalue_reference<_Tp>::type,"},
{"lineNum":" 2723","line":"                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};"},
{"lineNum":" 2724","line":""},
{"lineNum":" 2725","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 2726","line":"template <class _Tp>"},
{"lineNum":" 2727","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_copy_assignable_v"},
{"lineNum":" 2728","line":"    = is_copy_assignable<_Tp>::value;"},
{"lineNum":" 2729","line":"#endif"},
{"lineNum":" 2730","line":""},
{"lineNum":" 2731","line":"// is_move_assignable"},
{"lineNum":" 2732","line":""},
{"lineNum":" 2733","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_move_assignable"},
{"lineNum":" 2734","line":"    : public is_assignable<typename add_lvalue_reference<_Tp>::type,"},
{"lineNum":" 2735","line":"                           typename add_rvalue_reference<_Tp>::type> {};"},
{"lineNum":" 2736","line":""},
{"lineNum":" 2737","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 2738","line":"template <class _Tp>"},
{"lineNum":" 2739","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_move_assignable_v"},
{"lineNum":" 2740","line":"    = is_move_assignable<_Tp>::value;"},
{"lineNum":" 2741","line":"#endif"},
{"lineNum":" 2742","line":""},
{"lineNum":" 2743","line":"// is_destructible"},
{"lineNum":" 2744","line":""},
{"lineNum":" 2745","line":"#if __has_keyword(__is_destructible)"},
{"lineNum":" 2746","line":""},
{"lineNum":" 2747","line":"template<class _Tp>"},
{"lineNum":" 2748","line":"struct _LIBCPP_TEMPLATE_VIS is_destructible : _BoolConstant<__is_destructible(_Tp)> { };"},
{"lineNum":" 2749","line":""},
{"lineNum":" 2750","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 2751","line":"template <class _Tp>"},
{"lineNum":" 2752","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_destructible_v = __is_destructible(_Tp);"},
{"lineNum":" 2753","line":"#endif"},
{"lineNum":" 2754","line":""},
{"lineNum":" 2755","line":"#else // __has_keyword(__is_destructible)"},
{"lineNum":" 2756","line":""},
{"lineNum":" 2757","line":"//  if it\'s a reference, return true"},
{"lineNum":" 2758","line":"//  if it\'s a function, return false"},
{"lineNum":" 2759","line":"//  if it\'s   void,     return false"},
{"lineNum":" 2760","line":"//  if it\'s an array of unknown bound, return false"},
{"lineNum":" 2761","line":"//  Otherwise, return \"declval<_Up&>().~_Up()\" is well-formed"},
{"lineNum":" 2762","line":"//    where _Up is remove_all_extents<_Tp>::type"},
{"lineNum":" 2763","line":""},
{"lineNum":" 2764","line":"template <class>"},
{"lineNum":" 2765","line":"struct __is_destructible_apply { typedef int type; };"},
{"lineNum":" 2766","line":""},
{"lineNum":" 2767","line":"template <typename _Tp>"},
{"lineNum":" 2768","line":"struct __is_destructor_wellformed {"},
{"lineNum":" 2769","line":"    template <typename _Tp1>"},
{"lineNum":" 2770","line":"    static char  __test ("},
{"lineNum":" 2771","line":"        typename __is_destructible_apply<decltype(declval<_Tp1&>().~_Tp1())>::type"},
{"lineNum":" 2772","line":"    );"},
{"lineNum":" 2773","line":""},
{"lineNum":" 2774","line":"    template <typename _Tp1>"},
{"lineNum":" 2775","line":"    static __two __test (...);"},
{"lineNum":" 2776","line":""},
{"lineNum":" 2777","line":"    static const bool value = sizeof(__test<_Tp>(12)) == sizeof(char);"},
{"lineNum":" 2778","line":"};"},
{"lineNum":" 2779","line":""},
{"lineNum":" 2780","line":"template <class _Tp, bool>"},
{"lineNum":" 2781","line":"struct __destructible_imp;"},
{"lineNum":" 2782","line":""},
{"lineNum":" 2783","line":"template <class _Tp>"},
{"lineNum":" 2784","line":"struct __destructible_imp<_Tp, false>"},
{"lineNum":" 2785","line":"   : public integral_constant<bool,"},
{"lineNum":" 2786","line":"        __is_destructor_wellformed<typename remove_all_extents<_Tp>::type>::value> {};"},
{"lineNum":" 2787","line":""},
{"lineNum":" 2788","line":"template <class _Tp>"},
{"lineNum":" 2789","line":"struct __destructible_imp<_Tp, true>"},
{"lineNum":" 2790","line":"    : public true_type {};"},
{"lineNum":" 2791","line":""},
{"lineNum":" 2792","line":"template <class _Tp, bool>"},
{"lineNum":" 2793","line":"struct __destructible_false;"},
{"lineNum":" 2794","line":""},
{"lineNum":" 2795","line":"template <class _Tp>"},
{"lineNum":" 2796","line":"struct __destructible_false<_Tp, false> : public __destructible_imp<_Tp, is_reference<_Tp>::value> {};"},
{"lineNum":" 2797","line":""},
{"lineNum":" 2798","line":"template <class _Tp>"},
{"lineNum":" 2799","line":"struct __destructible_false<_Tp, true> : public false_type {};"},
{"lineNum":" 2800","line":""},
{"lineNum":" 2801","line":"template <class _Tp>"},
{"lineNum":" 2802","line":"struct is_destructible"},
{"lineNum":" 2803","line":"    : public __destructible_false<_Tp, is_function<_Tp>::value> {};"},
{"lineNum":" 2804","line":""},
{"lineNum":" 2805","line":"template <class _Tp>"},
{"lineNum":" 2806","line":"struct is_destructible<_Tp[]>"},
{"lineNum":" 2807","line":"    : public false_type {};"},
{"lineNum":" 2808","line":""},
{"lineNum":" 2809","line":"template <>"},
{"lineNum":" 2810","line":"struct is_destructible<void>"},
{"lineNum":" 2811","line":"    : public false_type {};"},
{"lineNum":" 2812","line":""},
{"lineNum":" 2813","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 2814","line":"template <class _Tp>"},
{"lineNum":" 2815","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_destructible_v"},
{"lineNum":" 2816","line":"    = is_destructible<_Tp>::value;"},
{"lineNum":" 2817","line":"#endif"},
{"lineNum":" 2818","line":""},
{"lineNum":" 2819","line":"#endif // __has_keyword(__is_destructible)"},
{"lineNum":" 2820","line":""},
{"lineNum":" 2821","line":"template <class _MP, bool _IsMemberFunctionPtr, bool _IsMemberObjectPtr>"},
{"lineNum":" 2822","line":"struct __member_pointer_traits_imp"},
{"lineNum":" 2823","line":"{"},
{"lineNum":" 2824","line":"};"},
{"lineNum":" 2825","line":""},
{"lineNum":" 2826","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2827","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...), true, false>"},
{"lineNum":" 2828","line":"{"},
{"lineNum":" 2829","line":"    typedef _Class _ClassType;"},
{"lineNum":" 2830","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2831","line":"    typedef _Rp (_FnType) (_Param...);"},
{"lineNum":" 2832","line":"};"},
{"lineNum":" 2833","line":""},
{"lineNum":" 2834","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2835","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...), true, false>"},
{"lineNum":" 2836","line":"{"},
{"lineNum":" 2837","line":"    typedef _Class _ClassType;"},
{"lineNum":" 2838","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2839","line":"    typedef _Rp (_FnType) (_Param..., ...);"},
{"lineNum":" 2840","line":"};"},
{"lineNum":" 2841","line":""},
{"lineNum":" 2842","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2843","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const, true, false>"},
{"lineNum":" 2844","line":"{"},
{"lineNum":" 2845","line":"    typedef _Class const _ClassType;"},
{"lineNum":" 2846","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2847","line":"    typedef _Rp (_FnType) (_Param...);"},
{"lineNum":" 2848","line":"};"},
{"lineNum":" 2849","line":""},
{"lineNum":" 2850","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2851","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const, true, false>"},
{"lineNum":" 2852","line":"{"},
{"lineNum":" 2853","line":"    typedef _Class const _ClassType;"},
{"lineNum":" 2854","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2855","line":"    typedef _Rp (_FnType) (_Param..., ...);"},
{"lineNum":" 2856","line":"};"},
{"lineNum":" 2857","line":""},
{"lineNum":" 2858","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2859","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile, true, false>"},
{"lineNum":" 2860","line":"{"},
{"lineNum":" 2861","line":"    typedef _Class volatile _ClassType;"},
{"lineNum":" 2862","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2863","line":"    typedef _Rp (_FnType) (_Param...);"},
{"lineNum":" 2864","line":"};"},
{"lineNum":" 2865","line":""},
{"lineNum":" 2866","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2867","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile, true, false>"},
{"lineNum":" 2868","line":"{"},
{"lineNum":" 2869","line":"    typedef _Class volatile _ClassType;"},
{"lineNum":" 2870","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2871","line":"    typedef _Rp (_FnType) (_Param..., ...);"},
{"lineNum":" 2872","line":"};"},
{"lineNum":" 2873","line":""},
{"lineNum":" 2874","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2875","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile, true, false>"},
{"lineNum":" 2876","line":"{"},
{"lineNum":" 2877","line":"    typedef _Class const volatile _ClassType;"},
{"lineNum":" 2878","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2879","line":"    typedef _Rp (_FnType) (_Param...);"},
{"lineNum":" 2880","line":"};"},
{"lineNum":" 2881","line":""},
{"lineNum":" 2882","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2883","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile, true, false>"},
{"lineNum":" 2884","line":"{"},
{"lineNum":" 2885","line":"    typedef _Class const volatile _ClassType;"},
{"lineNum":" 2886","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2887","line":"    typedef _Rp (_FnType) (_Param..., ...);"},
{"lineNum":" 2888","line":"};"},
{"lineNum":" 2889","line":""},
{"lineNum":" 2890","line":"#if __has_feature(cxx_reference_qualified_functions) || defined(_LIBCPP_COMPILER_GCC)"},
{"lineNum":" 2891","line":""},
{"lineNum":" 2892","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2893","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) &, true, false>"},
{"lineNum":" 2894","line":"{"},
{"lineNum":" 2895","line":"    typedef _Class& _ClassType;"},
{"lineNum":" 2896","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2897","line":"    typedef _Rp (_FnType) (_Param...);"},
{"lineNum":" 2898","line":"};"},
{"lineNum":" 2899","line":""},
{"lineNum":" 2900","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2901","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) &, true, false>"},
{"lineNum":" 2902","line":"{"},
{"lineNum":" 2903","line":"    typedef _Class& _ClassType;"},
{"lineNum":" 2904","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2905","line":"    typedef _Rp (_FnType) (_Param..., ...);"},
{"lineNum":" 2906","line":"};"},
{"lineNum":" 2907","line":""},
{"lineNum":" 2908","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2909","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const&, true, false>"},
{"lineNum":" 2910","line":"{"},
{"lineNum":" 2911","line":"    typedef _Class const& _ClassType;"},
{"lineNum":" 2912","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2913","line":"    typedef _Rp (_FnType) (_Param...);"},
{"lineNum":" 2914","line":"};"},
{"lineNum":" 2915","line":""},
{"lineNum":" 2916","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2917","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const&, true, false>"},
{"lineNum":" 2918","line":"{"},
{"lineNum":" 2919","line":"    typedef _Class const& _ClassType;"},
{"lineNum":" 2920","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2921","line":"    typedef _Rp (_FnType) (_Param..., ...);"},
{"lineNum":" 2922","line":"};"},
{"lineNum":" 2923","line":""},
{"lineNum":" 2924","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2925","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile&, true, false>"},
{"lineNum":" 2926","line":"{"},
{"lineNum":" 2927","line":"    typedef _Class volatile& _ClassType;"},
{"lineNum":" 2928","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2929","line":"    typedef _Rp (_FnType) (_Param...);"},
{"lineNum":" 2930","line":"};"},
{"lineNum":" 2931","line":""},
{"lineNum":" 2932","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2933","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile&, true, false>"},
{"lineNum":" 2934","line":"{"},
{"lineNum":" 2935","line":"    typedef _Class volatile& _ClassType;"},
{"lineNum":" 2936","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2937","line":"    typedef _Rp (_FnType) (_Param..., ...);"},
{"lineNum":" 2938","line":"};"},
{"lineNum":" 2939","line":""},
{"lineNum":" 2940","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2941","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile&, true, false>"},
{"lineNum":" 2942","line":"{"},
{"lineNum":" 2943","line":"    typedef _Class const volatile& _ClassType;"},
{"lineNum":" 2944","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2945","line":"    typedef _Rp (_FnType) (_Param...);"},
{"lineNum":" 2946","line":"};"},
{"lineNum":" 2947","line":""},
{"lineNum":" 2948","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2949","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile&, true, false>"},
{"lineNum":" 2950","line":"{"},
{"lineNum":" 2951","line":"    typedef _Class const volatile& _ClassType;"},
{"lineNum":" 2952","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2953","line":"    typedef _Rp (_FnType) (_Param..., ...);"},
{"lineNum":" 2954","line":"};"},
{"lineNum":" 2955","line":""},
{"lineNum":" 2956","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2957","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) &&, true, false>"},
{"lineNum":" 2958","line":"{"},
{"lineNum":" 2959","line":"    typedef _Class&& _ClassType;"},
{"lineNum":" 2960","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2961","line":"    typedef _Rp (_FnType) (_Param...);"},
{"lineNum":" 2962","line":"};"},
{"lineNum":" 2963","line":""},
{"lineNum":" 2964","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2965","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) &&, true, false>"},
{"lineNum":" 2966","line":"{"},
{"lineNum":" 2967","line":"    typedef _Class&& _ClassType;"},
{"lineNum":" 2968","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2969","line":"    typedef _Rp (_FnType) (_Param..., ...);"},
{"lineNum":" 2970","line":"};"},
{"lineNum":" 2971","line":""},
{"lineNum":" 2972","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2973","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const&&, true, false>"},
{"lineNum":" 2974","line":"{"},
{"lineNum":" 2975","line":"    typedef _Class const&& _ClassType;"},
{"lineNum":" 2976","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2977","line":"    typedef _Rp (_FnType) (_Param...);"},
{"lineNum":" 2978","line":"};"},
{"lineNum":" 2979","line":""},
{"lineNum":" 2980","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2981","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const&&, true, false>"},
{"lineNum":" 2982","line":"{"},
{"lineNum":" 2983","line":"    typedef _Class const&& _ClassType;"},
{"lineNum":" 2984","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2985","line":"    typedef _Rp (_FnType) (_Param..., ...);"},
{"lineNum":" 2986","line":"};"},
{"lineNum":" 2987","line":""},
{"lineNum":" 2988","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2989","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile&&, true, false>"},
{"lineNum":" 2990","line":"{"},
{"lineNum":" 2991","line":"    typedef _Class volatile&& _ClassType;"},
{"lineNum":" 2992","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 2993","line":"    typedef _Rp (_FnType) (_Param...);"},
{"lineNum":" 2994","line":"};"},
{"lineNum":" 2995","line":""},
{"lineNum":" 2996","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 2997","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile&&, true, false>"},
{"lineNum":" 2998","line":"{"},
{"lineNum":" 2999","line":"    typedef _Class volatile&& _ClassType;"},
{"lineNum":" 3000","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 3001","line":"    typedef _Rp (_FnType) (_Param..., ...);"},
{"lineNum":" 3002","line":"};"},
{"lineNum":" 3003","line":""},
{"lineNum":" 3004","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 3005","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile&&, true, false>"},
{"lineNum":" 3006","line":"{"},
{"lineNum":" 3007","line":"    typedef _Class const volatile&& _ClassType;"},
{"lineNum":" 3008","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 3009","line":"    typedef _Rp (_FnType) (_Param...);"},
{"lineNum":" 3010","line":"};"},
{"lineNum":" 3011","line":""},
{"lineNum":" 3012","line":"template <class _Rp, class _Class, class ..._Param>"},
{"lineNum":" 3013","line":"struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile&&, true, false>"},
{"lineNum":" 3014","line":"{"},
{"lineNum":" 3015","line":"    typedef _Class const volatile&& _ClassType;"},
{"lineNum":" 3016","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 3017","line":"    typedef _Rp (_FnType) (_Param..., ...);"},
{"lineNum":" 3018","line":"};"},
{"lineNum":" 3019","line":""},
{"lineNum":" 3020","line":"#endif // __has_feature(cxx_reference_qualified_functions) || defined(_LIBCPP_COMPILER_GCC)"},
{"lineNum":" 3021","line":""},
{"lineNum":" 3022","line":""},
{"lineNum":" 3023","line":"template <class _Rp, class _Class>"},
{"lineNum":" 3024","line":"struct __member_pointer_traits_imp<_Rp _Class::*, false, true>"},
{"lineNum":" 3025","line":"{"},
{"lineNum":" 3026","line":"    typedef _Class _ClassType;"},
{"lineNum":" 3027","line":"    typedef _Rp _ReturnType;"},
{"lineNum":" 3028","line":"};"},
{"lineNum":" 3029","line":""},
{"lineNum":" 3030","line":"template <class _MP>"},
{"lineNum":" 3031","line":"struct __member_pointer_traits"},
{"lineNum":" 3032","line":"    : public __member_pointer_traits_imp<typename remove_cv<_MP>::type,"},
{"lineNum":" 3033","line":"                    is_member_function_pointer<_MP>::value,"},
{"lineNum":" 3034","line":"                    is_member_object_pointer<_MP>::value>"},
{"lineNum":" 3035","line":"{"},
{"lineNum":" 3036","line":"//     typedef ... _ClassType;"},
{"lineNum":" 3037","line":"//     typedef ... _ReturnType;"},
{"lineNum":" 3038","line":"//     typedef ... _FnType;"},
{"lineNum":" 3039","line":"};"},
{"lineNum":" 3040","line":""},
{"lineNum":" 3041","line":""},
{"lineNum":" 3042","line":"template <class _DecayedFp>"},
{"lineNum":" 3043","line":"struct __member_pointer_class_type {};"},
{"lineNum":" 3044","line":""},
{"lineNum":" 3045","line":"template <class _Ret, class _ClassType>"},
{"lineNum":" 3046","line":"struct __member_pointer_class_type<_Ret _ClassType::*> {"},
{"lineNum":" 3047","line":"  typedef _ClassType type;"},
{"lineNum":" 3048","line":"};"},
{"lineNum":" 3049","line":""},
{"lineNum":" 3050","line":"// template <class T, class... Args> struct is_constructible;"},
{"lineNum":" 3051","line":""},
{"lineNum":" 3052","line":"#if defined(_LIBCPP_COMPILER_GCC) && _GNUC_VER_NEW >= 10000"},
{"lineNum":" 3053","line":"# define _LIBCPP_GCC_SUPPORTS_IS_CONSTRUCTIBLE"},
{"lineNum":" 3054","line":"#endif"},
{"lineNum":" 3055","line":""},
{"lineNum":" 3056","line":"#if !defined(_LIBCPP_CXX03_LANG) && !__has_feature(is_constructible) && !defined(_LIBCPP_GCC_SUPPORTS_IS_CONSTRUCTIBLE)"},
{"lineNum":" 3057","line":""},
{"lineNum":" 3058","line":"template <class _Tp, class... _Args>"},
{"lineNum":" 3059","line":"struct __libcpp_is_constructible;"},
{"lineNum":" 3060","line":""},
{"lineNum":" 3061","line":"template <class _To, class _From>"},
{"lineNum":" 3062","line":"struct __is_invalid_base_to_derived_cast {"},
{"lineNum":" 3063","line":"  static_assert(is_reference<_To>::value, \"Wrong specialization\");"},
{"lineNum":" 3064","line":"  using _RawFrom = __uncvref_t<_From>;"},
{"lineNum":" 3065","line":"  using _RawTo = __uncvref_t<_To>;"},
{"lineNum":" 3066","line":"  static const bool value = _And<"},
{"lineNum":" 3067","line":"        _IsNotSame<_RawFrom, _RawTo>,"},
{"lineNum":" 3068","line":"        is_base_of<_RawFrom, _RawTo>,"},
{"lineNum":" 3069","line":"        _Not<__libcpp_is_constructible<_RawTo, _From>>"},
{"lineNum":" 3070","line":"  >::value;"},
{"lineNum":" 3071","line":"};"},
{"lineNum":" 3072","line":""},
{"lineNum":" 3073","line":"template <class _To, class _From>"},
{"lineNum":" 3074","line":"struct __is_invalid_lvalue_to_rvalue_cast : false_type {"},
{"lineNum":" 3075","line":"  static_assert(is_reference<_To>::value, \"Wrong specialization\");"},
{"lineNum":" 3076","line":"};"},
{"lineNum":" 3077","line":""},
{"lineNum":" 3078","line":"template <class _ToRef, class _FromRef>"},
{"lineNum":" 3079","line":"struct __is_invalid_lvalue_to_rvalue_cast<_ToRef&&, _FromRef&> {"},
{"lineNum":" 3080","line":"  using _RawFrom = __uncvref_t<_FromRef>;"},
{"lineNum":" 3081","line":"  using _RawTo = __uncvref_t<_ToRef>;"},
{"lineNum":" 3082","line":"  static const bool value = _And<"},
{"lineNum":" 3083","line":"      _Not<is_function<_RawTo>>,"},
{"lineNum":" 3084","line":"      _Or<"},
{"lineNum":" 3085","line":"        _IsSame<_RawFrom, _RawTo>,"},
{"lineNum":" 3086","line":"        is_base_of<_RawTo, _RawFrom>>"},
{"lineNum":" 3087","line":"    >::value;"},
{"lineNum":" 3088","line":"};"},
{"lineNum":" 3089","line":""},
{"lineNum":" 3090","line":"struct __is_constructible_helper"},
{"lineNum":" 3091","line":"{"},
{"lineNum":" 3092","line":"    template <class _To>"},
{"lineNum":" 3093","line":"    static void __eat(_To);"},
{"lineNum":" 3094","line":""},
{"lineNum":" 3095","line":"    // This overload is needed to work around a Clang bug that disallows"},
{"lineNum":" 3096","line":"    // static_cast<T&&>(e) for non-reference-compatible types."},
{"lineNum":" 3097","line":"    // Example: static_cast<int&&>(declval<double>());"},
{"lineNum":" 3098","line":"    // NOTE: The static_cast implementation below is required to support"},
{"lineNum":" 3099","line":"    //  classes with explicit conversion operators."},
{"lineNum":" 3100","line":"    template <class _To, class _From,"},
{"lineNum":" 3101","line":"              class = decltype(__eat<_To>(declval<_From>()))>"},
{"lineNum":" 3102","line":"    static true_type __test_cast(int);"},
{"lineNum":" 3103","line":""},
{"lineNum":" 3104","line":"    template <class _To, class _From,"},
{"lineNum":" 3105","line":"              class = decltype(static_cast<_To>(declval<_From>()))>"},
{"lineNum":" 3106","line":"    static integral_constant<bool,"},
{"lineNum":" 3107","line":"        !__is_invalid_base_to_derived_cast<_To, _From>::value &&"},
{"lineNum":" 3108","line":"        !__is_invalid_lvalue_to_rvalue_cast<_To, _From>::value"},
{"lineNum":" 3109","line":"    > __test_cast(long);"},
{"lineNum":" 3110","line":""},
{"lineNum":" 3111","line":"    template <class, class>"},
{"lineNum":" 3112","line":"    static false_type __test_cast(...);"},
{"lineNum":" 3113","line":""},
{"lineNum":" 3114","line":"    template <class _Tp, class ..._Args,"},
{"lineNum":" 3115","line":"        class = decltype(_Tp(declval<_Args>()...))>"},
{"lineNum":" 3116","line":"    static true_type __test_nary(int);"},
{"lineNum":" 3117","line":"    template <class _Tp, class...>"},
{"lineNum":" 3118","line":"    static false_type __test_nary(...);"},
{"lineNum":" 3119","line":""},
{"lineNum":" 3120","line":"    template <class _Tp, class _A0, class = decltype(::new _Tp(declval<_A0>()))>"},
{"lineNum":" 3121","line":"    static is_destructible<_Tp> __test_unary(int);"},
{"lineNum":" 3122","line":"    template <class, class>"},
{"lineNum":" 3123","line":"    static false_type __test_unary(...);"},
{"lineNum":" 3124","line":"};"},
{"lineNum":" 3125","line":""},
{"lineNum":" 3126","line":"template <class _Tp, bool = is_void<_Tp>::value>"},
{"lineNum":" 3127","line":"struct __is_default_constructible"},
{"lineNum":" 3128","line":"    : decltype(__is_constructible_helper::__test_nary<_Tp>(0))"},
{"lineNum":" 3129","line":"{};"},
{"lineNum":" 3130","line":""},
{"lineNum":" 3131","line":"template <class _Tp>"},
{"lineNum":" 3132","line":"struct __is_default_constructible<_Tp, true> : false_type {};"},
{"lineNum":" 3133","line":""},
{"lineNum":" 3134","line":"template <class _Tp>"},
{"lineNum":" 3135","line":"struct __is_default_constructible<_Tp[], false> : false_type {};"},
{"lineNum":" 3136","line":""},
{"lineNum":" 3137","line":"template <class _Tp, size_t _Nx>"},
{"lineNum":" 3138","line":"struct __is_default_constructible<_Tp[_Nx], false>"},
{"lineNum":" 3139","line":"    : __is_default_constructible<typename remove_all_extents<_Tp>::type>  {};"},
{"lineNum":" 3140","line":""},
{"lineNum":" 3141","line":"template <class _Tp, class... _Args>"},
{"lineNum":" 3142","line":"struct __libcpp_is_constructible"},
{"lineNum":" 3143","line":"{"},
{"lineNum":" 3144","line":"  static_assert(sizeof...(_Args) > 1, \"Wrong specialization\");"},
{"lineNum":" 3145","line":"  typedef decltype(__is_constructible_helper::__test_nary<_Tp, _Args...>(0))"},
{"lineNum":" 3146","line":"      type;"},
{"lineNum":" 3147","line":"};"},
{"lineNum":" 3148","line":""},
{"lineNum":" 3149","line":"template <class _Tp>"},
{"lineNum":" 3150","line":"struct __libcpp_is_constructible<_Tp> : __is_default_constructible<_Tp> {};"},
{"lineNum":" 3151","line":""},
{"lineNum":" 3152","line":"template <class _Tp, class _A0>"},
{"lineNum":" 3153","line":"struct __libcpp_is_constructible<_Tp, _A0>"},
{"lineNum":" 3154","line":"    : public decltype(__is_constructible_helper::__test_unary<_Tp, _A0>(0))"},
{"lineNum":" 3155","line":"{};"},
{"lineNum":" 3156","line":""},
{"lineNum":" 3157","line":"template <class _Tp, class _A0>"},
{"lineNum":" 3158","line":"struct __libcpp_is_constructible<_Tp&, _A0>"},
{"lineNum":" 3159","line":"    : public decltype(__is_constructible_helper::"},
{"lineNum":" 3160","line":"    __test_cast<_Tp&, _A0>(0))"},
{"lineNum":" 3161","line":"{};"},
{"lineNum":" 3162","line":""},
{"lineNum":" 3163","line":"template <class _Tp, class _A0>"},
{"lineNum":" 3164","line":"struct __libcpp_is_constructible<_Tp&&, _A0>"},
{"lineNum":" 3165","line":"    : public decltype(__is_constructible_helper::"},
{"lineNum":" 3166","line":"    __test_cast<_Tp&&, _A0>(0))"},
{"lineNum":" 3167","line":"{};"},
{"lineNum":" 3168","line":""},
{"lineNum":" 3169","line":"#endif"},
{"lineNum":" 3170","line":""},
{"lineNum":" 3171","line":"#if __has_feature(is_constructible) || defined(_LIBCPP_GCC_SUPPORTS_IS_CONSTRUCTIBLE)"},
{"lineNum":" 3172","line":"template <class _Tp, class ..._Args>"},
{"lineNum":" 3173","line":"struct _LIBCPP_TEMPLATE_VIS is_constructible"},
{"lineNum":" 3174","line":"    : public integral_constant<bool, __is_constructible(_Tp, _Args...)>"},
{"lineNum":" 3175","line":"    {};"},
{"lineNum":" 3176","line":"#else"},
{"lineNum":" 3177","line":"template <class _Tp, class... _Args>"},
{"lineNum":" 3178","line":"struct _LIBCPP_TEMPLATE_VIS is_constructible"},
{"lineNum":" 3179","line":"    : public __libcpp_is_constructible<_Tp, _Args...>::type {};"},
{"lineNum":" 3180","line":"#endif"},
{"lineNum":" 3181","line":""},
{"lineNum":" 3182","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3183","line":"template <class _Tp, class ..._Args>"},
{"lineNum":" 3184","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_constructible_v"},
{"lineNum":" 3185","line":"    = is_constructible<_Tp, _Args...>::value;"},
{"lineNum":" 3186","line":"#endif"},
{"lineNum":" 3187","line":""},
{"lineNum":" 3188","line":"// is_default_constructible"},
{"lineNum":" 3189","line":""},
{"lineNum":" 3190","line":"template <class _Tp>"},
{"lineNum":" 3191","line":"struct _LIBCPP_TEMPLATE_VIS is_default_constructible"},
{"lineNum":" 3192","line":"    : public is_constructible<_Tp>"},
{"lineNum":" 3193","line":"    {};"},
{"lineNum":" 3194","line":""},
{"lineNum":" 3195","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3196","line":"template <class _Tp>"},
{"lineNum":" 3197","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_default_constructible_v"},
{"lineNum":" 3198","line":"    = is_default_constructible<_Tp>::value;"},
{"lineNum":" 3199","line":"#endif"},
{"lineNum":" 3200","line":""},
{"lineNum":" 3201","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 3202","line":"// First of all, we can\'t implement this check in C++03 mode because the {}"},
{"lineNum":" 3203","line":"// default initialization syntax isn\'t valid."},
{"lineNum":" 3204","line":"// Second, we implement the trait in a funny manner with two defaulted template"},
{"lineNum":" 3205","line":"// arguments to workaround Clang\'s PR43454."},
{"lineNum":" 3206","line":"template <class _Tp>"},
{"lineNum":" 3207","line":"void __test_implicit_default_constructible(_Tp);"},
{"lineNum":" 3208","line":""},
{"lineNum":" 3209","line":"template <class _Tp, class = void, class = typename is_default_constructible<_Tp>::type>"},
{"lineNum":" 3210","line":"struct __is_implicitly_default_constructible"},
{"lineNum":" 3211","line":"    : false_type"},
{"lineNum":" 3212","line":"{ };"},
{"lineNum":" 3213","line":""},
{"lineNum":" 3214","line":"template <class _Tp>"},
{"lineNum":" 3215","line":"struct __is_implicitly_default_constructible<_Tp, decltype(__test_implicit_default_constructible<_Tp const&>({})), true_type>"},
{"lineNum":" 3216","line":"    : true_type"},
{"lineNum":" 3217","line":"{ };"},
{"lineNum":" 3218","line":""},
{"lineNum":" 3219","line":"template <class _Tp>"},
{"lineNum":" 3220","line":"struct __is_implicitly_default_constructible<_Tp, decltype(__test_implicit_default_constructible<_Tp const&>({})), false_type>"},
{"lineNum":" 3221","line":"    : false_type"},
{"lineNum":" 3222","line":"{ };"},
{"lineNum":" 3223","line":"#endif // !C++03"},
{"lineNum":" 3224","line":""},
{"lineNum":" 3225","line":"// is_copy_constructible"},
{"lineNum":" 3226","line":""},
{"lineNum":" 3227","line":"template <class _Tp>"},
{"lineNum":" 3228","line":"struct _LIBCPP_TEMPLATE_VIS is_copy_constructible"},
{"lineNum":" 3229","line":"    : public is_constructible<_Tp,"},
{"lineNum":" 3230","line":"                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};"},
{"lineNum":" 3231","line":""},
{"lineNum":" 3232","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3233","line":"template <class _Tp>"},
{"lineNum":" 3234","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_copy_constructible_v"},
{"lineNum":" 3235","line":"    = is_copy_constructible<_Tp>::value;"},
{"lineNum":" 3236","line":"#endif"},
{"lineNum":" 3237","line":""},
{"lineNum":" 3238","line":"// is_move_constructible"},
{"lineNum":" 3239","line":""},
{"lineNum":" 3240","line":"template <class _Tp>"},
{"lineNum":" 3241","line":"struct _LIBCPP_TEMPLATE_VIS is_move_constructible"},
{"lineNum":" 3242","line":"    : public is_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>"},
{"lineNum":" 3243","line":"    {};"},
{"lineNum":" 3244","line":""},
{"lineNum":" 3245","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3246","line":"template <class _Tp>"},
{"lineNum":" 3247","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_move_constructible_v"},
{"lineNum":" 3248","line":"    = is_move_constructible<_Tp>::value;"},
{"lineNum":" 3249","line":"#endif"},
{"lineNum":" 3250","line":""},
{"lineNum":" 3251","line":"// is_trivially_constructible"},
{"lineNum":" 3252","line":""},
{"lineNum":" 3253","line":"#if __has_feature(is_trivially_constructible) || _GNUC_VER >= 501"},
{"lineNum":" 3254","line":""},
{"lineNum":" 3255","line":"template <class _Tp, class... _Args>"},
{"lineNum":" 3256","line":"struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible"},
{"lineNum":" 3257","line":"    : integral_constant<bool, __is_trivially_constructible(_Tp, _Args...)>"},
{"lineNum":" 3258","line":"{"},
{"lineNum":" 3259","line":"};"},
{"lineNum":" 3260","line":""},
{"lineNum":" 3261","line":"#else  // !__has_feature(is_trivially_constructible)"},
{"lineNum":" 3262","line":""},
{"lineNum":" 3263","line":"template <class _Tp, class... _Args>"},
{"lineNum":" 3264","line":"struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible"},
{"lineNum":" 3265","line":"    : false_type"},
{"lineNum":" 3266","line":"{"},
{"lineNum":" 3267","line":"};"},
{"lineNum":" 3268","line":""},
{"lineNum":" 3269","line":"template <class _Tp>"},
{"lineNum":" 3270","line":"struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp>"},
{"lineNum":" 3271","line":"#if __has_feature(has_trivial_constructor) || defined(_LIBCPP_COMPILER_GCC)"},
{"lineNum":" 3272","line":"    : integral_constant<bool, __has_trivial_constructor(_Tp)>"},
{"lineNum":" 3273","line":"#else"},
{"lineNum":" 3274","line":"    : integral_constant<bool, is_scalar<_Tp>::value>"},
{"lineNum":" 3275","line":"#endif"},
{"lineNum":" 3276","line":"{"},
{"lineNum":" 3277","line":"};"},
{"lineNum":" 3278","line":""},
{"lineNum":" 3279","line":"template <class _Tp>"},
{"lineNum":" 3280","line":"struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, _Tp&&>"},
{"lineNum":" 3281","line":"    : integral_constant<bool, is_scalar<_Tp>::value>"},
{"lineNum":" 3282","line":"{"},
{"lineNum":" 3283","line":"};"},
{"lineNum":" 3284","line":""},
{"lineNum":" 3285","line":"template <class _Tp>"},
{"lineNum":" 3286","line":"struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, const _Tp&>"},
{"lineNum":" 3287","line":"    : integral_constant<bool, is_scalar<_Tp>::value>"},
{"lineNum":" 3288","line":"{"},
{"lineNum":" 3289","line":"};"},
{"lineNum":" 3290","line":""},
{"lineNum":" 3291","line":"template <class _Tp>"},
{"lineNum":" 3292","line":"struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, _Tp&>"},
{"lineNum":" 3293","line":"    : integral_constant<bool, is_scalar<_Tp>::value>"},
{"lineNum":" 3294","line":"{"},
{"lineNum":" 3295","line":"};"},
{"lineNum":" 3296","line":""},
{"lineNum":" 3297","line":"#endif // !__has_feature(is_trivially_constructible)"},
{"lineNum":" 3298","line":""},
{"lineNum":" 3299","line":""},
{"lineNum":" 3300","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3301","line":"template <class _Tp, class... _Args>"},
{"lineNum":" 3302","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_constructible_v"},
{"lineNum":" 3303","line":"    = is_trivially_constructible<_Tp, _Args...>::value;"},
{"lineNum":" 3304","line":"#endif"},
{"lineNum":" 3305","line":""},
{"lineNum":" 3306","line":"// is_trivially_default_constructible"},
{"lineNum":" 3307","line":""},
{"lineNum":" 3308","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_default_constructible"},
{"lineNum":" 3309","line":"    : public is_trivially_constructible<_Tp>"},
{"lineNum":" 3310","line":"    {};"},
{"lineNum":" 3311","line":""},
{"lineNum":" 3312","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3313","line":"template <class _Tp>"},
{"lineNum":" 3314","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_default_constructible_v"},
{"lineNum":" 3315","line":"    = is_trivially_default_constructible<_Tp>::value;"},
{"lineNum":" 3316","line":"#endif"},
{"lineNum":" 3317","line":""},
{"lineNum":" 3318","line":"// is_trivially_copy_constructible"},
{"lineNum":" 3319","line":""},
{"lineNum":" 3320","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_copy_constructible"},
{"lineNum":" 3321","line":"    : public is_trivially_constructible<_Tp, typename add_lvalue_reference<const _Tp>::type>"},
{"lineNum":" 3322","line":"    {};"},
{"lineNum":" 3323","line":""},
{"lineNum":" 3324","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3325","line":"template <class _Tp>"},
{"lineNum":" 3326","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_copy_constructible_v"},
{"lineNum":" 3327","line":"    = is_trivially_copy_constructible<_Tp>::value;"},
{"lineNum":" 3328","line":"#endif"},
{"lineNum":" 3329","line":""},
{"lineNum":" 3330","line":"// is_trivially_move_constructible"},
{"lineNum":" 3331","line":""},
{"lineNum":" 3332","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_move_constructible"},
{"lineNum":" 3333","line":"    : public is_trivially_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>"},
{"lineNum":" 3334","line":"    {};"},
{"lineNum":" 3335","line":""},
{"lineNum":" 3336","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3337","line":"template <class _Tp>"},
{"lineNum":" 3338","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_move_constructible_v"},
{"lineNum":" 3339","line":"    = is_trivially_move_constructible<_Tp>::value;"},
{"lineNum":" 3340","line":"#endif"},
{"lineNum":" 3341","line":""},
{"lineNum":" 3342","line":"// is_trivially_assignable"},
{"lineNum":" 3343","line":""},
{"lineNum":" 3344","line":"#if __has_feature(is_trivially_assignable) || _GNUC_VER >= 501"},
{"lineNum":" 3345","line":""},
{"lineNum":" 3346","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 3347","line":"struct is_trivially_assignable"},
{"lineNum":" 3348","line":"    : integral_constant<bool, __is_trivially_assignable(_Tp, _Arg)>"},
{"lineNum":" 3349","line":"{"},
{"lineNum":" 3350","line":"};"},
{"lineNum":" 3351","line":""},
{"lineNum":" 3352","line":"#else  // !__has_feature(is_trivially_assignable)"},
{"lineNum":" 3353","line":""},
{"lineNum":" 3354","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 3355","line":"struct is_trivially_assignable"},
{"lineNum":" 3356","line":"    : public false_type {};"},
{"lineNum":" 3357","line":""},
{"lineNum":" 3358","line":"template <class _Tp>"},
{"lineNum":" 3359","line":"struct is_trivially_assignable<_Tp&, _Tp>"},
{"lineNum":" 3360","line":"    : integral_constant<bool, is_scalar<_Tp>::value> {};"},
{"lineNum":" 3361","line":""},
{"lineNum":" 3362","line":"template <class _Tp>"},
{"lineNum":" 3363","line":"struct is_trivially_assignable<_Tp&, _Tp&>"},
{"lineNum":" 3364","line":"    : integral_constant<bool, is_scalar<_Tp>::value> {};"},
{"lineNum":" 3365","line":""},
{"lineNum":" 3366","line":"template <class _Tp>"},
{"lineNum":" 3367","line":"struct is_trivially_assignable<_Tp&, const _Tp&>"},
{"lineNum":" 3368","line":"    : integral_constant<bool, is_scalar<_Tp>::value> {};"},
{"lineNum":" 3369","line":""},
{"lineNum":" 3370","line":"template <class _Tp>"},
{"lineNum":" 3371","line":"struct is_trivially_assignable<_Tp&, _Tp&&>"},
{"lineNum":" 3372","line":"    : integral_constant<bool, is_scalar<_Tp>::value> {};"},
{"lineNum":" 3373","line":""},
{"lineNum":" 3374","line":"#endif // !__has_feature(is_trivially_assignable)"},
{"lineNum":" 3375","line":""},
{"lineNum":" 3376","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3377","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 3378","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_assignable_v"},
{"lineNum":" 3379","line":"    = is_trivially_assignable<_Tp, _Arg>::value;"},
{"lineNum":" 3380","line":"#endif"},
{"lineNum":" 3381","line":""},
{"lineNum":" 3382","line":"// is_trivially_copy_assignable"},
{"lineNum":" 3383","line":""},
{"lineNum":" 3384","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_copy_assignable"},
{"lineNum":" 3385","line":"    : public is_trivially_assignable<typename add_lvalue_reference<_Tp>::type,"},
{"lineNum":" 3386","line":"                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};"},
{"lineNum":" 3387","line":""},
{"lineNum":" 3388","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3389","line":"template <class _Tp>"},
{"lineNum":" 3390","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_copy_assignable_v"},
{"lineNum":" 3391","line":"    = is_trivially_copy_assignable<_Tp>::value;"},
{"lineNum":" 3392","line":"#endif"},
{"lineNum":" 3393","line":""},
{"lineNum":" 3394","line":"// is_trivially_move_assignable"},
{"lineNum":" 3395","line":""},
{"lineNum":" 3396","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_move_assignable"},
{"lineNum":" 3397","line":"    : public is_trivially_assignable<typename add_lvalue_reference<_Tp>::type,"},
{"lineNum":" 3398","line":"                                     typename add_rvalue_reference<_Tp>::type>"},
{"lineNum":" 3399","line":"    {};"},
{"lineNum":" 3400","line":""},
{"lineNum":" 3401","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3402","line":"template <class _Tp>"},
{"lineNum":" 3403","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_move_assignable_v"},
{"lineNum":" 3404","line":"    = is_trivially_move_assignable<_Tp>::value;"},
{"lineNum":" 3405","line":"#endif"},
{"lineNum":" 3406","line":""},
{"lineNum":" 3407","line":"// is_trivially_destructible"},
{"lineNum":" 3408","line":""},
{"lineNum":" 3409","line":"#if __has_keyword(__is_trivially_destructible)"},
{"lineNum":" 3410","line":""},
{"lineNum":" 3411","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible"},
{"lineNum":" 3412","line":"    : public integral_constant<bool, __is_trivially_destructible(_Tp)> {};"},
{"lineNum":" 3413","line":""},
{"lineNum":" 3414","line":"#elif __has_feature(has_trivial_destructor) || defined(_LIBCPP_COMPILER_GCC)"},
{"lineNum":" 3415","line":""},
{"lineNum":" 3416","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible"},
{"lineNum":" 3417","line":"    : public integral_constant<bool, is_destructible<_Tp>::value && __has_trivial_destructor(_Tp)> {};"},
{"lineNum":" 3418","line":""},
{"lineNum":" 3419","line":"#else"},
{"lineNum":" 3420","line":""},
{"lineNum":" 3421","line":"template <class _Tp> struct __libcpp_trivial_destructor"},
{"lineNum":" 3422","line":"    : public integral_constant<bool, is_scalar<_Tp>::value ||"},
{"lineNum":" 3423","line":"                                     is_reference<_Tp>::value> {};"},
{"lineNum":" 3424","line":""},
{"lineNum":" 3425","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible"},
{"lineNum":" 3426","line":"    : public __libcpp_trivial_destructor<typename remove_all_extents<_Tp>::type> {};"},
{"lineNum":" 3427","line":""},
{"lineNum":" 3428","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible<_Tp[]>"},
{"lineNum":" 3429","line":"    : public false_type {};"},
{"lineNum":" 3430","line":""},
{"lineNum":" 3431","line":"#endif"},
{"lineNum":" 3432","line":""},
{"lineNum":" 3433","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3434","line":"template <class _Tp>"},
{"lineNum":" 3435","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_destructible_v"},
{"lineNum":" 3436","line":"    = is_trivially_destructible<_Tp>::value;"},
{"lineNum":" 3437","line":"#endif"},
{"lineNum":" 3438","line":""},
{"lineNum":" 3439","line":"// is_nothrow_constructible"},
{"lineNum":" 3440","line":""},
{"lineNum":" 3441","line":"#if __has_keyword(__is_nothrow_constructible)"},
{"lineNum":" 3442","line":""},
{"lineNum":" 3443","line":"template <class _Tp, class... _Args>"},
{"lineNum":" 3444","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible"},
{"lineNum":" 3445","line":"    : public integral_constant<bool, __is_nothrow_constructible(_Tp, _Args...)> {};"},
{"lineNum":" 3446","line":""},
{"lineNum":" 3447","line":"#else"},
{"lineNum":" 3448","line":""},
{"lineNum":" 3449","line":"template <bool, bool, class _Tp, class... _Args> struct __libcpp_is_nothrow_constructible;"},
{"lineNum":" 3450","line":""},
{"lineNum":" 3451","line":"template <class _Tp, class... _Args>"},
{"lineNum":" 3452","line":"struct __libcpp_is_nothrow_constructible</*is constructible*/true, /*is reference*/false, _Tp, _Args...>"},
{"lineNum":" 3453","line":"    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>"},
{"lineNum":" 3454","line":"{"},
{"lineNum":" 3455","line":"};"},
{"lineNum":" 3456","line":""},
{"lineNum":" 3457","line":"template <class _Tp>"},
{"lineNum":" 3458","line":"void __implicit_conversion_to(_Tp) noexcept { }"},
{"lineNum":" 3459","line":""},
{"lineNum":" 3460","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 3461","line":"struct __libcpp_is_nothrow_constructible</*is constructible*/true, /*is reference*/true, _Tp, _Arg>"},
{"lineNum":" 3462","line":"    : public integral_constant<bool, noexcept(_VSTD::__implicit_conversion_to<_Tp>(declval<_Arg>()))>"},
{"lineNum":" 3463","line":"{"},
{"lineNum":" 3464","line":"};"},
{"lineNum":" 3465","line":""},
{"lineNum":" 3466","line":"template <class _Tp, bool _IsReference, class... _Args>"},
{"lineNum":" 3467","line":"struct __libcpp_is_nothrow_constructible</*is constructible*/false, _IsReference, _Tp, _Args...>"},
{"lineNum":" 3468","line":"    : public false_type"},
{"lineNum":" 3469","line":"{"},
{"lineNum":" 3470","line":"};"},
{"lineNum":" 3471","line":""},
{"lineNum":" 3472","line":"template <class _Tp, class... _Args>"},
{"lineNum":" 3473","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible"},
{"lineNum":" 3474","line":"    : __libcpp_is_nothrow_constructible<is_constructible<_Tp, _Args...>::value, is_reference<_Tp>::value, _Tp, _Args...>"},
{"lineNum":" 3475","line":"{"},
{"lineNum":" 3476","line":"};"},
{"lineNum":" 3477","line":""},
{"lineNum":" 3478","line":"template <class _Tp, size_t _Ns>"},
{"lineNum":" 3479","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible<_Tp[_Ns]>"},
{"lineNum":" 3480","line":"    : __libcpp_is_nothrow_constructible<is_constructible<_Tp>::value, is_reference<_Tp>::value, _Tp>"},
{"lineNum":" 3481","line":"{"},
{"lineNum":" 3482","line":"};"},
{"lineNum":" 3483","line":""},
{"lineNum":" 3484","line":"#endif // _LIBCPP_HAS_NO_NOEXCEPT"},
{"lineNum":" 3485","line":""},
{"lineNum":" 3486","line":""},
{"lineNum":" 3487","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3488","line":"template <class _Tp, class ..._Args>"},
{"lineNum":" 3489","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_constructible_v"},
{"lineNum":" 3490","line":"    = is_nothrow_constructible<_Tp, _Args...>::value;"},
{"lineNum":" 3491","line":"#endif"},
{"lineNum":" 3492","line":""},
{"lineNum":" 3493","line":"// is_nothrow_default_constructible"},
{"lineNum":" 3494","line":""},
{"lineNum":" 3495","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_default_constructible"},
{"lineNum":" 3496","line":"    : public is_nothrow_constructible<_Tp>"},
{"lineNum":" 3497","line":"    {};"},
{"lineNum":" 3498","line":""},
{"lineNum":" 3499","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3500","line":"template <class _Tp>"},
{"lineNum":" 3501","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_default_constructible_v"},
{"lineNum":" 3502","line":"    = is_nothrow_default_constructible<_Tp>::value;"},
{"lineNum":" 3503","line":"#endif"},
{"lineNum":" 3504","line":""},
{"lineNum":" 3505","line":"// is_nothrow_copy_constructible"},
{"lineNum":" 3506","line":""},
{"lineNum":" 3507","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_copy_constructible"},
{"lineNum":" 3508","line":"    : public is_nothrow_constructible<_Tp,"},
{"lineNum":" 3509","line":"                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};"},
{"lineNum":" 3510","line":""},
{"lineNum":" 3511","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3512","line":"template <class _Tp>"},
{"lineNum":" 3513","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_copy_constructible_v"},
{"lineNum":" 3514","line":"    = is_nothrow_copy_constructible<_Tp>::value;"},
{"lineNum":" 3515","line":"#endif"},
{"lineNum":" 3516","line":""},
{"lineNum":" 3517","line":"// is_nothrow_move_constructible"},
{"lineNum":" 3518","line":""},
{"lineNum":" 3519","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_move_constructible"},
{"lineNum":" 3520","line":"    : public is_nothrow_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>"},
{"lineNum":" 3521","line":"    {};"},
{"lineNum":" 3522","line":""},
{"lineNum":" 3523","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3524","line":"template <class _Tp>"},
{"lineNum":" 3525","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_move_constructible_v"},
{"lineNum":" 3526","line":"    = is_nothrow_move_constructible<_Tp>::value;"},
{"lineNum":" 3527","line":"#endif"},
{"lineNum":" 3528","line":""},
{"lineNum":" 3529","line":"// is_nothrow_assignable"},
{"lineNum":" 3530","line":""},
{"lineNum":" 3531","line":"#if __has_keyword(__is_nothrow_assignable)"},
{"lineNum":" 3532","line":""},
{"lineNum":" 3533","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 3534","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_assignable"},
{"lineNum":" 3535","line":"    : public integral_constant<bool, __is_nothrow_assignable(_Tp, _Arg)> {};"},
{"lineNum":" 3536","line":""},
{"lineNum":" 3537","line":"#else"},
{"lineNum":" 3538","line":""},
{"lineNum":" 3539","line":"template <bool, class _Tp, class _Arg> struct __libcpp_is_nothrow_assignable;"},
{"lineNum":" 3540","line":""},
{"lineNum":" 3541","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 3542","line":"struct __libcpp_is_nothrow_assignable<false, _Tp, _Arg>"},
{"lineNum":" 3543","line":"    : public false_type"},
{"lineNum":" 3544","line":"{"},
{"lineNum":" 3545","line":"};"},
{"lineNum":" 3546","line":""},
{"lineNum":" 3547","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 3548","line":"struct __libcpp_is_nothrow_assignable<true, _Tp, _Arg>"},
{"lineNum":" 3549","line":"    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Arg>()) >"},
{"lineNum":" 3550","line":"{"},
{"lineNum":" 3551","line":"};"},
{"lineNum":" 3552","line":""},
{"lineNum":" 3553","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 3554","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_assignable"},
{"lineNum":" 3555","line":"    : public __libcpp_is_nothrow_assignable<is_assignable<_Tp, _Arg>::value, _Tp, _Arg>"},
{"lineNum":" 3556","line":"{"},
{"lineNum":" 3557","line":"};"},
{"lineNum":" 3558","line":""},
{"lineNum":" 3559","line":"#endif // _LIBCPP_HAS_NO_NOEXCEPT"},
{"lineNum":" 3560","line":""},
{"lineNum":" 3561","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3562","line":"template <class _Tp, class _Arg>"},
{"lineNum":" 3563","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_assignable_v"},
{"lineNum":" 3564","line":"    = is_nothrow_assignable<_Tp, _Arg>::value;"},
{"lineNum":" 3565","line":"#endif"},
{"lineNum":" 3566","line":""},
{"lineNum":" 3567","line":"// is_nothrow_copy_assignable"},
{"lineNum":" 3568","line":""},
{"lineNum":" 3569","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_copy_assignable"},
{"lineNum":" 3570","line":"    : public is_nothrow_assignable<typename add_lvalue_reference<_Tp>::type,"},
{"lineNum":" 3571","line":"                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};"},
{"lineNum":" 3572","line":""},
{"lineNum":" 3573","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3574","line":"template <class _Tp>"},
{"lineNum":" 3575","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_copy_assignable_v"},
{"lineNum":" 3576","line":"    = is_nothrow_copy_assignable<_Tp>::value;"},
{"lineNum":" 3577","line":"#endif"},
{"lineNum":" 3578","line":""},
{"lineNum":" 3579","line":"// is_nothrow_move_assignable"},
{"lineNum":" 3580","line":""},
{"lineNum":" 3581","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_move_assignable"},
{"lineNum":" 3582","line":"    : public is_nothrow_assignable<typename add_lvalue_reference<_Tp>::type,"},
{"lineNum":" 3583","line":"                                     typename add_rvalue_reference<_Tp>::type>"},
{"lineNum":" 3584","line":"    {};"},
{"lineNum":" 3585","line":""},
{"lineNum":" 3586","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3587","line":"template <class _Tp>"},
{"lineNum":" 3588","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_move_assignable_v"},
{"lineNum":" 3589","line":"    = is_nothrow_move_assignable<_Tp>::value;"},
{"lineNum":" 3590","line":"#endif"},
{"lineNum":" 3591","line":""},
{"lineNum":" 3592","line":"// is_nothrow_destructible"},
{"lineNum":" 3593","line":""},
{"lineNum":" 3594","line":"#if !defined(_LIBCPP_CXX03_LANG)"},
{"lineNum":" 3595","line":""},
{"lineNum":" 3596","line":"template <bool, class _Tp> struct __libcpp_is_nothrow_destructible;"},
{"lineNum":" 3597","line":""},
{"lineNum":" 3598","line":"template <class _Tp>"},
{"lineNum":" 3599","line":"struct __libcpp_is_nothrow_destructible<false, _Tp>"},
{"lineNum":" 3600","line":"    : public false_type"},
{"lineNum":" 3601","line":"{"},
{"lineNum":" 3602","line":"};"},
{"lineNum":" 3603","line":""},
{"lineNum":" 3604","line":"template <class _Tp>"},
{"lineNum":" 3605","line":"struct __libcpp_is_nothrow_destructible<true, _Tp>"},
{"lineNum":" 3606","line":"    : public integral_constant<bool, noexcept(declval<_Tp>().~_Tp()) >"},
{"lineNum":" 3607","line":"{"},
{"lineNum":" 3608","line":"};"},
{"lineNum":" 3609","line":""},
{"lineNum":" 3610","line":"template <class _Tp>"},
{"lineNum":" 3611","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible"},
{"lineNum":" 3612","line":"    : public __libcpp_is_nothrow_destructible<is_destructible<_Tp>::value, _Tp>"},
{"lineNum":" 3613","line":"{"},
{"lineNum":" 3614","line":"};"},
{"lineNum":" 3615","line":""},
{"lineNum":" 3616","line":"template <class _Tp, size_t _Ns>"},
{"lineNum":" 3617","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible<_Tp[_Ns]>"},
{"lineNum":" 3618","line":"    : public is_nothrow_destructible<_Tp>"},
{"lineNum":" 3619","line":"{"},
{"lineNum":" 3620","line":"};"},
{"lineNum":" 3621","line":""},
{"lineNum":" 3622","line":"template <class _Tp>"},
{"lineNum":" 3623","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible<_Tp&>"},
{"lineNum":" 3624","line":"    : public true_type"},
{"lineNum":" 3625","line":"{"},
{"lineNum":" 3626","line":"};"},
{"lineNum":" 3627","line":""},
{"lineNum":" 3628","line":"template <class _Tp>"},
{"lineNum":" 3629","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible<_Tp&&>"},
{"lineNum":" 3630","line":"    : public true_type"},
{"lineNum":" 3631","line":"{"},
{"lineNum":" 3632","line":"};"},
{"lineNum":" 3633","line":""},
{"lineNum":" 3634","line":"#else"},
{"lineNum":" 3635","line":""},
{"lineNum":" 3636","line":"template <class _Tp> struct __libcpp_nothrow_destructor"},
{"lineNum":" 3637","line":"    : public integral_constant<bool, is_scalar<_Tp>::value ||"},
{"lineNum":" 3638","line":"                                     is_reference<_Tp>::value> {};"},
{"lineNum":" 3639","line":""},
{"lineNum":" 3640","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible"},
{"lineNum":" 3641","line":"    : public __libcpp_nothrow_destructor<typename remove_all_extents<_Tp>::type> {};"},
{"lineNum":" 3642","line":""},
{"lineNum":" 3643","line":"template <class _Tp>"},
{"lineNum":" 3644","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible<_Tp[]>"},
{"lineNum":" 3645","line":"    : public false_type {};"},
{"lineNum":" 3646","line":""},
{"lineNum":" 3647","line":"#endif"},
{"lineNum":" 3648","line":""},
{"lineNum":" 3649","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3650","line":"template <class _Tp>"},
{"lineNum":" 3651","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_destructible_v"},
{"lineNum":" 3652","line":"    = is_nothrow_destructible<_Tp>::value;"},
{"lineNum":" 3653","line":"#endif"},
{"lineNum":" 3654","line":""},
{"lineNum":" 3655","line":"// is_pod"},
{"lineNum":" 3656","line":""},
{"lineNum":" 3657","line":"#if __has_feature(is_pod) || defined(_LIBCPP_COMPILER_GCC)"},
{"lineNum":" 3658","line":""},
{"lineNum":" 3659","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_pod"},
{"lineNum":" 3660","line":"    : public integral_constant<bool, __is_pod(_Tp)> {};"},
{"lineNum":" 3661","line":""},
{"lineNum":" 3662","line":"#else"},
{"lineNum":" 3663","line":""},
{"lineNum":" 3664","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_pod"},
{"lineNum":" 3665","line":"    : public integral_constant<bool, is_trivially_default_constructible<_Tp>::value   &&"},
{"lineNum":" 3666","line":"                                     is_trivially_copy_constructible<_Tp>::value      &&"},
{"lineNum":" 3667","line":"                                     is_trivially_copy_assignable<_Tp>::value    &&"},
{"lineNum":" 3668","line":"                                     is_trivially_destructible<_Tp>::value> {};"},
{"lineNum":" 3669","line":""},
{"lineNum":" 3670","line":"#endif"},
{"lineNum":" 3671","line":""},
{"lineNum":" 3672","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3673","line":"template <class _Tp>"},
{"lineNum":" 3674","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_pod_v"},
{"lineNum":" 3675","line":"    = is_pod<_Tp>::value;"},
{"lineNum":" 3676","line":"#endif"},
{"lineNum":" 3677","line":""},
{"lineNum":" 3678","line":"// is_literal_type;"},
{"lineNum":" 3679","line":""},
{"lineNum":" 3680","line":"#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_TYPE_TRAITS)"},
{"lineNum":" 3681","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS _LIBCPP_DEPRECATED_IN_CXX17 is_literal_type"},
{"lineNum":" 3682","line":"    : public integral_constant<bool, __is_literal_type(_Tp)>"},
{"lineNum":" 3683","line":"    {};"},
{"lineNum":" 3684","line":""},
{"lineNum":" 3685","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3686","line":"template <class _Tp>"},
{"lineNum":" 3687","line":"_LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_literal_type_v"},
{"lineNum":" 3688","line":"    = is_literal_type<_Tp>::value;"},
{"lineNum":" 3689","line":"#endif // _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3690","line":"#endif // _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_TYPE_TRAITS)"},
{"lineNum":" 3691","line":""},
{"lineNum":" 3692","line":"// is_standard_layout;"},
{"lineNum":" 3693","line":""},
{"lineNum":" 3694","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_standard_layout"},
{"lineNum":" 3695","line":"#if __has_feature(is_standard_layout) || defined(_LIBCPP_COMPILER_GCC)"},
{"lineNum":" 3696","line":"    : public integral_constant<bool, __is_standard_layout(_Tp)>"},
{"lineNum":" 3697","line":"#else"},
{"lineNum":" 3698","line":"    : integral_constant<bool, is_scalar<typename remove_all_extents<_Tp>::type>::value>"},
{"lineNum":" 3699","line":"#endif"},
{"lineNum":" 3700","line":"    {};"},
{"lineNum":" 3701","line":""},
{"lineNum":" 3702","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3703","line":"template <class _Tp>"},
{"lineNum":" 3704","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_standard_layout_v"},
{"lineNum":" 3705","line":"    = is_standard_layout<_Tp>::value;"},
{"lineNum":" 3706","line":"#endif"},
{"lineNum":" 3707","line":""},
{"lineNum":" 3708","line":"// is_trivially_copyable;"},
{"lineNum":" 3709","line":""},
{"lineNum":" 3710","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_copyable"},
{"lineNum":" 3711","line":"#if __has_feature(is_trivially_copyable)"},
{"lineNum":" 3712","line":"    : public integral_constant<bool, __is_trivially_copyable(_Tp)>"},
{"lineNum":" 3713","line":"#elif _GNUC_VER >= 501"},
{"lineNum":" 3714","line":"    : public integral_constant<bool, !is_volatile<_Tp>::value && __is_trivially_copyable(_Tp)>"},
{"lineNum":" 3715","line":"#else"},
{"lineNum":" 3716","line":"    : integral_constant<bool, is_scalar<typename remove_all_extents<_Tp>::type>::value>"},
{"lineNum":" 3717","line":"#endif"},
{"lineNum":" 3718","line":"    {};"},
{"lineNum":" 3719","line":""},
{"lineNum":" 3720","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3721","line":"template <class _Tp>"},
{"lineNum":" 3722","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_copyable_v"},
{"lineNum":" 3723","line":"    = is_trivially_copyable<_Tp>::value;"},
{"lineNum":" 3724","line":"#endif"},
{"lineNum":" 3725","line":""},
{"lineNum":" 3726","line":"// is_trivial;"},
{"lineNum":" 3727","line":""},
{"lineNum":" 3728","line":"template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivial"},
{"lineNum":" 3729","line":"#if __has_feature(is_trivial) || defined(_LIBCPP_COMPILER_GCC)"},
{"lineNum":" 3730","line":"    : public integral_constant<bool, __is_trivial(_Tp)>"},
{"lineNum":" 3731","line":"#else"},
{"lineNum":" 3732","line":"    : integral_constant<bool, is_trivially_copyable<_Tp>::value &&"},
{"lineNum":" 3733","line":"                                 is_trivially_default_constructible<_Tp>::value>"},
{"lineNum":" 3734","line":"#endif"},
{"lineNum":" 3735","line":"    {};"},
{"lineNum":" 3736","line":""},
{"lineNum":" 3737","line":"#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)"},
{"lineNum":" 3738","line":"template <class _Tp>"},
{"lineNum":" 3739","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivial_v"},
{"lineNum":" 3740","line":"    = is_trivial<_Tp>::value;"},
{"lineNum":" 3741","line":"#endif"},
{"lineNum":" 3742","line":""},
{"lineNum":" 3743","line":"template <class _Tp> struct __is_reference_wrapper_impl : public false_type {};"},
{"lineNum":" 3744","line":"template <class _Tp> struct __is_reference_wrapper_impl<reference_wrapper<_Tp> > : public true_type {};"},
{"lineNum":" 3745","line":"template <class _Tp> struct __is_reference_wrapper"},
{"lineNum":" 3746","line":"    : public __is_reference_wrapper_impl<typename remove_cv<_Tp>::type> {};"},
{"lineNum":" 3747","line":""},
{"lineNum":" 3748","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 3749","line":""},
{"lineNum":" 3750","line":"template <class _Fp, class _A0,"},
{"lineNum":" 3751","line":"         class _DecayFp = typename decay<_Fp>::type,"},
{"lineNum":" 3752","line":"         class _DecayA0 = typename decay<_A0>::type,"},
{"lineNum":" 3753","line":"         class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>"},
{"lineNum":" 3754","line":"using __enable_if_bullet1 = typename enable_if"},
{"lineNum":" 3755","line":"    <"},
{"lineNum":" 3756","line":"        is_member_function_pointer<_DecayFp>::value"},
{"lineNum":" 3757","line":"        && is_base_of<_ClassT, _DecayA0>::value"},
{"lineNum":" 3758","line":"    >::type;"},
{"lineNum":" 3759","line":""},
{"lineNum":" 3760","line":"template <class _Fp, class _A0,"},
{"lineNum":" 3761","line":"         class _DecayFp = typename decay<_Fp>::type,"},
{"lineNum":" 3762","line":"         class _DecayA0 = typename decay<_A0>::type>"},
{"lineNum":" 3763","line":"using __enable_if_bullet2 = typename enable_if"},
{"lineNum":" 3764","line":"    <"},
{"lineNum":" 3765","line":"        is_member_function_pointer<_DecayFp>::value"},
{"lineNum":" 3766","line":"        && __is_reference_wrapper<_DecayA0>::value"},
{"lineNum":" 3767","line":"    >::type;"},
{"lineNum":" 3768","line":""},
{"lineNum":" 3769","line":"template <class _Fp, class _A0,"},
{"lineNum":" 3770","line":"         class _DecayFp = typename decay<_Fp>::type,"},
{"lineNum":" 3771","line":"         class _DecayA0 = typename decay<_A0>::type,"},
{"lineNum":" 3772","line":"         class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>"},
{"lineNum":" 3773","line":"using __enable_if_bullet3 = typename enable_if"},
{"lineNum":" 3774","line":"    <"},
{"lineNum":" 3775","line":"        is_member_function_pointer<_DecayFp>::value"},
{"lineNum":" 3776","line":"        && !is_base_of<_ClassT, _DecayA0>::value"},
{"lineNum":" 3777","line":"        && !__is_reference_wrapper<_DecayA0>::value"},
{"lineNum":" 3778","line":"    >::type;"},
{"lineNum":" 3779","line":""},
{"lineNum":" 3780","line":"template <class _Fp, class _A0,"},
{"lineNum":" 3781","line":"         class _DecayFp = typename decay<_Fp>::type,"},
{"lineNum":" 3782","line":"         class _DecayA0 = typename decay<_A0>::type,"},
{"lineNum":" 3783","line":"         class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>"},
{"lineNum":" 3784","line":"using __enable_if_bullet4 = typename enable_if"},
{"lineNum":" 3785","line":"    <"},
{"lineNum":" 3786","line":"        is_member_object_pointer<_DecayFp>::value"},
{"lineNum":" 3787","line":"        && is_base_of<_ClassT, _DecayA0>::value"},
{"lineNum":" 3788","line":"    >::type;"},
{"lineNum":" 3789","line":""},
{"lineNum":" 3790","line":"template <class _Fp, class _A0,"},
{"lineNum":" 3791","line":"         class _DecayFp = typename decay<_Fp>::type,"},
{"lineNum":" 3792","line":"         class _DecayA0 = typename decay<_A0>::type>"},
{"lineNum":" 3793","line":"using __enable_if_bullet5 = typename enable_if"},
{"lineNum":" 3794","line":"    <"},
{"lineNum":" 3795","line":"        is_member_object_pointer<_DecayFp>::value"},
{"lineNum":" 3796","line":"        && __is_reference_wrapper<_DecayA0>::value"},
{"lineNum":" 3797","line":"    >::type;"},
{"lineNum":" 3798","line":""},
{"lineNum":" 3799","line":"template <class _Fp, class _A0,"},
{"lineNum":" 3800","line":"         class _DecayFp = typename decay<_Fp>::type,"},
{"lineNum":" 3801","line":"         class _DecayA0 = typename decay<_A0>::type,"},
{"lineNum":" 3802","line":"         class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>"},
{"lineNum":" 3803","line":"using __enable_if_bullet6 = typename enable_if"},
{"lineNum":" 3804","line":"    <"},
{"lineNum":" 3805","line":"        is_member_object_pointer<_DecayFp>::value"},
{"lineNum":" 3806","line":"        && !is_base_of<_ClassT, _DecayA0>::value"},
{"lineNum":" 3807","line":"        && !__is_reference_wrapper<_DecayA0>::value"},
{"lineNum":" 3808","line":"    >::type;"},
{"lineNum":" 3809","line":""},
{"lineNum":" 3810","line":"// __invoke forward declarations"},
{"lineNum":" 3811","line":""},
{"lineNum":" 3812","line":"// fall back - none of the bullets"},
{"lineNum":" 3813","line":""},
{"lineNum":" 3814","line":"#define _LIBCPP_INVOKE_RETURN(...) \\"},
{"lineNum":" 3815","line":"    noexcept(noexcept(__VA_ARGS__)) -> decltype(__VA_ARGS__) \\"},
{"lineNum":" 3816","line":"    { return __VA_ARGS__; }"},
{"lineNum":" 3817","line":""},
{"lineNum":" 3818","line":"template <class ..._Args>"},
{"lineNum":" 3819","line":"auto __invoke(__any, _Args&& ...__args) -> __nat;"},
{"lineNum":" 3820","line":""},
{"lineNum":" 3821","line":"template <class ..._Args>"},
{"lineNum":" 3822","line":"auto __invoke_constexpr(__any, _Args&& ...__args) -> __nat;"},
{"lineNum":" 3823","line":""},
{"lineNum":" 3824","line":"// bullets 1, 2 and 3"},
{"lineNum":" 3825","line":""},
{"lineNum":" 3826","line":"template <class _Fp, class _A0, class ..._Args,"},
{"lineNum":" 3827","line":"          class = __enable_if_bullet1<_Fp, _A0>>"},
{"lineNum":" 3828","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3829","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 auto"},
{"lineNum":" 3830","line":"__invoke(_Fp&& __f, _A0&& __a0, _Args&& ...__args)"},
{"lineNum":" 3831","line":"_LIBCPP_INVOKE_RETURN((static_cast<_A0&&>(__a0).*__f)(static_cast<_Args&&>(__args)...))"},
{"lineNum":" 3832","line":""},
{"lineNum":" 3833","line":"template <class _Fp, class _A0, class ..._Args,"},
{"lineNum":" 3834","line":"          class = __enable_if_bullet1<_Fp, _A0>>"},
{"lineNum":" 3835","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3836","line":"_LIBCPP_CONSTEXPR auto"},
{"lineNum":" 3837","line":"__invoke_constexpr(_Fp&& __f, _A0&& __a0, _Args&& ...__args)"},
{"lineNum":" 3838","line":"_LIBCPP_INVOKE_RETURN((static_cast<_A0&&>(__a0).*__f)(static_cast<_Args&&>(__args)...))"},
{"lineNum":" 3839","line":""},
{"lineNum":" 3840","line":"template <class _Fp, class _A0, class ..._Args,"},
{"lineNum":" 3841","line":"          class = __enable_if_bullet2<_Fp, _A0>>"},
{"lineNum":" 3842","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3843","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 auto"},
{"lineNum":" 3844","line":"__invoke(_Fp&& __f, _A0&& __a0, _Args&& ...__args)"},
{"lineNum":" 3845","line":"_LIBCPP_INVOKE_RETURN((__a0.get().*__f)(static_cast<_Args&&>(__args)...))"},
{"lineNum":" 3846","line":""},
{"lineNum":" 3847","line":"template <class _Fp, class _A0, class ..._Args,"},
{"lineNum":" 3848","line":"          class = __enable_if_bullet2<_Fp, _A0>>"},
{"lineNum":" 3849","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3850","line":"_LIBCPP_CONSTEXPR auto"},
{"lineNum":" 3851","line":"__invoke_constexpr(_Fp&& __f, _A0&& __a0, _Args&& ...__args)"},
{"lineNum":" 3852","line":"_LIBCPP_INVOKE_RETURN((__a0.get().*__f)(static_cast<_Args&&>(__args)...))"},
{"lineNum":" 3853","line":""},
{"lineNum":" 3854","line":"template <class _Fp, class _A0, class ..._Args,"},
{"lineNum":" 3855","line":"          class = __enable_if_bullet3<_Fp, _A0>>"},
{"lineNum":" 3856","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3857","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 auto"},
{"lineNum":" 3858","line":"__invoke(_Fp&& __f, _A0&& __a0, _Args&& ...__args)"},
{"lineNum":" 3859","line":"_LIBCPP_INVOKE_RETURN(((*static_cast<_A0&&>(__a0)).*__f)(static_cast<_Args&&>(__args)...))"},
{"lineNum":" 3860","line":""},
{"lineNum":" 3861","line":"template <class _Fp, class _A0, class ..._Args,"},
{"lineNum":" 3862","line":"          class = __enable_if_bullet3<_Fp, _A0>>"},
{"lineNum":" 3863","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3864","line":"_LIBCPP_CONSTEXPR auto"},
{"lineNum":" 3865","line":"__invoke_constexpr(_Fp&& __f, _A0&& __a0, _Args&& ...__args)"},
{"lineNum":" 3866","line":"_LIBCPP_INVOKE_RETURN(((*static_cast<_A0&&>(__a0)).*__f)(static_cast<_Args&&>(__args)...))"},
{"lineNum":" 3867","line":""},
{"lineNum":" 3868","line":"// bullets 4, 5 and 6"},
{"lineNum":" 3869","line":""},
{"lineNum":" 3870","line":"template <class _Fp, class _A0,"},
{"lineNum":" 3871","line":"          class = __enable_if_bullet4<_Fp, _A0>>"},
{"lineNum":" 3872","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3873","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 auto"},
{"lineNum":" 3874","line":"__invoke(_Fp&& __f, _A0&& __a0)"},
{"lineNum":" 3875","line":"_LIBCPP_INVOKE_RETURN(static_cast<_A0&&>(__a0).*__f)"},
{"lineNum":" 3876","line":""},
{"lineNum":" 3877","line":"template <class _Fp, class _A0,"},
{"lineNum":" 3878","line":"          class = __enable_if_bullet4<_Fp, _A0>>"},
{"lineNum":" 3879","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3880","line":"_LIBCPP_CONSTEXPR auto"},
{"lineNum":" 3881","line":"__invoke_constexpr(_Fp&& __f, _A0&& __a0)"},
{"lineNum":" 3882","line":"_LIBCPP_INVOKE_RETURN(static_cast<_A0&&>(__a0).*__f)"},
{"lineNum":" 3883","line":""},
{"lineNum":" 3884","line":"template <class _Fp, class _A0,"},
{"lineNum":" 3885","line":"          class = __enable_if_bullet5<_Fp, _A0>>"},
{"lineNum":" 3886","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3887","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 auto"},
{"lineNum":" 3888","line":"__invoke(_Fp&& __f, _A0&& __a0)"},
{"lineNum":" 3889","line":"_LIBCPP_INVOKE_RETURN(__a0.get().*__f)"},
{"lineNum":" 3890","line":""},
{"lineNum":" 3891","line":"template <class _Fp, class _A0,"},
{"lineNum":" 3892","line":"          class = __enable_if_bullet5<_Fp, _A0>>"},
{"lineNum":" 3893","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3894","line":"_LIBCPP_CONSTEXPR auto"},
{"lineNum":" 3895","line":"__invoke_constexpr(_Fp&& __f, _A0&& __a0)"},
{"lineNum":" 3896","line":"_LIBCPP_INVOKE_RETURN(__a0.get().*__f)"},
{"lineNum":" 3897","line":""},
{"lineNum":" 3898","line":"template <class _Fp, class _A0,"},
{"lineNum":" 3899","line":"          class = __enable_if_bullet6<_Fp, _A0>>"},
{"lineNum":" 3900","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3901","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 auto"},
{"lineNum":" 3902","line":"__invoke(_Fp&& __f, _A0&& __a0)"},
{"lineNum":" 3903","line":"_LIBCPP_INVOKE_RETURN((*static_cast<_A0&&>(__a0)).*__f)"},
{"lineNum":" 3904","line":""},
{"lineNum":" 3905","line":"template <class _Fp, class _A0,"},
{"lineNum":" 3906","line":"          class = __enable_if_bullet6<_Fp, _A0>>"},
{"lineNum":" 3907","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3908","line":"_LIBCPP_CONSTEXPR auto"},
{"lineNum":" 3909","line":"__invoke_constexpr(_Fp&& __f, _A0&& __a0)"},
{"lineNum":" 3910","line":"_LIBCPP_INVOKE_RETURN((*static_cast<_A0&&>(__a0)).*__f)"},
{"lineNum":" 3911","line":""},
{"lineNum":" 3912","line":"// bullet 7"},
{"lineNum":" 3913","line":""},
{"lineNum":" 3914","line":"template <class _Fp, class ..._Args>"},
{"lineNum":" 3915","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3916","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 auto"},
{"lineNum":" 3917","line":"__invoke(_Fp&& __f, _Args&& ...__args)"},
{"lineNum":" 3918","line":"_LIBCPP_INVOKE_RETURN(static_cast<_Fp&&>(__f)(static_cast<_Args&&>(__args)...))","class":"lineNoCov","hits":"0","possible_hits":"530",},
{"lineNum":" 3919","line":""},
{"lineNum":" 3920","line":"template <class _Fp, class ..._Args>"},
{"lineNum":" 3921","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 3922","line":"_LIBCPP_CONSTEXPR auto"},
{"lineNum":" 3923","line":"__invoke_constexpr(_Fp&& __f, _Args&& ...__args)"},
{"lineNum":" 3924","line":"_LIBCPP_INVOKE_RETURN(static_cast<_Fp&&>(__f)(static_cast<_Args&&>(__args)...))"},
{"lineNum":" 3925","line":""},
{"lineNum":" 3926","line":"#undef _LIBCPP_INVOKE_RETURN"},
{"lineNum":" 3927","line":""},
{"lineNum":" 3928","line":"// __invokable"},
{"lineNum":" 3929","line":"template <class _Ret, class _Fp, class ..._Args>"},
{"lineNum":" 3930","line":"struct __invokable_r"},
{"lineNum":" 3931","line":"{"},
{"lineNum":" 3932","line":"  template <class _XFp, class ..._XArgs>"},
{"lineNum":" 3933","line":"  static auto __try_call(int) -> decltype("},
{"lineNum":" 3934","line":"    _VSTD::__invoke(declval<_XFp>(), declval<_XArgs>()...));"},
{"lineNum":" 3935","line":"  template <class _XFp, class ..._XArgs>"},
{"lineNum":" 3936","line":"  static __nat __try_call(...);"},
{"lineNum":" 3937","line":""},
{"lineNum":" 3938","line":"  // FIXME: Check that _Ret, _Fp, and _Args... are all complete types, cv void,"},
{"lineNum":" 3939","line":"  // or incomplete array types as required by the standard."},
{"lineNum":" 3940","line":"  using _Result = decltype(__try_call<_Fp, _Args...>(0));"},
{"lineNum":" 3941","line":""},
{"lineNum":" 3942","line":"  using type ="},
{"lineNum":" 3943","line":"  typename conditional<"},
{"lineNum":" 3944","line":"      _IsNotSame<_Result, __nat>::value,"},
{"lineNum":" 3945","line":"      typename conditional<"},
{"lineNum":" 3946","line":"          is_void<_Ret>::value,"},
{"lineNum":" 3947","line":"          true_type,"},
{"lineNum":" 3948","line":"          is_convertible<_Result, _Ret>"},
{"lineNum":" 3949","line":"      >::type,"},
{"lineNum":" 3950","line":"      false_type"},
{"lineNum":" 3951","line":"  >::type;"},
{"lineNum":" 3952","line":"  static const bool value = type::value;"},
{"lineNum":" 3953","line":"};"},
{"lineNum":" 3954","line":"template <class _Fp, class ..._Args>"},
{"lineNum":" 3955","line":"using __invokable = __invokable_r<void, _Fp, _Args...>;"},
{"lineNum":" 3956","line":""},
{"lineNum":" 3957","line":"template <bool _IsInvokable, bool _IsCVVoid, class _Ret, class _Fp, class ..._Args>"},
{"lineNum":" 3958","line":"struct __nothrow_invokable_r_imp {"},
{"lineNum":" 3959","line":"  static const bool value = false;"},
{"lineNum":" 3960","line":"};"},
{"lineNum":" 3961","line":""},
{"lineNum":" 3962","line":"template <class _Ret, class _Fp, class ..._Args>"},
{"lineNum":" 3963","line":"struct __nothrow_invokable_r_imp<true, false, _Ret, _Fp, _Args...>"},
{"lineNum":" 3964","line":"{"},
{"lineNum":" 3965","line":"    typedef __nothrow_invokable_r_imp _ThisT;"},
{"lineNum":" 3966","line":""},
{"lineNum":" 3967","line":"    template <class _Tp>"},
{"lineNum":" 3968","line":"    static void __test_noexcept(_Tp) noexcept;"},
{"lineNum":" 3969","line":""},
{"lineNum":" 3970","line":"    static const bool value = noexcept(_ThisT::__test_noexcept<_Ret>("},
{"lineNum":" 3971","line":"        _VSTD::__invoke(declval<_Fp>(), declval<_Args>()...)));"},
{"lineNum":" 3972","line":"};"},
{"lineNum":" 3973","line":""},
{"lineNum":" 3974","line":"template <class _Ret, class _Fp, class ..._Args>"},
{"lineNum":" 3975","line":"struct __nothrow_invokable_r_imp<true, true, _Ret, _Fp, _Args...>"},
{"lineNum":" 3976","line":"{"},
{"lineNum":" 3977","line":"    static const bool value = noexcept("},
{"lineNum":" 3978","line":"        _VSTD::__invoke(declval<_Fp>(), declval<_Args>()...));"},
{"lineNum":" 3979","line":"};"},
{"lineNum":" 3980","line":""},
{"lineNum":" 3981","line":"template <class _Ret, class _Fp, class ..._Args>"},
{"lineNum":" 3982","line":"using __nothrow_invokable_r ="},
{"lineNum":" 3983","line":"    __nothrow_invokable_r_imp<"},
{"lineNum":" 3984","line":"            __invokable_r<_Ret, _Fp, _Args...>::value,"},
{"lineNum":" 3985","line":"            is_void<_Ret>::value,"},
{"lineNum":" 3986","line":"            _Ret, _Fp, _Args..."},
{"lineNum":" 3987","line":"    >;"},
{"lineNum":" 3988","line":""},
{"lineNum":" 3989","line":"template <class _Fp, class ..._Args>"},
{"lineNum":" 3990","line":"using __nothrow_invokable ="},
{"lineNum":" 3991","line":"    __nothrow_invokable_r_imp<"},
{"lineNum":" 3992","line":"            __invokable<_Fp, _Args...>::value,"},
{"lineNum":" 3993","line":"            true, void, _Fp, _Args..."},
{"lineNum":" 3994","line":"    >;"},
{"lineNum":" 3995","line":""},
{"lineNum":" 3996","line":"template <class _Fp, class ..._Args>"},
{"lineNum":" 3997","line":"struct __invoke_of"},
{"lineNum":" 3998","line":"    : public enable_if<"},
{"lineNum":" 3999","line":"        __invokable<_Fp, _Args...>::value,"},
{"lineNum":" 4000","line":"        typename __invokable_r<void, _Fp, _Args...>::_Result>"},
{"lineNum":" 4001","line":"{"},
{"lineNum":" 4002","line":"};"},
{"lineNum":" 4003","line":""},
{"lineNum":" 4004","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 4005","line":""},
{"lineNum":" 4006","line":"// result_of"},
{"lineNum":" 4007","line":""},
{"lineNum":" 4008","line":"#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_TYPE_TRAITS)"},
{"lineNum":" 4009","line":"template <class _Callable> class _LIBCPP_DEPRECATED_IN_CXX17 result_of;"},
{"lineNum":" 4010","line":""},
{"lineNum":" 4011","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 4012","line":""},
{"lineNum":" 4013","line":"template <class _Fp, class ..._Args>"},
{"lineNum":" 4014","line":"class _LIBCPP_TEMPLATE_VIS result_of<_Fp(_Args...)>"},
{"lineNum":" 4015","line":"    : public __invoke_of<_Fp, _Args...>"},
{"lineNum":" 4016","line":"{"},
{"lineNum":" 4017","line":"};"},
{"lineNum":" 4018","line":""},
{"lineNum":" 4019","line":"#else // C++03"},
{"lineNum":" 4020","line":""},
{"lineNum":" 4021","line":"template <class _Fn, bool, bool>"},
{"lineNum":" 4022","line":"class __result_of"},
{"lineNum":" 4023","line":"{"},
{"lineNum":" 4024","line":"};"},
{"lineNum":" 4025","line":""},
{"lineNum":" 4026","line":"template <class _Fn, class ..._Args>"},
{"lineNum":" 4027","line":"class __result_of<_Fn(_Args...), true, false>"},
{"lineNum":" 4028","line":"{"},
{"lineNum":" 4029","line":"public:"},
{"lineNum":" 4030","line":"    typedef decltype(declval<_Fn>()(declval<_Args>()...)) type;"},
{"lineNum":" 4031","line":"};"},
{"lineNum":" 4032","line":""},
{"lineNum":" 4033","line":"template <class _MP, class _Tp, bool _IsMemberFunctionPtr>"},
{"lineNum":" 4034","line":"struct __result_of_mp;"},
{"lineNum":" 4035","line":""},
{"lineNum":" 4036","line":"// member function pointer"},
{"lineNum":" 4037","line":""},
{"lineNum":" 4038","line":"template <class _MP, class _Tp>"},
{"lineNum":" 4039","line":"struct __result_of_mp<_MP, _Tp, true>"},
{"lineNum":" 4040","line":"{"},
{"lineNum":" 4041","line":"    using type = typename __member_pointer_traits<_MP>::_ReturnType;"},
{"lineNum":" 4042","line":"};"},
{"lineNum":" 4043","line":""},
{"lineNum":" 4044","line":"// member data pointer"},
{"lineNum":" 4045","line":""},
{"lineNum":" 4046","line":"template <class _MP, class _Tp, bool>"},
{"lineNum":" 4047","line":"struct __result_of_mdp;"},
{"lineNum":" 4048","line":""},
{"lineNum":" 4049","line":"template <class _Rp, class _Class, class _Tp>"},
{"lineNum":" 4050","line":"struct __result_of_mdp<_Rp _Class::*, _Tp, false>"},
{"lineNum":" 4051","line":"{"},
{"lineNum":" 4052","line":"    using type = typename __apply_cv<decltype(*declval<_Tp>()), _Rp>::type&;"},
{"lineNum":" 4053","line":"};"},
{"lineNum":" 4054","line":""},
{"lineNum":" 4055","line":"template <class _Rp, class _Class, class _Tp>"},
{"lineNum":" 4056","line":"struct __result_of_mdp<_Rp _Class::*, _Tp, true>"},
{"lineNum":" 4057","line":"{"},
{"lineNum":" 4058","line":"    using type = typename __apply_cv<_Tp, _Rp>::type&;"},
{"lineNum":" 4059","line":"};"},
{"lineNum":" 4060","line":""},
{"lineNum":" 4061","line":"template <class _Rp, class _Class, class _Tp>"},
{"lineNum":" 4062","line":"struct __result_of_mp<_Rp _Class::*, _Tp, false>"},
{"lineNum":" 4063","line":"    : public __result_of_mdp<_Rp _Class::*, _Tp,"},
{"lineNum":" 4064","line":"            is_base_of<_Class, typename remove_reference<_Tp>::type>::value>"},
{"lineNum":" 4065","line":"{"},
{"lineNum":" 4066","line":"};"},
{"lineNum":" 4067","line":""},
{"lineNum":" 4068","line":"template <class _Fn, class _Tp>"},
{"lineNum":" 4069","line":"class __result_of<_Fn(_Tp), false, true>  // _Fn must be member pointer"},
{"lineNum":" 4070","line":"    : public __result_of_mp<typename remove_reference<_Fn>::type,"},
{"lineNum":" 4071","line":"                            _Tp,"},
{"lineNum":" 4072","line":"                            is_member_function_pointer<typename remove_reference<_Fn>::type>::value>"},
{"lineNum":" 4073","line":"{"},
{"lineNum":" 4074","line":"};"},
{"lineNum":" 4075","line":""},
{"lineNum":" 4076","line":"template <class _Fn, class _Tp, class ..._Args>"},
{"lineNum":" 4077","line":"class __result_of<_Fn(_Tp, _Args...), false, true>  // _Fn must be member pointer"},
{"lineNum":" 4078","line":"    : public __result_of_mp<typename remove_reference<_Fn>::type,"},
{"lineNum":" 4079","line":"                            _Tp,"},
{"lineNum":" 4080","line":"                            is_member_function_pointer<typename remove_reference<_Fn>::type>::value>"},
{"lineNum":" 4081","line":"{"},
{"lineNum":" 4082","line":"};"},
{"lineNum":" 4083","line":""},
{"lineNum":" 4084","line":"template <class _Fn, class ..._Args>"},
{"lineNum":" 4085","line":"class _LIBCPP_TEMPLATE_VIS result_of<_Fn(_Args...)>"},
{"lineNum":" 4086","line":"    : public __result_of<_Fn(_Args...),"},
{"lineNum":" 4087","line":"                         is_class<typename remove_reference<_Fn>::type>::value ||"},
{"lineNum":" 4088","line":"                         is_function<typename remove_pointer<typename remove_reference<_Fn>::type>::type>::value,"},
{"lineNum":" 4089","line":"                         is_member_pointer<typename remove_reference<_Fn>::type>::value"},
{"lineNum":" 4090","line":"                        >"},
{"lineNum":" 4091","line":"{"},
{"lineNum":" 4092","line":"};"},
{"lineNum":" 4093","line":""},
{"lineNum":" 4094","line":"#endif // C++03"},
{"lineNum":" 4095","line":""},
{"lineNum":" 4096","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 4097","line":"template <class _Tp> using result_of_t _LIBCPP_DEPRECATED_IN_CXX17 = typename result_of<_Tp>::type;"},
{"lineNum":" 4098","line":"#endif // _LIBCPP_STD_VER > 11"},
{"lineNum":" 4099","line":"#endif // _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_TYPE_TRAITS)"},
{"lineNum":" 4100","line":""},
{"lineNum":" 4101","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 4102","line":""},
{"lineNum":" 4103","line":"// invoke_result"},
{"lineNum":" 4104","line":""},
{"lineNum":" 4105","line":"template <class _Fn, class... _Args>"},
{"lineNum":" 4106","line":"struct _LIBCPP_TEMPLATE_VIS invoke_result"},
{"lineNum":" 4107","line":"    : __invoke_of<_Fn, _Args...>"},
{"lineNum":" 4108","line":"{"},
{"lineNum":" 4109","line":"};"},
{"lineNum":" 4110","line":""},
{"lineNum":" 4111","line":"template <class _Fn, class... _Args>"},
{"lineNum":" 4112","line":"using invoke_result_t = typename invoke_result<_Fn, _Args...>::type;"},
{"lineNum":" 4113","line":""},
{"lineNum":" 4114","line":"// is_invocable"},
{"lineNum":" 4115","line":""},
{"lineNum":" 4116","line":"template <class _Fn, class ..._Args>"},
{"lineNum":" 4117","line":"struct _LIBCPP_TEMPLATE_VIS is_invocable"},
{"lineNum":" 4118","line":"    : integral_constant<bool, __invokable<_Fn, _Args...>::value> {};"},
{"lineNum":" 4119","line":""},
{"lineNum":" 4120","line":"template <class _Ret, class _Fn, class ..._Args>"},
{"lineNum":" 4121","line":"struct _LIBCPP_TEMPLATE_VIS is_invocable_r"},
{"lineNum":" 4122","line":"    : integral_constant<bool, __invokable_r<_Ret, _Fn, _Args...>::value> {};"},
{"lineNum":" 4123","line":""},
{"lineNum":" 4124","line":"template <class _Fn, class ..._Args>"},
{"lineNum":" 4125","line":"_LIBCPP_INLINE_VAR constexpr bool is_invocable_v"},
{"lineNum":" 4126","line":"    = is_invocable<_Fn, _Args...>::value;"},
{"lineNum":" 4127","line":""},
{"lineNum":" 4128","line":"template <class _Ret, class _Fn, class ..._Args>"},
{"lineNum":" 4129","line":"_LIBCPP_INLINE_VAR constexpr bool is_invocable_r_v"},
{"lineNum":" 4130","line":"    = is_invocable_r<_Ret, _Fn, _Args...>::value;"},
{"lineNum":" 4131","line":""},
{"lineNum":" 4132","line":"// is_nothrow_invocable"},
{"lineNum":" 4133","line":""},
{"lineNum":" 4134","line":"template <class _Fn, class ..._Args>"},
{"lineNum":" 4135","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_invocable"},
{"lineNum":" 4136","line":"    : integral_constant<bool, __nothrow_invokable<_Fn, _Args...>::value> {};"},
{"lineNum":" 4137","line":""},
{"lineNum":" 4138","line":"template <class _Ret, class _Fn, class ..._Args>"},
{"lineNum":" 4139","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_invocable_r"},
{"lineNum":" 4140","line":"    : integral_constant<bool, __nothrow_invokable_r<_Ret, _Fn, _Args...>::value> {};"},
{"lineNum":" 4141","line":""},
{"lineNum":" 4142","line":"template <class _Fn, class ..._Args>"},
{"lineNum":" 4143","line":"_LIBCPP_INLINE_VAR constexpr bool is_nothrow_invocable_v"},
{"lineNum":" 4144","line":"    = is_nothrow_invocable<_Fn, _Args...>::value;"},
{"lineNum":" 4145","line":""},
{"lineNum":" 4146","line":"template <class _Ret, class _Fn, class ..._Args>"},
{"lineNum":" 4147","line":"_LIBCPP_INLINE_VAR constexpr bool is_nothrow_invocable_r_v"},
{"lineNum":" 4148","line":"    = is_nothrow_invocable_r<_Ret, _Fn, _Args...>::value;"},
{"lineNum":" 4149","line":""},
{"lineNum":" 4150","line":"#endif // _LIBCPP_STD_VER > 14"},
{"lineNum":" 4151","line":""},
{"lineNum":" 4152","line":"// __swappable"},
{"lineNum":" 4153","line":""},
{"lineNum":" 4154","line":"template <class _Tp> struct __is_swappable;"},
{"lineNum":" 4155","line":"template <class _Tp> struct __is_nothrow_swappable;"},
{"lineNum":" 4156","line":""},
{"lineNum":" 4157","line":""},
{"lineNum":" 4158","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 4159","line":"template <class _Tp>"},
{"lineNum":" 4160","line":"using __swap_result_t = typename enable_if<is_move_constructible<_Tp>::value && is_move_assignable<_Tp>::value>::type;"},
{"lineNum":" 4161","line":"#else"},
{"lineNum":" 4162","line":"template <class>"},
{"lineNum":" 4163","line":"using __swap_result_t = void;"},
{"lineNum":" 4164","line":"#endif"},
{"lineNum":" 4165","line":""},
{"lineNum":" 4166","line":"template <class _Tp>"},
{"lineNum":" 4167","line":"inline _LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4168","line":"_LIBCPP_CONSTEXPR_AFTER_CXX17 __swap_result_t<_Tp>"},
{"lineNum":" 4169","line":"swap(_Tp& __x, _Tp& __y) _NOEXCEPT_(is_nothrow_move_constructible<_Tp>::value &&"},
{"lineNum":" 4170","line":"                                    is_nothrow_move_assignable<_Tp>::value);"},
{"lineNum":" 4171","line":""},
{"lineNum":" 4172","line":"template<class _Tp, size_t _Np>"},
{"lineNum":" 4173","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":" 4174","line":"typename enable_if<"},
{"lineNum":" 4175","line":"    __is_swappable<_Tp>::value"},
{"lineNum":" 4176","line":">::type"},
{"lineNum":" 4177","line":"swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np]) _NOEXCEPT_(__is_nothrow_swappable<_Tp>::value);"},
{"lineNum":" 4178","line":""},
{"lineNum":" 4179","line":"namespace __detail"},
{"lineNum":" 4180","line":"{"},
{"lineNum":" 4181","line":"// ALL generic swap overloads MUST already have a declaration available at this point."},
{"lineNum":" 4182","line":""},
{"lineNum":" 4183","line":"template <class _Tp, class _Up = _Tp,"},
{"lineNum":" 4184","line":"          bool _NotVoid = !is_void<_Tp>::value && !is_void<_Up>::value>"},
{"lineNum":" 4185","line":"struct __swappable_with"},
{"lineNum":" 4186","line":"{"},
{"lineNum":" 4187","line":"    template <class _LHS, class _RHS>"},
{"lineNum":" 4188","line":"    static decltype(swap(declval<_LHS>(), declval<_RHS>()))"},
{"lineNum":" 4189","line":"    __test_swap(int);"},
{"lineNum":" 4190","line":"    template <class, class>"},
{"lineNum":" 4191","line":"    static __nat __test_swap(long);"},
{"lineNum":" 4192","line":""},
{"lineNum":" 4193","line":"    // Extra parens are needed for the C++03 definition of decltype."},
{"lineNum":" 4194","line":"    typedef decltype((__test_swap<_Tp, _Up>(0))) __swap1;"},
{"lineNum":" 4195","line":"    typedef decltype((__test_swap<_Up, _Tp>(0))) __swap2;"},
{"lineNum":" 4196","line":""},
{"lineNum":" 4197","line":"    static const bool value = _IsNotSame<__swap1, __nat>::value"},
{"lineNum":" 4198","line":"                           && _IsNotSame<__swap2, __nat>::value;"},
{"lineNum":" 4199","line":"};"},
{"lineNum":" 4200","line":""},
{"lineNum":" 4201","line":"template <class _Tp, class _Up>"},
{"lineNum":" 4202","line":"struct __swappable_with<_Tp, _Up,  false> : false_type {};"},
{"lineNum":" 4203","line":""},
{"lineNum":" 4204","line":"template <class _Tp, class _Up = _Tp, bool _Swappable = __swappable_with<_Tp, _Up>::value>"},
{"lineNum":" 4205","line":"struct __nothrow_swappable_with {"},
{"lineNum":" 4206","line":"  static const bool value ="},
{"lineNum":" 4207","line":"#ifndef _LIBCPP_HAS_NO_NOEXCEPT"},
{"lineNum":" 4208","line":"      noexcept(swap(declval<_Tp>(), declval<_Up>()))"},
{"lineNum":" 4209","line":"  &&  noexcept(swap(declval<_Up>(), declval<_Tp>()));"},
{"lineNum":" 4210","line":"#else"},
{"lineNum":" 4211","line":"      false;"},
{"lineNum":" 4212","line":"#endif"},
{"lineNum":" 4213","line":"};"},
{"lineNum":" 4214","line":""},
{"lineNum":" 4215","line":"template <class _Tp, class _Up>"},
{"lineNum":" 4216","line":"struct __nothrow_swappable_with<_Tp, _Up, false> : false_type {};"},
{"lineNum":" 4217","line":""},
{"lineNum":" 4218","line":"}  // __detail"},
{"lineNum":" 4219","line":""},
{"lineNum":" 4220","line":"template <class _Tp>"},
{"lineNum":" 4221","line":"struct __is_swappable"},
{"lineNum":" 4222","line":"    : public integral_constant<bool, __detail::__swappable_with<_Tp&>::value>"},
{"lineNum":" 4223","line":"{"},
{"lineNum":" 4224","line":"};"},
{"lineNum":" 4225","line":""},
{"lineNum":" 4226","line":"template <class _Tp>"},
{"lineNum":" 4227","line":"struct __is_nothrow_swappable"},
{"lineNum":" 4228","line":"    : public integral_constant<bool, __detail::__nothrow_swappable_with<_Tp&>::value>"},
{"lineNum":" 4229","line":"{"},
{"lineNum":" 4230","line":"};"},
{"lineNum":" 4231","line":""},
{"lineNum":" 4232","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 4233","line":""},
{"lineNum":" 4234","line":"template <class _Tp, class _Up>"},
{"lineNum":" 4235","line":"struct _LIBCPP_TEMPLATE_VIS is_swappable_with"},
{"lineNum":" 4236","line":"    : public integral_constant<bool, __detail::__swappable_with<_Tp, _Up>::value>"},
{"lineNum":" 4237","line":"{"},
{"lineNum":" 4238","line":"};"},
{"lineNum":" 4239","line":""},
{"lineNum":" 4240","line":"template <class _Tp>"},
{"lineNum":" 4241","line":"struct _LIBCPP_TEMPLATE_VIS is_swappable"},
{"lineNum":" 4242","line":"    : public conditional<"},
{"lineNum":" 4243","line":"        __is_referenceable<_Tp>::value,"},
{"lineNum":" 4244","line":"        is_swappable_with<"},
{"lineNum":" 4245","line":"            typename add_lvalue_reference<_Tp>::type,"},
{"lineNum":" 4246","line":"            typename add_lvalue_reference<_Tp>::type>,"},
{"lineNum":" 4247","line":"        false_type"},
{"lineNum":" 4248","line":"    >::type"},
{"lineNum":" 4249","line":"{"},
{"lineNum":" 4250","line":"};"},
{"lineNum":" 4251","line":""},
{"lineNum":" 4252","line":"template <class _Tp, class _Up>"},
{"lineNum":" 4253","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_swappable_with"},
{"lineNum":" 4254","line":"    : public integral_constant<bool, __detail::__nothrow_swappable_with<_Tp, _Up>::value>"},
{"lineNum":" 4255","line":"{"},
{"lineNum":" 4256","line":"};"},
{"lineNum":" 4257","line":""},
{"lineNum":" 4258","line":"template <class _Tp>"},
{"lineNum":" 4259","line":"struct _LIBCPP_TEMPLATE_VIS is_nothrow_swappable"},
{"lineNum":" 4260","line":"    : public conditional<"},
{"lineNum":" 4261","line":"        __is_referenceable<_Tp>::value,"},
{"lineNum":" 4262","line":"        is_nothrow_swappable_with<"},
{"lineNum":" 4263","line":"            typename add_lvalue_reference<_Tp>::type,"},
{"lineNum":" 4264","line":"            typename add_lvalue_reference<_Tp>::type>,"},
{"lineNum":" 4265","line":"        false_type"},
{"lineNum":" 4266","line":"    >::type"},
{"lineNum":" 4267","line":"{"},
{"lineNum":" 4268","line":"};"},
{"lineNum":" 4269","line":""},
{"lineNum":" 4270","line":"template <class _Tp, class _Up>"},
{"lineNum":" 4271","line":"_LIBCPP_INLINE_VAR constexpr bool is_swappable_with_v"},
{"lineNum":" 4272","line":"    = is_swappable_with<_Tp, _Up>::value;"},
{"lineNum":" 4273","line":""},
{"lineNum":" 4274","line":"template <class _Tp>"},
{"lineNum":" 4275","line":"_LIBCPP_INLINE_VAR constexpr bool is_swappable_v"},
{"lineNum":" 4276","line":"    = is_swappable<_Tp>::value;"},
{"lineNum":" 4277","line":""},
{"lineNum":" 4278","line":"template <class _Tp, class _Up>"},
{"lineNum":" 4279","line":"_LIBCPP_INLINE_VAR constexpr bool is_nothrow_swappable_with_v"},
{"lineNum":" 4280","line":"    = is_nothrow_swappable_with<_Tp, _Up>::value;"},
{"lineNum":" 4281","line":""},
{"lineNum":" 4282","line":"template <class _Tp>"},
{"lineNum":" 4283","line":"_LIBCPP_INLINE_VAR constexpr bool is_nothrow_swappable_v"},
{"lineNum":" 4284","line":"    = is_nothrow_swappable<_Tp>::value;"},
{"lineNum":" 4285","line":""},
{"lineNum":" 4286","line":"#endif // _LIBCPP_STD_VER > 14"},
{"lineNum":" 4287","line":""},
{"lineNum":" 4288","line":"template <class _Tp, bool = is_enum<_Tp>::value> struct __underlying_type_impl;"},
{"lineNum":" 4289","line":""},
{"lineNum":" 4290","line":"template <class _Tp>"},
{"lineNum":" 4291","line":"struct __underlying_type_impl<_Tp, false> {};"},
{"lineNum":" 4292","line":""},
{"lineNum":" 4293","line":"template <class _Tp>"},
{"lineNum":" 4294","line":"struct __underlying_type_impl<_Tp, true>"},
{"lineNum":" 4295","line":"{"},
{"lineNum":" 4296","line":"    typedef __underlying_type(_Tp) type;"},
{"lineNum":" 4297","line":"};"},
{"lineNum":" 4298","line":""},
{"lineNum":" 4299","line":"template <class _Tp>"},
{"lineNum":" 4300","line":"struct underlying_type : __underlying_type_impl<_Tp, is_enum<_Tp>::value> {};"},
{"lineNum":" 4301","line":""},
{"lineNum":" 4302","line":"#if _LIBCPP_STD_VER > 11"},
{"lineNum":" 4303","line":"template <class _Tp> using underlying_type_t = typename underlying_type<_Tp>::type;"},
{"lineNum":" 4304","line":"#endif"},
{"lineNum":" 4305","line":""},
{"lineNum":" 4306","line":"template <class _Tp, bool = is_enum<_Tp>::value>"},
{"lineNum":" 4307","line":"struct __sfinae_underlying_type"},
{"lineNum":" 4308","line":"{"},
{"lineNum":" 4309","line":"    typedef typename underlying_type<_Tp>::type type;"},
{"lineNum":" 4310","line":"    typedef decltype(((type)1) + 0) __promoted_type;"},
{"lineNum":" 4311","line":"};"},
{"lineNum":" 4312","line":""},
{"lineNum":" 4313","line":"template <class _Tp>"},
{"lineNum":" 4314","line":"struct __sfinae_underlying_type<_Tp, false> {};"},
{"lineNum":" 4315","line":""},
{"lineNum":" 4316","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 4317","line":"int __convert_to_integral(int __val) { return __val; }"},
{"lineNum":" 4318","line":""},
{"lineNum":" 4319","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 4320","line":"unsigned __convert_to_integral(unsigned __val) { return __val; }"},
{"lineNum":" 4321","line":""},
{"lineNum":" 4322","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 4323","line":"long __convert_to_integral(long __val) { return __val; }"},
{"lineNum":" 4324","line":""},
{"lineNum":" 4325","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 4326","line":"unsigned long __convert_to_integral(unsigned long __val) { return __val; }"},
{"lineNum":" 4327","line":""},
{"lineNum":" 4328","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 4329","line":"long long __convert_to_integral(long long __val) { return __val; }"},
{"lineNum":" 4330","line":""},
{"lineNum":" 4331","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 4332","line":"unsigned long long __convert_to_integral(unsigned long long __val) {return __val; }"},
{"lineNum":" 4333","line":""},
{"lineNum":" 4334","line":"template<typename _Fp>"},
{"lineNum":" 4335","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 4336","line":"typename enable_if<is_floating_point<_Fp>::value, long long>::type"},
{"lineNum":" 4337","line":" __convert_to_integral(_Fp __val) { return __val; }"},
{"lineNum":" 4338","line":""},
{"lineNum":" 4339","line":"#ifndef _LIBCPP_HAS_NO_INT128"},
{"lineNum":" 4340","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 4341","line":"__int128_t __convert_to_integral(__int128_t __val) { return __val; }"},
{"lineNum":" 4342","line":""},
{"lineNum":" 4343","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 4344","line":"__uint128_t __convert_to_integral(__uint128_t __val) { return __val; }"},
{"lineNum":" 4345","line":"#endif"},
{"lineNum":" 4346","line":""},
{"lineNum":" 4347","line":"template <class _Tp>"},
{"lineNum":" 4348","line":"inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR"},
{"lineNum":" 4349","line":"typename __sfinae_underlying_type<_Tp>::__promoted_type"},
{"lineNum":" 4350","line":"__convert_to_integral(_Tp __val) { return __val; }"},
{"lineNum":" 4351","line":""},
{"lineNum":" 4352","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":" 4353","line":""},
{"lineNum":" 4354","line":"template <class _Tp>"},
{"lineNum":" 4355","line":"struct __has_operator_addressof_member_imp"},
{"lineNum":" 4356","line":"{"},
{"lineNum":" 4357","line":"    template <class _Up>"},
{"lineNum":" 4358","line":"        static auto __test(int)"},
{"lineNum":" 4359","line":"            -> typename __select_2nd<decltype(declval<_Up>().operator&()), true_type>::type;"},
{"lineNum":" 4360","line":"    template <class>"},
{"lineNum":" 4361","line":"        static auto __test(long) -> false_type;"},
{"lineNum":" 4362","line":""},
{"lineNum":" 4363","line":"    static const bool value = decltype(__test<_Tp>(0))::value;"},
{"lineNum":" 4364","line":"};"},
{"lineNum":" 4365","line":""},
{"lineNum":" 4366","line":"template <class _Tp>"},
{"lineNum":" 4367","line":"struct __has_operator_addressof_free_imp"},
{"lineNum":" 4368","line":"{"},
{"lineNum":" 4369","line":"    template <class _Up>"},
{"lineNum":" 4370","line":"        static auto __test(int)"},
{"lineNum":" 4371","line":"            -> typename __select_2nd<decltype(operator&(declval<_Up>())), true_type>::type;"},
{"lineNum":" 4372","line":"    template <class>"},
{"lineNum":" 4373","line":"        static auto __test(long) -> false_type;"},
{"lineNum":" 4374","line":""},
{"lineNum":" 4375","line":"    static const bool value = decltype(__test<_Tp>(0))::value;"},
{"lineNum":" 4376","line":"};"},
{"lineNum":" 4377","line":""},
{"lineNum":" 4378","line":"template <class _Tp>"},
{"lineNum":" 4379","line":"struct __has_operator_addressof"},
{"lineNum":" 4380","line":"    : public integral_constant<bool, __has_operator_addressof_member_imp<_Tp>::value"},
{"lineNum":" 4381","line":"                                  || __has_operator_addressof_free_imp<_Tp>::value>"},
{"lineNum":" 4382","line":"{};"},
{"lineNum":" 4383","line":""},
{"lineNum":" 4384","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":" 4385","line":""},
{"lineNum":" 4386","line":"// is_scoped_enum [meta.unary.prop]"},
{"lineNum":" 4387","line":""},
{"lineNum":" 4388","line":"#if _LIBCPP_STD_VER > 20"},
{"lineNum":" 4389","line":"template <class _Tp, bool = is_enum_v<_Tp> >"},
{"lineNum":" 4390","line":"struct __is_scoped_enum_helper : false_type {};"},
{"lineNum":" 4391","line":""},
{"lineNum":" 4392","line":"template <class _Tp>"},
{"lineNum":" 4393","line":"struct __is_scoped_enum_helper<_Tp, true>"},
{"lineNum":" 4394","line":"    : public bool_constant<!is_convertible_v<_Tp, underlying_type_t<_Tp> > > {};"},
{"lineNum":" 4395","line":""},
{"lineNum":" 4396","line":"template <class _Tp>"},
{"lineNum":" 4397","line":"struct _LIBCPP_TEMPLATE_VIS is_scoped_enum"},
{"lineNum":" 4398","line":"    : public __is_scoped_enum_helper<_Tp> {};"},
{"lineNum":" 4399","line":""},
{"lineNum":" 4400","line":"template <class _Tp>"},
{"lineNum":" 4401","line":"_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_scoped_enum_v ="},
{"lineNum":" 4402","line":"    is_scoped_enum<_Tp>::value;"},
{"lineNum":" 4403","line":"#endif"},
{"lineNum":" 4404","line":""},
{"lineNum":" 4405","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 4406","line":""},
{"lineNum":" 4407","line":"template <class... _Args>"},
{"lineNum":" 4408","line":"struct conjunction : _And<_Args...> {};"},
{"lineNum":" 4409","line":"template<class... _Args>"},
{"lineNum":" 4410","line":"_LIBCPP_INLINE_VAR constexpr bool conjunction_v"},
{"lineNum":" 4411","line":"    = conjunction<_Args...>::value;"},
{"lineNum":" 4412","line":""},
{"lineNum":" 4413","line":"template <class... _Args>"},
{"lineNum":" 4414","line":"struct disjunction : _Or<_Args...> {};"},
{"lineNum":" 4415","line":"template<class... _Args>"},
{"lineNum":" 4416","line":"_LIBCPP_INLINE_VAR constexpr bool disjunction_v"},
{"lineNum":" 4417","line":"    = disjunction<_Args...>::value;"},
{"lineNum":" 4418","line":""},
{"lineNum":" 4419","line":"template <class _Tp>"},
{"lineNum":" 4420","line":"struct negation : _Not<_Tp> {};"},
{"lineNum":" 4421","line":"template<class _Tp>"},
{"lineNum":" 4422","line":"_LIBCPP_INLINE_VAR constexpr bool negation_v"},
{"lineNum":" 4423","line":"    = negation<_Tp>::value;"},
{"lineNum":" 4424","line":"#endif // _LIBCPP_STD_VER > 14"},
{"lineNum":" 4425","line":""},
{"lineNum":" 4426","line":"// These traits are used in __tree and __hash_table"},
{"lineNum":" 4427","line":"struct __extract_key_fail_tag {};"},
{"lineNum":" 4428","line":"struct __extract_key_self_tag {};"},
{"lineNum":" 4429","line":"struct __extract_key_first_tag {};"},
{"lineNum":" 4430","line":""},
{"lineNum":" 4431","line":"template <class _ValTy, class _Key,"},
{"lineNum":" 4432","line":"          class _RawValTy = typename __unconstref<_ValTy>::type>"},
{"lineNum":" 4433","line":"struct __can_extract_key"},
{"lineNum":" 4434","line":"    : conditional<_IsSame<_RawValTy, _Key>::value, __extract_key_self_tag,"},
{"lineNum":" 4435","line":"                  __extract_key_fail_tag>::type {};"},
{"lineNum":" 4436","line":""},
{"lineNum":" 4437","line":"template <class _Pair, class _Key, class _First, class _Second>"},
{"lineNum":" 4438","line":"struct __can_extract_key<_Pair, _Key, pair<_First, _Second> >"},
{"lineNum":" 4439","line":"    : conditional<_IsSame<typename remove_const<_First>::type, _Key>::value,"},
{"lineNum":" 4440","line":"                  __extract_key_first_tag, __extract_key_fail_tag>::type {};"},
{"lineNum":" 4441","line":""},
{"lineNum":" 4442","line":"// __can_extract_map_key uses true_type/false_type instead of the tags."},
{"lineNum":" 4443","line":"// It returns true if _Key != _ContainerValueTy (the container is a map not a set)"},
{"lineNum":" 4444","line":"// and _ValTy == _Key."},
{"lineNum":" 4445","line":"template <class _ValTy, class _Key, class _ContainerValueTy,"},
{"lineNum":" 4446","line":"          class _RawValTy = typename __unconstref<_ValTy>::type>"},
{"lineNum":" 4447","line":"struct __can_extract_map_key"},
{"lineNum":" 4448","line":"    : integral_constant<bool, _IsSame<_RawValTy, _Key>::value> {};"},
{"lineNum":" 4449","line":""},
{"lineNum":" 4450","line":"// This specialization returns __extract_key_fail_tag for non-map containers"},
{"lineNum":" 4451","line":"// because _Key == _ContainerValueTy"},
{"lineNum":" 4452","line":"template <class _ValTy, class _Key, class _RawValTy>"},
{"lineNum":" 4453","line":"struct __can_extract_map_key<_ValTy, _Key, _Key, _RawValTy>"},
{"lineNum":" 4454","line":"    : false_type {};"},
{"lineNum":" 4455","line":""},
{"lineNum":" 4456","line":"#ifndef _LIBCPP_HAS_NO_BUILTIN_IS_CONSTANT_EVALUATED"},
{"lineNum":" 4457","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 4458","line":"_LIBCPP_INLINE_VISIBILITY"},
{"lineNum":" 4459","line":"inline constexpr bool is_constant_evaluated() noexcept {"},
{"lineNum":" 4460","line":"  return __builtin_is_constant_evaluated();"},
{"lineNum":" 4461","line":"}"},
{"lineNum":" 4462","line":"#endif"},
{"lineNum":" 4463","line":""},
{"lineNum":" 4464","line":"inline _LIBCPP_CONSTEXPR"},
{"lineNum":" 4465","line":"bool __libcpp_is_constant_evaluated() _NOEXCEPT { return __builtin_is_constant_evaluated(); }"},
{"lineNum":" 4466","line":"#else"},
{"lineNum":" 4467","line":"inline _LIBCPP_CONSTEXPR"},
{"lineNum":" 4468","line":"bool __libcpp_is_constant_evaluated() _NOEXCEPT { return false; }"},
{"lineNum":" 4469","line":"#endif"},
{"lineNum":" 4470","line":""},
{"lineNum":" 4471","line":"template <class _CharT>"},
{"lineNum":" 4472","line":"using _IsCharLikeType = _And<is_standard_layout<_CharT>, is_trivial<_CharT> >;"},
{"lineNum":" 4473","line":""},
{"lineNum":" 4474","line":"template<class _Tp>"},
{"lineNum":" 4475","line":"using __make_const_lvalue_ref = const typename remove_reference<_Tp>::type&;"},
{"lineNum":" 4476","line":""},
{"lineNum":" 4477","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":" 4478","line":"template<bool _Const, class _Tp>"},
{"lineNum":" 4479","line":"using __maybe_const = conditional_t<_Const, const _Tp, _Tp>;"},
{"lineNum":" 4480","line":"#endif // _LIBCPP_STD_VER > 17"},
{"lineNum":" 4481","line":""},
{"lineNum":" 4482","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":" 4483","line":""},
{"lineNum":" 4484","line":"#if _LIBCPP_STD_VER > 14"},
{"lineNum":" 4485","line":"// std::byte"},
{"lineNum":" 4486","line":"namespace std  // purposefully not versioned"},
{"lineNum":" 4487","line":"{"},
{"lineNum":" 4488","line":""},
{"lineNum":" 4489","line":""},
{"lineNum":" 4490","line":"}"},
{"lineNum":" 4491","line":"#endif"},
{"lineNum":" 4492","line":""},
{"lineNum":" 4493","line":"#endif // _LIBCPP_TYPE_TRAITS"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
