var data = {lines:[
{"lineNum":"    1","line":"// -*- C++ -*-"},
{"lineNum":"    2","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    3","line":"//"},
{"lineNum":"    4","line":"// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions."},
{"lineNum":"    5","line":"// See https://llvm.org/LICENSE.txt for license information."},
{"lineNum":"    6","line":"// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception"},
{"lineNum":"    7","line":"//"},
{"lineNum":"    8","line":"//===----------------------------------------------------------------------===//"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#ifndef _LIBCPP___MEMORY_ALLOCATOR_TRAITS_H"},
{"lineNum":"   11","line":"#define _LIBCPP___MEMORY_ALLOCATOR_TRAITS_H"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include <__config>"},
{"lineNum":"   14","line":"#include <__memory/construct_at.h>"},
{"lineNum":"   15","line":"#include <__memory/pointer_traits.h>"},
{"lineNum":"   16","line":"#include <__utility/forward.h>"},
{"lineNum":"   17","line":"#include <limits>"},
{"lineNum":"   18","line":"#include <type_traits>"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"},
{"lineNum":"   21","line":"#pragma GCC system_header"},
{"lineNum":"   22","line":"#endif"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"_LIBCPP_PUSH_MACROS"},
{"lineNum":"   25","line":"#include <__undef_macros>"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"_LIBCPP_BEGIN_NAMESPACE_STD"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"#define _LIBCPP_ALLOCATOR_TRAITS_HAS_XXX(NAME, PROPERTY)                \\"},
{"lineNum":"   30","line":"    template <class _Tp, class = void> struct NAME : false_type { };    \\"},
{"lineNum":"   31","line":"    template <class _Tp>               struct NAME<_Tp, typename __void_t<typename _Tp:: PROPERTY >::type> : true_type { }"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"// __pointer"},
{"lineNum":"   34","line":"_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX(__has_pointer, pointer);"},
{"lineNum":"   35","line":"template <class _Tp, class _Alloc,"},
{"lineNum":"   36","line":"          class _RawAlloc = typename remove_reference<_Alloc>::type,"},
{"lineNum":"   37","line":"          bool = __has_pointer<_RawAlloc>::value>"},
{"lineNum":"   38","line":"struct __pointer {"},
{"lineNum":"   39","line":"    using type _LIBCPP_NODEBUG_TYPE = typename _RawAlloc::pointer;"},
{"lineNum":"   40","line":"};"},
{"lineNum":"   41","line":"template <class _Tp, class _Alloc, class _RawAlloc>"},
{"lineNum":"   42","line":"struct __pointer<_Tp, _Alloc, _RawAlloc, false> {"},
{"lineNum":"   43","line":"    using type _LIBCPP_NODEBUG_TYPE = _Tp*;"},
{"lineNum":"   44","line":"};"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"// __const_pointer"},
{"lineNum":"   47","line":"_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX(__has_const_pointer, const_pointer);"},
{"lineNum":"   48","line":"template <class _Tp, class _Ptr, class _Alloc,"},
{"lineNum":"   49","line":"          bool = __has_const_pointer<_Alloc>::value>"},
{"lineNum":"   50","line":"struct __const_pointer {"},
{"lineNum":"   51","line":"    using type _LIBCPP_NODEBUG_TYPE = typename _Alloc::const_pointer;"},
{"lineNum":"   52","line":"};"},
{"lineNum":"   53","line":"template <class _Tp, class _Ptr, class _Alloc>"},
{"lineNum":"   54","line":"struct __const_pointer<_Tp, _Ptr, _Alloc, false> {"},
{"lineNum":"   55","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":"   56","line":"    using type = typename pointer_traits<_Ptr>::template rebind<const _Tp>::other;"},
{"lineNum":"   57","line":"#else"},
{"lineNum":"   58","line":"    using type _LIBCPP_NODEBUG_TYPE = typename pointer_traits<_Ptr>::template rebind<const _Tp>;"},
{"lineNum":"   59","line":"#endif"},
{"lineNum":"   60","line":"};"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"// __void_pointer"},
{"lineNum":"   63","line":"_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX(__has_void_pointer, void_pointer);"},
{"lineNum":"   64","line":"template <class _Ptr, class _Alloc,"},
{"lineNum":"   65","line":"          bool = __has_void_pointer<_Alloc>::value>"},
{"lineNum":"   66","line":"struct __void_pointer {"},
{"lineNum":"   67","line":"    using type _LIBCPP_NODEBUG_TYPE = typename _Alloc::void_pointer;"},
{"lineNum":"   68","line":"};"},
{"lineNum":"   69","line":"template <class _Ptr, class _Alloc>"},
{"lineNum":"   70","line":"struct __void_pointer<_Ptr, _Alloc, false> {"},
{"lineNum":"   71","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":"   72","line":"    using type _LIBCPP_NODEBUG_TYPE = typename pointer_traits<_Ptr>::template rebind<void>::other;"},
{"lineNum":"   73","line":"#else"},
{"lineNum":"   74","line":"    using type _LIBCPP_NODEBUG_TYPE = typename pointer_traits<_Ptr>::template rebind<void>;"},
{"lineNum":"   75","line":"#endif"},
{"lineNum":"   76","line":"};"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"// __const_void_pointer"},
{"lineNum":"   79","line":"_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX(__has_const_void_pointer, const_void_pointer);"},
{"lineNum":"   80","line":"template <class _Ptr, class _Alloc,"},
{"lineNum":"   81","line":"          bool = __has_const_void_pointer<_Alloc>::value>"},
{"lineNum":"   82","line":"struct __const_void_pointer {"},
{"lineNum":"   83","line":"    using type _LIBCPP_NODEBUG_TYPE = typename _Alloc::const_void_pointer;"},
{"lineNum":"   84","line":"};"},
{"lineNum":"   85","line":"template <class _Ptr, class _Alloc>"},
{"lineNum":"   86","line":"struct __const_void_pointer<_Ptr, _Alloc, false> {"},
{"lineNum":"   87","line":"#ifdef _LIBCPP_CXX03_LANG"},
{"lineNum":"   88","line":"    using type _LIBCPP_NODEBUG_TYPE = typename pointer_traits<_Ptr>::template rebind<const void>::other;"},
{"lineNum":"   89","line":"#else"},
{"lineNum":"   90","line":"    using type _LIBCPP_NODEBUG_TYPE = typename pointer_traits<_Ptr>::template rebind<const void>;"},
{"lineNum":"   91","line":"#endif"},
{"lineNum":"   92","line":"};"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"// __size_type"},
{"lineNum":"   95","line":"_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX(__has_size_type, size_type);"},
{"lineNum":"   96","line":"template <class _Alloc, class _DiffType, bool = __has_size_type<_Alloc>::value>"},
{"lineNum":"   97","line":"struct __size_type : make_unsigned<_DiffType> { };"},
{"lineNum":"   98","line":"template <class _Alloc, class _DiffType>"},
{"lineNum":"   99","line":"struct __size_type<_Alloc, _DiffType, true> {"},
{"lineNum":"  100","line":"    using type _LIBCPP_NODEBUG_TYPE = typename _Alloc::size_type;"},
{"lineNum":"  101","line":"};"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"// __alloc_traits_difference_type"},
{"lineNum":"  104","line":"_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX(__has_alloc_traits_difference_type, difference_type);"},
{"lineNum":"  105","line":"template <class _Alloc, class _Ptr, bool = __has_alloc_traits_difference_type<_Alloc>::value>"},
{"lineNum":"  106","line":"struct __alloc_traits_difference_type {"},
{"lineNum":"  107","line":"    using type _LIBCPP_NODEBUG_TYPE = typename pointer_traits<_Ptr>::difference_type;"},
{"lineNum":"  108","line":"};"},
{"lineNum":"  109","line":"template <class _Alloc, class _Ptr>"},
{"lineNum":"  110","line":"struct __alloc_traits_difference_type<_Alloc, _Ptr, true> {"},
{"lineNum":"  111","line":"    using type _LIBCPP_NODEBUG_TYPE = typename _Alloc::difference_type;"},
{"lineNum":"  112","line":"};"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"// __propagate_on_container_copy_assignment"},
{"lineNum":"  115","line":"_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX(__has_propagate_on_container_copy_assignment, propagate_on_container_copy_assignment);"},
{"lineNum":"  116","line":"template <class _Alloc, bool = __has_propagate_on_container_copy_assignment<_Alloc>::value>"},
{"lineNum":"  117","line":"struct __propagate_on_container_copy_assignment : false_type { };"},
{"lineNum":"  118","line":"template <class _Alloc>"},
{"lineNum":"  119","line":"struct __propagate_on_container_copy_assignment<_Alloc, true> {"},
{"lineNum":"  120","line":"    using type _LIBCPP_NODEBUG_TYPE = typename _Alloc::propagate_on_container_copy_assignment;"},
{"lineNum":"  121","line":"};"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"// __propagate_on_container_move_assignment"},
{"lineNum":"  124","line":"_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX(__has_propagate_on_container_move_assignment, propagate_on_container_move_assignment);"},
{"lineNum":"  125","line":"template <class _Alloc, bool = __has_propagate_on_container_move_assignment<_Alloc>::value>"},
{"lineNum":"  126","line":"struct __propagate_on_container_move_assignment : false_type { };"},
{"lineNum":"  127","line":"template <class _Alloc>"},
{"lineNum":"  128","line":"struct __propagate_on_container_move_assignment<_Alloc, true> {"},
{"lineNum":"  129","line":"    using type _LIBCPP_NODEBUG_TYPE = typename _Alloc::propagate_on_container_move_assignment;"},
{"lineNum":"  130","line":"};"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"// __propagate_on_container_swap"},
{"lineNum":"  133","line":"_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX(__has_propagate_on_container_swap, propagate_on_container_swap);"},
{"lineNum":"  134","line":"template <class _Alloc, bool = __has_propagate_on_container_swap<_Alloc>::value>"},
{"lineNum":"  135","line":"struct __propagate_on_container_swap : false_type { };"},
{"lineNum":"  136","line":"template <class _Alloc>"},
{"lineNum":"  137","line":"struct __propagate_on_container_swap<_Alloc, true> {"},
{"lineNum":"  138","line":"    using type _LIBCPP_NODEBUG_TYPE = typename _Alloc::propagate_on_container_swap;"},
{"lineNum":"  139","line":"};"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"// __is_always_equal"},
{"lineNum":"  142","line":"_LIBCPP_ALLOCATOR_TRAITS_HAS_XXX(__has_is_always_equal, is_always_equal);"},
{"lineNum":"  143","line":"template <class _Alloc, bool = __has_is_always_equal<_Alloc>::value>"},
{"lineNum":"  144","line":"struct __is_always_equal : is_empty<_Alloc> { };"},
{"lineNum":"  145","line":"template <class _Alloc>"},
{"lineNum":"  146","line":"struct __is_always_equal<_Alloc, true> {"},
{"lineNum":"  147","line":"    using type _LIBCPP_NODEBUG_TYPE = typename _Alloc::is_always_equal;"},
{"lineNum":"  148","line":"};"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"// __allocator_traits_rebind"},
{"lineNum":"  151","line":"_LIBCPP_SUPPRESS_DEPRECATED_PUSH"},
{"lineNum":"  152","line":"template <class _Tp, class _Up, class = void>"},
{"lineNum":"  153","line":"struct __has_rebind_other : false_type { };"},
{"lineNum":"  154","line":"template <class _Tp, class _Up>"},
{"lineNum":"  155","line":"struct __has_rebind_other<_Tp, _Up, typename __void_t<"},
{"lineNum":"  156","line":"    typename _Tp::template rebind<_Up>::other"},
{"lineNum":"  157","line":">::type> : true_type { };"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"template <class _Tp, class _Up, bool = __has_rebind_other<_Tp, _Up>::value>"},
{"lineNum":"  160","line":"struct __allocator_traits_rebind {"},
{"lineNum":"  161","line":"    using type _LIBCPP_NODEBUG_TYPE = typename _Tp::template rebind<_Up>::other;"},
{"lineNum":"  162","line":"};"},
{"lineNum":"  163","line":"template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>"},
{"lineNum":"  164","line":"struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, true> {"},
{"lineNum":"  165","line":"    using type _LIBCPP_NODEBUG_TYPE = typename _Alloc<_Tp, _Args...>::template rebind<_Up>::other;"},
{"lineNum":"  166","line":"};"},
{"lineNum":"  167","line":"template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>"},
{"lineNum":"  168","line":"struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, false> {"},
{"lineNum":"  169","line":"    using type _LIBCPP_NODEBUG_TYPE = _Alloc<_Up, _Args...>;"},
{"lineNum":"  170","line":"};"},
{"lineNum":"  171","line":"_LIBCPP_SUPPRESS_DEPRECATED_POP"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"template<class _Alloc, class _Tp>"},
{"lineNum":"  174","line":"using __allocator_traits_rebind_t = typename __allocator_traits_rebind<_Alloc, _Tp>::type;"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"_LIBCPP_SUPPRESS_DEPRECATED_PUSH"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"// __has_allocate_hint"},
{"lineNum":"  179","line":"template <class _Alloc, class _SizeType, class _ConstVoidPtr, class = void>"},
{"lineNum":"  180","line":"struct __has_allocate_hint : false_type { };"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"template <class _Alloc, class _SizeType, class _ConstVoidPtr>"},
{"lineNum":"  183","line":"struct __has_allocate_hint<_Alloc, _SizeType, _ConstVoidPtr, decltype("},
{"lineNum":"  184","line":"    (void)declval<_Alloc>().allocate(declval<_SizeType>(), declval<_ConstVoidPtr>())"},
{"lineNum":"  185","line":")> : true_type { };"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"// __has_construct"},
{"lineNum":"  188","line":"template <class, class _Alloc, class ..._Args>"},
{"lineNum":"  189","line":"struct __has_construct_impl : false_type { };"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"template <class _Alloc, class ..._Args>"},
{"lineNum":"  192","line":"struct __has_construct_impl<decltype("},
{"lineNum":"  193","line":"    (void)declval<_Alloc>().construct(declval<_Args>()...)"},
{"lineNum":"  194","line":"), _Alloc, _Args...> : true_type { };"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"template <class _Alloc, class ..._Args>"},
{"lineNum":"  197","line":"struct __has_construct : __has_construct_impl<void, _Alloc, _Args...> { };"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"// __has_destroy"},
{"lineNum":"  200","line":"template <class _Alloc, class _Pointer, class = void>"},
{"lineNum":"  201","line":"struct __has_destroy : false_type { };"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"template <class _Alloc, class _Pointer>"},
{"lineNum":"  204","line":"struct __has_destroy<_Alloc, _Pointer, decltype("},
{"lineNum":"  205","line":"    (void)declval<_Alloc>().destroy(declval<_Pointer>())"},
{"lineNum":"  206","line":")> : true_type { };"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"// __has_max_size"},
{"lineNum":"  209","line":"template <class _Alloc, class = void>"},
{"lineNum":"  210","line":"struct __has_max_size : false_type { };"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"template <class _Alloc>"},
{"lineNum":"  213","line":"struct __has_max_size<_Alloc, decltype("},
{"lineNum":"  214","line":"    (void)declval<_Alloc&>().max_size()"},
{"lineNum":"  215","line":")> : true_type { };"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"// __has_select_on_container_copy_construction"},
{"lineNum":"  218","line":"template <class _Alloc, class = void>"},
{"lineNum":"  219","line":"struct __has_select_on_container_copy_construction : false_type { };"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"template <class _Alloc>"},
{"lineNum":"  222","line":"struct __has_select_on_container_copy_construction<_Alloc, decltype("},
{"lineNum":"  223","line":"    (void)declval<_Alloc>().select_on_container_copy_construction()"},
{"lineNum":"  224","line":")> : true_type { };"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"_LIBCPP_SUPPRESS_DEPRECATED_POP"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"template <class _Alloc>"},
{"lineNum":"  229","line":"struct _LIBCPP_TEMPLATE_VIS allocator_traits"},
{"lineNum":"  230","line":"{"},
{"lineNum":"  231","line":"    using allocator_type = _Alloc;"},
{"lineNum":"  232","line":"    using value_type = typename allocator_type::value_type;"},
{"lineNum":"  233","line":"    using pointer = typename __pointer<value_type, allocator_type>::type;"},
{"lineNum":"  234","line":"    using const_pointer = typename __const_pointer<value_type, pointer, allocator_type>::type;"},
{"lineNum":"  235","line":"    using void_pointer = typename __void_pointer<pointer, allocator_type>::type;"},
{"lineNum":"  236","line":"    using const_void_pointer = typename __const_void_pointer<pointer, allocator_type>::type;"},
{"lineNum":"  237","line":"    using difference_type = typename __alloc_traits_difference_type<allocator_type, pointer>::type;"},
{"lineNum":"  238","line":"    using size_type = typename __size_type<allocator_type, difference_type>::type;"},
{"lineNum":"  239","line":"    using propagate_on_container_copy_assignment = typename __propagate_on_container_copy_assignment<allocator_type>::type;"},
{"lineNum":"  240","line":"    using propagate_on_container_move_assignment = typename __propagate_on_container_move_assignment<allocator_type>::type;"},
{"lineNum":"  241","line":"    using propagate_on_container_swap = typename __propagate_on_container_swap<allocator_type>::type;"},
{"lineNum":"  242","line":"    using is_always_equal = typename __is_always_equal<allocator_type>::type;"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  245","line":"    template <class _Tp>"},
{"lineNum":"  246","line":"    using rebind_alloc = __allocator_traits_rebind_t<allocator_type, _Tp>;"},
{"lineNum":"  247","line":"    template <class _Tp>"},
{"lineNum":"  248","line":"    using rebind_traits = allocator_traits<rebind_alloc<_Tp> >;"},
{"lineNum":"  249","line":"#else  // _LIBCPP_CXX03_LANG"},
{"lineNum":"  250","line":"    template <class _Tp>"},
{"lineNum":"  251","line":"    struct rebind_alloc {"},
{"lineNum":"  252","line":"        using other = __allocator_traits_rebind_t<allocator_type, _Tp>;"},
{"lineNum":"  253","line":"    };"},
{"lineNum":"  254","line":"    template <class _Tp>"},
{"lineNum":"  255","line":"    struct rebind_traits {"},
{"lineNum":"  256","line":"        using other = allocator_traits<typename rebind_alloc<_Tp>::other>;"},
{"lineNum":"  257","line":"    };"},
{"lineNum":"  258","line":"#endif // _LIBCPP_CXX03_LANG"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  261","line":"    static pointer allocate(allocator_type& __a, size_type __n) {"},
{"lineNum":"  262","line":"        return __a.allocate(__n);"},
{"lineNum":"  263","line":"    }"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    template <class _Ap = _Alloc, class ="},
{"lineNum":"  266","line":"        _EnableIf<__has_allocate_hint<_Ap, size_type, const_void_pointer>::value> >"},
{"lineNum":"  267","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  268","line":"    static pointer allocate(allocator_type& __a, size_type __n, const_void_pointer __hint) {"},
{"lineNum":"  269","line":"        _LIBCPP_SUPPRESS_DEPRECATED_PUSH"},
{"lineNum":"  270","line":"        return __a.allocate(__n, __hint);"},
{"lineNum":"  271","line":"        _LIBCPP_SUPPRESS_DEPRECATED_POP"},
{"lineNum":"  272","line":"    }"},
{"lineNum":"  273","line":"    template <class _Ap = _Alloc, class = void, class ="},
{"lineNum":"  274","line":"        _EnableIf<!__has_allocate_hint<_Ap, size_type, const_void_pointer>::value> >"},
{"lineNum":"  275","line":"    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  276","line":"    static pointer allocate(allocator_type& __a, size_type __n, const_void_pointer) {"},
{"lineNum":"  277","line":"        return __a.allocate(__n);"},
{"lineNum":"  278","line":"    }"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  281","line":"    static void deallocate(allocator_type& __a, pointer __p, size_type __n) _NOEXCEPT {"},
{"lineNum":"  282","line":"        __a.deallocate(__p, __n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  283","line":"    }"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"    template <class _Tp, class... _Args, class ="},
{"lineNum":"  286","line":"        _EnableIf<__has_construct<allocator_type, _Tp*, _Args...>::value> >"},
{"lineNum":"  287","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  288","line":"    static void construct(allocator_type& __a, _Tp* __p, _Args&&... __args) {"},
{"lineNum":"  289","line":"        _LIBCPP_SUPPRESS_DEPRECATED_PUSH"},
{"lineNum":"  290","line":"        __a.construct(__p, _VSTD::forward<_Args>(__args)...);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  291","line":"        _LIBCPP_SUPPRESS_DEPRECATED_POP"},
{"lineNum":"  292","line":"    }"},
{"lineNum":"  293","line":"    template <class _Tp, class... _Args, class = void, class ="},
{"lineNum":"  294","line":"        _EnableIf<!__has_construct<allocator_type, _Tp*, _Args...>::value> >"},
{"lineNum":"  295","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  296","line":"    static void construct(allocator_type&, _Tp* __p, _Args&&... __args) {"},
{"lineNum":"  297","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  298","line":"        _VSTD::construct_at(__p, _VSTD::forward<_Args>(__args)...);"},
{"lineNum":"  299","line":"#else"},
{"lineNum":"  300","line":"        ::new ((void*)__p) _Tp(_VSTD::forward<_Args>(__args)...);"},
{"lineNum":"  301","line":"#endif"},
{"lineNum":"  302","line":"    }"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"    template <class _Tp, class ="},
{"lineNum":"  305","line":"        _EnableIf<__has_destroy<allocator_type, _Tp*>::value> >"},
{"lineNum":"  306","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  307","line":"    static void destroy(allocator_type& __a, _Tp* __p) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  308","line":"        _LIBCPP_SUPPRESS_DEPRECATED_PUSH"},
{"lineNum":"  309","line":"        __a.destroy(__p);","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  310","line":"        _LIBCPP_SUPPRESS_DEPRECATED_POP"},
{"lineNum":"  311","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":"    template <class _Tp, class = void, class ="},
{"lineNum":"  313","line":"        _EnableIf<!__has_destroy<allocator_type, _Tp*>::value> >"},
{"lineNum":"  314","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  315","line":"    static void destroy(allocator_type&, _Tp* __p) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  316","line":"#if _LIBCPP_STD_VER > 17"},
{"lineNum":"  317","line":"        _VSTD::destroy_at(__p);"},
{"lineNum":"  318","line":"#else"},
{"lineNum":"  319","line":"        __p->~_Tp();","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":"  320","line":"#endif"},
{"lineNum":"  321","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    template <class _Ap = _Alloc, class ="},
{"lineNum":"  324","line":"        _EnableIf<__has_max_size<const _Ap>::value> >"},
{"lineNum":"  325","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  326","line":"    static size_type max_size(const allocator_type& __a) _NOEXCEPT {"},
{"lineNum":"  327","line":"        _LIBCPP_SUPPRESS_DEPRECATED_PUSH"},
{"lineNum":"  328","line":"        return __a.max_size();"},
{"lineNum":"  329","line":"        _LIBCPP_SUPPRESS_DEPRECATED_POP"},
{"lineNum":"  330","line":"    }"},
{"lineNum":"  331","line":"    template <class _Ap = _Alloc, class = void, class ="},
{"lineNum":"  332","line":"        _EnableIf<!__has_max_size<const _Ap>::value> >"},
{"lineNum":"  333","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  334","line":"    static size_type max_size(const allocator_type&) _NOEXCEPT {"},
{"lineNum":"  335","line":"        return numeric_limits<size_type>::max() / sizeof(value_type);"},
{"lineNum":"  336","line":"    }"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"    template <class _Ap = _Alloc, class ="},
{"lineNum":"  339","line":"        _EnableIf<__has_select_on_container_copy_construction<const _Ap>::value> >"},
{"lineNum":"  340","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  341","line":"    static allocator_type select_on_container_copy_construction(const allocator_type& __a) {"},
{"lineNum":"  342","line":"        return __a.select_on_container_copy_construction();"},
{"lineNum":"  343","line":"    }"},
{"lineNum":"  344","line":"    template <class _Ap = _Alloc, class = void, class ="},
{"lineNum":"  345","line":"        _EnableIf<!__has_select_on_container_copy_construction<const _Ap>::value> >"},
{"lineNum":"  346","line":"    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17"},
{"lineNum":"  347","line":"    static allocator_type select_on_container_copy_construction(const allocator_type& __a) {"},
{"lineNum":"  348","line":"        return __a;"},
{"lineNum":"  349","line":"    }"},
{"lineNum":"  350","line":"};"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"template <class _Traits, class _Tp>"},
{"lineNum":"  353","line":"struct __rebind_alloc_helper {"},
{"lineNum":"  354","line":"#ifndef _LIBCPP_CXX03_LANG"},
{"lineNum":"  355","line":"    using type _LIBCPP_NODEBUG_TYPE = typename _Traits::template rebind_alloc<_Tp>;"},
{"lineNum":"  356","line":"#else"},
{"lineNum":"  357","line":"    using type = typename _Traits::template rebind_alloc<_Tp>::other;"},
{"lineNum":"  358","line":"#endif"},
{"lineNum":"  359","line":"};"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"// __is_default_allocator"},
{"lineNum":"  362","line":"template <class _Tp>"},
{"lineNum":"  363","line":"struct __is_default_allocator : false_type { };"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"template <class> class allocator;"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"template <class _Tp>"},
{"lineNum":"  368","line":"struct __is_default_allocator<allocator<_Tp> > : true_type { };"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"// __is_cpp17_move_insertable"},
{"lineNum":"  371","line":"template <class _Alloc, class = void>"},
{"lineNum":"  372","line":"struct __is_cpp17_move_insertable"},
{"lineNum":"  373","line":"    : is_move_constructible<typename _Alloc::value_type>"},
{"lineNum":"  374","line":"{ };"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"template <class _Alloc>"},
{"lineNum":"  377","line":"struct __is_cpp17_move_insertable<_Alloc, _EnableIf<"},
{"lineNum":"  378","line":"    !__is_default_allocator<_Alloc>::value &&"},
{"lineNum":"  379","line":"    __has_construct<_Alloc, typename _Alloc::value_type*, typename _Alloc::value_type&&>::value"},
{"lineNum":"  380","line":"> > : true_type { };"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"// __is_cpp17_copy_insertable"},
{"lineNum":"  383","line":"template <class _Alloc, class = void>"},
{"lineNum":"  384","line":"struct __is_cpp17_copy_insertable"},
{"lineNum":"  385","line":"    : integral_constant<bool,"},
{"lineNum":"  386","line":"        is_copy_constructible<typename _Alloc::value_type>::value &&"},
{"lineNum":"  387","line":"        __is_cpp17_move_insertable<_Alloc>::value"},
{"lineNum":"  388","line":"    >"},
{"lineNum":"  389","line":"{ };"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"template <class _Alloc>"},
{"lineNum":"  392","line":"struct __is_cpp17_copy_insertable<_Alloc, _EnableIf<"},
{"lineNum":"  393","line":"    !__is_default_allocator<_Alloc>::value &&"},
{"lineNum":"  394","line":"    __has_construct<_Alloc, typename _Alloc::value_type*, const typename _Alloc::value_type&>::value"},
{"lineNum":"  395","line":"> >"},
{"lineNum":"  396","line":"    : __is_cpp17_move_insertable<_Alloc>"},
{"lineNum":"  397","line":"{ };"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"#undef _LIBCPP_ALLOCATOR_TRAITS_HAS_XXX"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"_LIBCPP_END_NAMESPACE_STD"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"_LIBCPP_POP_MACROS"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"#endif // _LIBCPP___MEMORY_ALLOCATOR_TRAITS_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "fodo_cxx", "date" : "2021-12-15 09:03:42", "instrumented" : 8, "covered" : 0,};
var merged_data = [];
