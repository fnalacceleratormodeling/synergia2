if("${CMAKE_CUDA_COMPILER}" MATCHES "clang")
  cmake_minimum_required(VERSION = 3.18)
else()
  cmake_minimum_required(VERSION 3.16)
endif()

project(SYNERGIA2 LANGUAGES CXX C)

if(${CMAKE_VERSION} VERSION_GREATER "3.22.0")
  cmake_policy(SET CMP0127 OLD) # remove this when we move to CMake 3.22
endif()

# generate compile_commands.json
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
# and place it in the source directory https://stackoverflow.com/a/60910583
add_custom_target(
  copy-compile-commands ALL
  ${CMAKE_COMMAND} -E copy_if_different
  ${CMAKE_BINARY_DIR}/compile_commands.json ${CMAKE_CURRENT_LIST_DIR})

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
enable_testing()

# project specific cmake modules
set(CMAKE_MODULE_PATH "${SYNERGIA2_SOURCE_DIR}/CMake")
include(CopyFile)
include(MPITest)
include(AddPythonTest)

# versions
set(SYNERGIA2_VERSION_MAJOR 2022) # year
set(SYNERGIA2_VERSION_MINOR 08) # month
set(SYNERGIA2_VERSION_PATCH 31) # day
set(SYNERGIA2_VERSION_TWEAK 00) # sub-day counter
set(SYNERGIA2_VERSION
    "${SYNERGIA2_VERSION_MAJOR}.${SYNERGIA2_VERSION_MINOR}.${SYNERGIA2_VERSION_PATCH}.${SYNERGIA2_VERSION_TWEAK}"
)

# Make sure we know which Kokkos back end we're using. If none is specified on
# the command line, the default is OpenMP.
if("${ENABLE_KOKKOS_BACKEND}" STREQUAL "")
  set(ENABLE_KOKKOS_BACKEND OpenMP)
  message(STATUS "OpenMP backend for Kokkos is enabled.")
endif()

# Make sure the ENABLE_KOKKOS_BACKEND is set to one of the allowed values, and
# nothing else.
if((NOT "${ENABLE_KOKKOS_BACKEND}" STREQUAL "CUDA")
   AND (NOT "${ENABLE_KOKKOS_BACKEND}" STREQUAL "OpenMP"))
  message(FATAL_ERROR "ENABLE_KOKKOS_BACKEND must be one of CUDA or OpenMP")
else()
  message(STATUS "ENABLE_KOKKOS_BACKEND is ${ENABLE_KOKKOS_BACKEND}")
endif()

# Set preprocessor flags we require
if("${ENABLE_KOKKOS_BACKEND}" STREQUAL "OpenMP")
  message(STATUS "Adding SYNERGIA_ENABLE_OPENMP to compiler definiions")
  add_compile_definitions(SYNERGIA_ENABLE_OPENMP=1)
  set(Kokkos_ENABLE_CUDA
      Off
      CACHE BOOL "If true-ish use CUDA backend for Kokkos" FORCE)
  set(Kokkos_ENABLE_OPENMP
      On
      CACHE BOOL "If true-ish use OpenMP backend for Kokkos" FORCE)
endif()

if("${ENABLE_KOKKOS_BACKEND}" STREQUAL "CUDA")
  message(STATUS "Adding SYNERGIA_ENABLE_CUDA to compiler definiions")
  add_compile_definitions(SYNERGIA_ENABLE_CUDA=1)
  set(Kokkos_ENABLE_CUDA
      On
      CACHE BOOL "If true-ish use CUDA backend for Kokkos" FORCE)
  set(Kokkos_ENABLE_OPENMP
      Off
      CACHE BOOL "If true-ish use OpenMP backend for Kokkos" FORCE)
endif()

# Set up to assure fully-linked libraries.
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  # using Clang
  set(COMPILER_SPECIFIC_CXX_FLAGS
      "-Wno-#pragma-messages -Wno-potentially-evaluated-expression -Wno-register"
  )
  message(STATUS "Using clang++")
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
  # using Apples's clang
  set(COMPILER_SPECIFIC_CXX_FLAGS
      "-Wno-#pragma-messages -Wno-potentially-evaluated-expression -Wno-register"
  )
  message(STATUS "Using Apple clang++")
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  # using GCC
  set(COMPILER_SPECIFIC_CXX_FLAGS "-Wno-error=unused-result -Wno-register")
  if(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(LINKER_OPTIONS "LINKER:-z,defs")
  endif()
  message(STATUS "Using g++")
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
  # using Intel C++
  set(COMPILER_SPECIFIC_CXX_FLAGS "-Wno-error=unused-result")
  set(LINKER_OPTIONS "LINKER:-z,defs")
  message(STATUS "Using classic Intel C++")
else()
  message(
    WARNING
      "I can not tell what compiler is being used. Will proceed with generic settings."
  )
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${COMPILER_SPECIFIC_CXX_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS
    "${CMAKE_SHARED_LINKER_FLAGS} ${COMPILER_SPECIFIC_SHARED_LINKER_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS
    "${CMAKE_MODULE_LINKER_FLAGS} ${COMPILER_SPECIFIC_SHARED_LINKER_FLAGS}")

# options
option(SIMPLE_TIMER "use the simple timer 2 profiling" OFF)
option(BUILD_PYTHON_BINDINGS "build the Python bindings of Synergia" ON)
option(ALLOW_PADDING "enable particle array padding for memory alignment" OFF)
option(USE_EXTERNAL_KOKKOS "Use external build of kokkos" OFF)
option(USE_EXTERNAL_CEREAL "Use external build of cereal" OFF)
option(
  USE_EXTERNAL_PYBIND11
  "Use external build of pybind11, only applicable when building python bindings"
  OFF)
option(BUILD_EXAMPLES "build examples" ON)
option(
  BUILD_FD_SPACE_CHARGE_SOLVER
  "build the finite difference based space charge solver, requires PETSc & PkgConfig"
  OFF)

# PETSc
if(${BUILD_FD_SPACE_CHARGE_SOLVER})
  add_definitions(-DBUILD_FD_SPACE_CHARGE_SOLVER)
  # set root of location to find PETSc's pkg-config
  set(PETSC $ENV{PETSC_DIR}/$ENV{PETSC_ARCH})
  set(ENV{PKG_CONFIG_PATH} ${PETSC}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH})
  find_package(PkgConfig REQUIRED)
  pkg_search_module(PETSC REQUIRED IMPORTED_TARGET PETSc)
endif()

# srun --mpi=SRUN_MPI_PMIX
set(SRUN_MPI_PMIX
    "pmix_v3"
    CACHE STRING "PMI2/PMIx version to use with srun")

# only build the shared lib
option(BUILD_SHARED_LIBS "Build shared libraries" TRUE)

# option for gsvector setting
set(GSV
    "AVX"
    CACHE STRING "set gsvector vectorization type (DOUBLE|SSE|AVX|AVX512)")

# find MPI -- do not build the C++ bindings
set(MPI_CXX_SKIP_MPICXX
    TRUE
    CACHE BOOL "disable the MPI2-C++ bindings")
set(MPI_DETERMINE_LIBRARY_VERSION TRUE)
find_package(MPI REQUIRED COMPONENTS C CXX) # CXX means we need to call C-APIs
                                            # in C++ code
add_compile_definitions(${MPI_CXX_COMPILE_DEFINITIONS})
execute_process(COMMAND ${MPIEXEC} --version OUTPUT_VARIABLE MPI_VERSION)

# mpi oversubscribe
message(MPI_VERSION is: ${MPI_VERSION})
if(${MPI_VERSION} MATCHES "OpenRTE.*")
  set(MPIEXEC_PREFLAGS ${MPIEXEC_PREFLAGS} "--oversubscribe")
endif()

# launch tests with additional --mpi=${SRUN_MPI_PMIX} flag!
if(${MPIEXEC_EXECUTABLE} MATCHES "srun")
  set(MPIEXEC_EXECUTABLE ${MPIEXEC_EXECUTABLE} "--mpi=${SRUN_MPI_PMIX}")
endif()

# We require OpenMP support
find_package(OpenMP REQUIRED)

# Follow official kokkos guidelines
# https://github.com/kokkos/kokkos/wiki/Compiling#42-using-general-cmake-build-system
if(USE_EXTERNAL_KOKKOS)
  find_package(Kokkos REQUIRED)
  message(STATUS "Using external installation of kokkos")
  set(kokkos_libs "Kokkos::kokkos")
  if("${ENABLE_KOKKOS_BACKEND}" STREQUAL "CUDA")
    project(SYNERGIA2 LANGUAGES CXX C CUDA)
  endif()
else()
  message(STATUS "Using vendored copy of kokkos")
  if("${ENABLE_KOKKOS_BACKEND}" STREQUAL "CUDA")
    set(Kokkos_ENABLE_CUDA_LAMBDA
        ON
        CACHE BOOL "enable CUDA LAMBDA feature" FORCE)
    message(STATUS "Using vendored copy of kokkos with CUDA")
  endif()
  add_subdirectory(src/synergia/utils/kokkos)
  include_directories(${Kokkos_INCLUDE_DIRS_RET})
  set(kokkos_libs kokkos)
endif()

# Check version of kokkos!
if((Kokkos_VERSION_MAJOR LESS 3) OR (Kokkos_VERSION_MINOR LESS 7))
  message(FATAL_ERROR "Need at least Kokkos 3.7.00!")
endif()

# HDF5
set(FETCH_HDF5 ON)
set(HDF5_PREFER_PARALLEL true)
find_package(HDF5)

if(HDF5_FOUND)
  if(HDF5_IS_PARALLEL)
    message(STATUS "Using parallel hdf5")
    add_definitions(-DUSE_PARALLEL_HDF5)
    set(FETCH_HDF5 OFF)
  endif()
endif()

# OpenPMD
find_package(openPMD CONFIG)

# if not found, fetch it
if(NOT openPMD_FOUND)
  message(STATUS "fetching OpenPMD")
  include(FetchContent)
  set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
  set(openPMD_BUILD_CLI_TOOLS OFF)
  set(openPMD_BUILD_EXAMPLES OFF)
  set(openPMD_BUILD_SHARED_LIBS OFF)
  set(openPMD_BUILD_TESTING OFF)
  set(openPMD_INSTALL OFF)
  set(openPMD_USE_PYTHON OFF)
  FetchContent_Declare(
    openPMD
    GIT_REPOSITORY "https://github.com/openPMD/openPMD-api.git"
    GIT_TAG "dev")
  if(${FETCH_HDF5})
    message(STATUS "fetching hdf5")
    set(HDF5_ENABLE_PARALLEL ON)
    set(HDF5_EXTERNALLY_CONFIGURED 1)
    FetchContent_Declare(
      hdf5
      GIT_REPOSITORY https://github.com/HDFGroup/hdf5
      GIT_TAG "hdf5-1_12_2")
    FetchContent_MakeAvailable(hdf5)
  endif()
  FetchContent_MakeAvailable(openPMD)
endif()

# GSL
find_package(GSL REQUIRED)

# FFTW3
if("${ENABLE_KOKKOS_BACKEND}" STREQUAL "OpenMP")
  find_package(FFTW3 REQUIRED)

  if(NOT FFTW3_MPI_FOUND)
    message(FATAL_ERROR "Missing FFTW3-mpi")
  endif()

  if(NOT FFTW3_OMP_FOUND)
    message(FATAL_ERROR "FFTW3 openmp not found")
  else()
    set(PARALLEL_FFTW_LIBRARIES ${FFTW3_MPI_LIBRARIES} ${FFTW3_OMP_LIBRARIES}
                                ${FFTW3_LIBRARIES})
  endif()
endif()

# cereal
if(USE_EXTERNAL_CEREAL)
  find_package(cereal REQUIRED)
  message(
    STATUS "Using external cereal with cmake configuration from ${cereal_DIR}")
else()
  message(STATUS "Fetching cereal")
  include(FetchContent)
  set(BUILD_SANDBOX OFF)
  set(SKIP_PERFORMANCE_COMPARISON ON)
  set(SKIP_PORTABILITY_TEST ON)
  set(JUST_INSTALL_CEREAL ON)
  set(CEREAL_INSTALL ON)
  FetchContent_Declare(
    cereal
    GIT_REPOSITORY https://github.com/USCiLab/cereal.git
    GIT_TAG v1.3.2)
  FetchContent_MakeAvailable(cereal)
endif()

# warnings
string(APPEND ${CMAKE_CXX_FLAGS} "-Wall -Werror")

# enable fast-math, but disable the finite-math-only to avoid the
# std::isfinite() woes
string(APPEND ${CMAKE_CXX_FLAGS} "-ffast-math -fno-finite-math-only")

# for eclipse only (no line wrapping for error messages)
if(CMAKE_COMPILER_IS_GNUCXX)
  string(APPEND ${CMAKE_CXX_FLAGS} "-fmessage-length=0")
endif(CMAKE_COMPILER_IS_GNUCXX)

# python
if(BUILD_PYTHON_BINDINGS)
  message(STATUS "Building python bindings")
  find_package(Python REQUIRED COMPONENTS Interpreter Development)

  # Make sure we have mpi4py available.
  execute_process(
    COMMAND ${Python_EXECUTABLE} -c "import mpi4py"
    RESULT_VARIABLE EXIT_CODE
    OUTPUT_QUIET)

  if(NOT ${EXIT_CODE} EQUAL 0)
    message(
      FATAL_ERROR
        "Python_EXECUTABLE is ${Python_EXECUTABLE}\nThe \"mpi4py\" module is not availale."
    )
  endif()

  # pybind11
  if(USE_EXTERNAL_PYBIND11)
    find_package(pybind11 REQUIRED CONFIG)
    message(STATUS "Using external pybind11")
  else()
    message(STATUS "Fetching pybind11")
    include(FetchContent)
    FetchContent_Declare(
      pybind11
      GIT_REPOSITORY https://github.com/pybind/pybind11
      GIT_TAG v2.10.0)
    FetchContent_MakeAvailable(pybind11)
  endif()
else(BUILD_PYTHON_BINDINGS)
  message(STATUS "Do not build python bindings")
endif()

# simple timer
if(SIMPLE_TIMER)
  message(STATUS "Simple timer 2 profiling enabled")
  add_compile_definitions(SIMPLE_TIMER=1)
endif()

# allow padding
if(ALLOW_PADDING)
  message(STATUS "Particle array padding enabled")
else()
  message(STATUS "Particle array padding disabled")
  add_definitions(-DNO_PADDING)
endif()

# GSVector settings
if(GSV STREQUAL "SSE")
  message(STATUS "using SSE for gsvector")
  add_definitions(-DGSV_SSE)
elseif(GSV STREQUAL "AVX")
  message(STATUS "using AVX for gsvector")
  add_definitions(-DGSV_AVX)
elseif(GSV STREQUAL "AVX2")
  message(STATUS "using AVX2 for gsvector")
  add_definitions(-DGSV_AVX2)
elseif(GSV STREQUAL "AVX512")
  message(STATUS "using AVX512 for gsvector")
  add_definitions(-DGSV_AVX512)
else()
  message(STATUS "using double for gsvector")
endif()

# Find Eigen, a dependency we vendor
message(STATUS "Configuring Eigen3 for use in host routines.")
# Eigen tries to determine fortran compiler ID via FC, which can cause issues
# with flang-new, so unset that temporarily.
set(FC_BACKUP $ENV{FC})
unset(ENV{FC})
add_subdirectory(${SYNERGIA2_SOURCE_DIR}/src/synergia/utils/eigen)
set(ENV{FC} ${FC_BACKUP})
find_package(Eigen3 REQUIRED PATHS
             ${SYNERGIA2_SOURCE_DIR}/src/synergia/utils/eigen)

# Additional CXXFLAGS
if(EXTRA_CXX_FLAGS)
  string(APPEND CMAKE_CXX_FLAGS ${EXTRA_CXX_FLAGS})
endif()

# External libraries generate many warnings add_definitions(-Wall -pedantic
# -Wno-long-long)

configure_file("${SYNERGIA2_SOURCE_DIR}/synergia-local.in"
               "${SYNERGIA2_BINARY_DIR}/synergia-local" IMMEDIATE)

configure_file("${SYNERGIA2_SOURCE_DIR}/src/local_paths.py.in"
               "${SYNERGIA2_BINARY_DIR}/src/local_paths.py" IMMEDIATE)

include_directories(BEFORE ${SYNERGIA2_SOURCE_DIR}/src/synergia/utils
)# for boost headers
include_directories(BEFORE ${SYNERGIA2_SOURCE_DIR}/src)

if(NOT TARGET test-exes)
  add_custom_target(test-exes)
endif()

function(add_test_executable name)
  add_executable(${name} ${ARGN})
  add_dependencies(test-exes ${name})
endfunction()

add_custom_target(
  check
  COMMAND ${CMAKE_CTEST_COMMAND}
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
  COMMENT "Running ctest")
add_dependencies(check test-exes)

set(INCLUDE_INSTALL_DIR
    include/
    CACHE PATH "include install directory")
set(LIB_INSTALL_DIR
    lib/
    CACHE PATH "library install directory")
set(BIN_INSTALL_DIR
    bin/
    CACHE PATH "executable install directory")
set(PYTHON_INSTALL_DIR
    "lib/python${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}/site-packages/"
    CACHE PATH "python install directory")

set(SYNERGIA_EXTRA_LIBRARY_PATHS
    ""
    CACHE STRING "additional library paths for synergia executable")
set(SYNERGIA_EXTRA_PYTHON_PATHS
    ""
    CACHE STRING "additional python module paths for synergia executable")

set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

add_subdirectory(src)

if(BUILD_EXAMPLES)
  add_subdirectory(examples)
endif()
add_subdirectory(synergia-script-templates)
