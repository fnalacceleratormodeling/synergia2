[project]
name = "synergia3"
version = "2024.04.17"
description = "Synergia is a accelerator modeling and simulation package developped at Fermilab."
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64"]

[feature.cpu]
platforms = ["linux-64", "osx-arm64"]

[feature.cuda]
platforms = ["linux-64"]
system-requirements = {cuda = "12"}
channels = ["nvidia", "conda-forge"]

[tasks]
build = { cmd = "cmake --build build_pixi", depends_on = ["cmake"], description = "build synergia3" }
install = { cmd = "cmake --install build_pixi", depends_on = ["build"], description = "install synergia3" }
test = { cmd = "ctest --output-on-failure --test-dir build_pixi", depends_on = ["install"],env = { SYNINSTALL = "$(pwd)/install_pixi", LD_LIBRARY_PATH = "$SYNINSTALL/lib:$SYNINSTALL:lib64:$LD_LIBRARY_PATH",PYTHON_VERSION = "$(python3 -c 'import sys; print(str(sys.version[:4]))')",PYTHONPATH="$SYNINSTALL/lib:$SYNINSTALL/lib/python$PYTHON_VERSION/site-packages:$SYNINSTALL/lib:$SYNINSTALL/lib64/python$PYTHON_VERSION/site-packages:$PYTHONPATH" } , description = "run test suite" }
test-failed = { cmd = "ctest -V --output-on-failure --rerun-failed --test-dir build_pixi", depends_on = ["install"],env = { SYNINSTALL = "$(pwd)/install_pixi", LD_LIBRARY_PATH = "$SYNINSTALL/lib:$SYNINSTALL:lib64:${LD_LIBRARY_PATH}",PYTHON_VERSION = "$(python3 -c 'import sys; print(str(sys.version[:4]))')",PYTHONPATH="$SYNINSTALL/lib:$SYNINSTALL/lib/python$PYTHON_VERSION/site-packages:$SYNINSTALL/lib:$SYNINSTALL/lib64/python$PYTHON_VERSION/site-packages:$PYTHONPATH" } , description = "re-run failed tests with increased verbosity" }
clean = { cmd = "rm -rf build_pixi/ && rm -rf install_pixi/", description = "delete build/install directories" }

synergia = { cmd = "bash" , env = { SYNINSTALL = "$(pwd)/install_pixi", LD_LIBRARY_PATH="$SYNINSTALL/lib:$SYNINSTALL/lib64:$LD_LIBRARY_PATH", PYTHON_VERSION = "$(python3 -c 'import sys; print(str(sys.version[:4]))')", PYTHONPATH="$SYNINSTALL/lib/python$PYTHON_VERSION/site-packages"}, description = "start shell in built synergia environment" }

[target.linux-64.tasks]
# On x86_64 CPUs, GSV should be set to AVX for improved performance. You
# would think it should be AVX2 but AVX is fast on all the systems I've tested.
cmake = { cmd = "cmake -S . -B build_pixi -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(pwd)/.pixi/envs/default -DCMAKE_INSTALL_PREFIX=$(pwd)/install_pixi -DENABLE_KOKKOS_BACKEND=OpenMP -DUSE_EXTERNAL_KOKKOS=OFF -DUSE_OPENPMD_IO=ON -DUSE_EXTERNAL_OPENPMD=OFF -DBUILD_FD_SPACE_CHARGE_SOLVER=OFF -DGSV=AVX -DSIMPLE_TIMER=OFF", description = "Run cmake to generate the build recipes"}

[target.osx-arm64.tasks]
# On arm64 CPUs, GSV should be set to DOUBLE.
cmake = { cmd = "cmake -S . -B build_pixi -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(pwd)/.pixi/envs/default -DCMAKE_INSTALL_PREFIX=$(pwd)/install_pixi -DENABLE_KOKKOS_BACKEND=OpenMP -DUSE_EXTERNAL_KOKKOS=OFF -DUSE_OPENPMD_IO=ON -DUSE_EXTERNAL_OPENPMD=OFF -DBUILD_FD_SPACE_CHARGE_SOLVER=OFF -DGSV=DOUBLE -DSIMPLE_TIMER=OFF", description = "Run cmake to generate the build recipes"}

[feature.cuda.tasks]
cmake = { cmd = "cmake -S . -B build_pixi -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(pwd)/install_pixi -DENABLE_KOKKOS_BACKEND=CUDA -DUSE_EXTERNAL_KOKKOS=OFF -DUSE_OPENPMD_IO=ON -DUSE_EXTERNAL_OPENPMD=OFF -DGSV=DOUBLE", description = "Run cmake to generate the build recipes"}

[feature.cpu.dependencies]
python = ">=3.12.3,<3.13"
cmake = ">=3.29.5,<3.30"
h5py = { version = ">=3.11.0,<3.12", build = "mpi*" }
gsl = ">=2.7,<3"
fftw = { version = ">=3.3.10,<3.4", build = "mpi*" }
hdf5 = { version = ">=1.14.3,<1.15", build = "mpi*" }
pybind11 = ">=2.12.0,<2.13"
pytest = ">=8.2.2,<8.3"
numpy = ">=1.26.4,<1.27"
seaborn = ">=0.13.2,<0.14"
cxx-compiler = ">=1.7.0,<1.8"

[feature.cuda.dependencies]
cuda-nvcc = ">12.4.0"
cuda-libraries-dev = ">12.4.0"
cuda-cudart-dev = ">12.4.0"
cuda-toolkit = ">12.4.0"

[environments]
cpu = ["cpu"]
cuda = {features = ["cpu", "cuda"]}
default = ["cpu"]

